
C:\Users\SIDDHE~1.HAD\AppData\Local\Temp\arduino_build_54932/Final_WLC_020_V4.03.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000200 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
     200:	50 c0       	rjmp	.+160    	; 0x2a2 <__ctors_end>
     202:	00 00       	nop
../../../../crt1/gcrt1.S:67
     204:	76 c0       	rjmp	.+236    	; 0x2f2 <__bad_interrupt>
     206:	00 00       	nop
../../../../crt1/gcrt1.S:68
     208:	74 c0       	rjmp	.+232    	; 0x2f2 <__bad_interrupt>
     20a:	00 00       	nop
../../../../crt1/gcrt1.S:69
     20c:	72 c0       	rjmp	.+228    	; 0x2f2 <__bad_interrupt>
     20e:	00 00       	nop
../../../../crt1/gcrt1.S:70
     210:	70 c0       	rjmp	.+224    	; 0x2f2 <__bad_interrupt>
     212:	00 00       	nop
../../../../crt1/gcrt1.S:71
     214:	6e c0       	rjmp	.+220    	; 0x2f2 <__bad_interrupt>
     216:	00 00       	nop
../../../../crt1/gcrt1.S:72
     218:	6c c0       	rjmp	.+216    	; 0x2f2 <__bad_interrupt>
     21a:	00 00       	nop
../../../../crt1/gcrt1.S:73
     21c:	0c 94 ed 24 	jmp	0x49da	; 0x49da <__vector_7>
../../../../crt1/gcrt1.S:74
     220:	68 c0       	rjmp	.+208    	; 0x2f2 <__bad_interrupt>
     222:	00 00       	nop
../../../../crt1/gcrt1.S:75
     224:	66 c0       	rjmp	.+204    	; 0x2f2 <__bad_interrupt>
     226:	00 00       	nop
../../../../crt1/gcrt1.S:76
     228:	64 c0       	rjmp	.+200    	; 0x2f2 <__bad_interrupt>
     22a:	00 00       	nop
../../../../crt1/gcrt1.S:77
     22c:	62 c0       	rjmp	.+196    	; 0x2f2 <__bad_interrupt>
     22e:	00 00       	nop
../../../../crt1/gcrt1.S:78
     230:	60 c0       	rjmp	.+192    	; 0x2f2 <__bad_interrupt>
     232:	00 00       	nop
../../../../crt1/gcrt1.S:79
     234:	5e c0       	rjmp	.+188    	; 0x2f2 <__bad_interrupt>
     236:	00 00       	nop
../../../../crt1/gcrt1.S:80
     238:	5c c0       	rjmp	.+184    	; 0x2f2 <__bad_interrupt>
     23a:	00 00       	nop
../../../../crt1/gcrt1.S:81
     23c:	5a c0       	rjmp	.+180    	; 0x2f2 <__bad_interrupt>
     23e:	00 00       	nop
../../../../crt1/gcrt1.S:82
     240:	58 c0       	rjmp	.+176    	; 0x2f2 <__bad_interrupt>
     242:	00 00       	nop
../../../../crt1/gcrt1.S:83
     244:	56 c0       	rjmp	.+172    	; 0x2f2 <__bad_interrupt>
     246:	00 00       	nop
../../../../crt1/gcrt1.S:84
     248:	54 c0       	rjmp	.+168    	; 0x2f2 <__bad_interrupt>
     24a:	00 00       	nop
../../../../crt1/gcrt1.S:85
     24c:	52 c0       	rjmp	.+164    	; 0x2f2 <__bad_interrupt>
     24e:	00 00       	nop
../../../../crt1/gcrt1.S:86
     250:	50 c0       	rjmp	.+160    	; 0x2f2 <__bad_interrupt>
     252:	00 00       	nop
../../../../crt1/gcrt1.S:87
     254:	4e c0       	rjmp	.+156    	; 0x2f2 <__bad_interrupt>
     256:	00 00       	nop
../../../../crt1/gcrt1.S:88
     258:	4c c0       	rjmp	.+152    	; 0x2f2 <__bad_interrupt>
     25a:	00 00       	nop
../../../../crt1/gcrt1.S:89
     25c:	4a c0       	rjmp	.+148    	; 0x2f2 <__bad_interrupt>
     25e:	00 00       	nop
../../../../crt1/gcrt1.S:90
     260:	48 c0       	rjmp	.+144    	; 0x2f2 <__bad_interrupt>
     262:	00 00       	nop
../../../../crt1/gcrt1.S:91
     264:	0c 94 c5 24 	jmp	0x498a	; 0x498a <__vector_25>
../../../../crt1/gcrt1.S:92
     268:	44 c0       	rjmp	.+136    	; 0x2f2 <__bad_interrupt>
     26a:	00 00       	nop
../../../../crt1/gcrt1.S:93
     26c:	42 c0       	rjmp	.+132    	; 0x2f2 <__bad_interrupt>
     26e:	00 00       	nop
../../../../crt1/gcrt1.S:94
     270:	40 c0       	rjmp	.+128    	; 0x2f2 <__bad_interrupt>
     272:	00 00       	nop
../../../../crt1/gcrt1.S:95
     274:	3e c0       	rjmp	.+124    	; 0x2f2 <__bad_interrupt>
     276:	00 00       	nop
../../../../crt1/gcrt1.S:96
     278:	3c c0       	rjmp	.+120    	; 0x2f2 <__bad_interrupt>
     27a:	00 00       	nop
../../../../crt1/gcrt1.S:97
     27c:	0c 94 97 24 	jmp	0x492e	; 0x492e <__vector_31>
../../../../crt1/gcrt1.S:98
     280:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__vector_32>
../../../../crt1/gcrt1.S:99
     284:	36 c0       	rjmp	.+108    	; 0x2f2 <__bad_interrupt>
     286:	00 00       	nop
../../../../crt1/gcrt1.S:100
     288:	34 c0       	rjmp	.+104    	; 0x2f2 <__bad_interrupt>
     28a:	00 00       	nop
../../../../crt1/gcrt1.S:101
     28c:	32 c0       	rjmp	.+100    	; 0x2f2 <__bad_interrupt>
     28e:	00 00       	nop
../../../../crt1/gcrt1.S:102
     290:	30 c0       	rjmp	.+96     	; 0x2f2 <__bad_interrupt>
     292:	00 00       	nop
../../../../crt1/gcrt1.S:103
     294:	2e c0       	rjmp	.+92     	; 0x2f2 <__bad_interrupt>
     296:	00 00       	nop
../../../../crt1/gcrt1.S:104
     298:	2c c0       	rjmp	.+88     	; 0x2f2 <__bad_interrupt>
     29a:	00 00       	nop
../../../../crt1/gcrt1.S:105
     29c:	2a c0       	rjmp	.+84     	; 0x2f2 <__bad_interrupt>
	...

000002a0 <__ctors_start>:
__trampolines_start():
     2a0:	82 25       	eor	r24, r2

000002a2 <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
     2a2:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
     2a4:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
     2a6:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
     2a8:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
     2aa:	df e3       	ldi	r29, 0x3F	; 63
../../../../crt1/gcrt1.S:237
     2ac:	de bf       	out	0x3e, r29	; 62

000002ae <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     2ae:	18 e2       	ldi	r17, 0x28	; 40
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     2b0:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     2b2:	b8 e2       	ldi	r27, 0x28	; 40
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     2b4:	e2 ed       	ldi	r30, 0xD2	; 210
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     2b6:	f6 e7       	ldi	r31, 0x76	; 118
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     2ba:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     2bc:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     2be:	a8 31       	cpi	r26, 0x18	; 24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     2c0:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     2c2:	d9 f7       	brne	.-10     	; 0x2ba <__do_copy_data+0xc>

000002c4 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     2c4:	2b e2       	ldi	r18, 0x2B	; 43
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     2c6:	a8 e1       	ldi	r26, 0x18	; 24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     2c8:	b8 e2       	ldi	r27, 0x28	; 40
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     2ca:	01 c0       	rjmp	.+2      	; 0x2ce <.do_clear_bss_start>

000002cc <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     2cc:	1d 92       	st	X+, r1

000002ce <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     2ce:	a6 3f       	cpi	r26, 0xF6	; 246
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     2d0:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     2d2:	e1 f7       	brne	.-8      	; 0x2cc <.do_clear_bss_loop>

000002d4 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     2d4:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     2d6:	c1 e5       	ldi	r28, 0x51	; 81
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     2d8:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     2da:	04 c0       	rjmp	.+8      	; 0x2e4 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     2dc:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     2de:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     2e0:	0e 94 6c 3a 	call	0x74d8	; 0x74d8 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     2e4:	c0 35       	cpi	r28, 0x50	; 80
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     2e6:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     2e8:	c9 f7       	brne	.-14     	; 0x2dc <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
     2ea:	0e 94 07 29 	call	0x520e	; 0x520e <main>
../../../../crt1/gcrt1.S:315
     2ee:	0c 94 ab 3a 	jmp	0x7556	; 0x7556 <_exit>

000002f2 <__bad_interrupt>:
__vector_38():
../../../../crt1/gcrt1.S:209
     2f2:	86 cf       	rjmp	.-244    	; 0x200 <__vectors>

000002f4 <VerDisp()>:
VerDisp():
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:116
  toggle_ticker.update();
}

void VerDisp()
{
  StopVersionDisplay=0;        //-----------------------To stop version display  
     2f4:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <StopVersionDisplay>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:117
}
     2f8:	08 95       	ret

000002fa <toggle_fun()>:
toggle_fun():
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:38

void toggle_fun();
Ticker toggle_ticker(toggle_fun, 1000, 0, MILLIS);  //Time_speed_show_toggle
void toggle_fun()
{    
   toggle == 0 ? toggle = 1 : toggle = 0;   
     2fa:	80 91 3d 28 	lds	r24, 0x283D	; 0x80283d <toggle>
     2fe:	81 11       	cpse	r24, r1
     300:	04 c0       	rjmp	.+8      	; 0x30a <toggle_fun()+0x10>
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	80 93 3d 28 	sts	0x283D, r24	; 0x80283d <toggle>
     308:	08 95       	ret
     30a:	10 92 3d 28 	sts	0x283D, r1	; 0x80283d <toggle>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:39
}
     30e:	08 95       	ret

00000310 <Alternate_Display()>:
Alternate_Display():
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Procss.cpp:66
bool select_heating_type=0;
bool checkTempRaised=0; //Siddhesh

void Alternate_Display()                    //------------------to show set and current temoerature alternatively on display
{
  if(Alternate_Display_Flag) Alternate_Display_Flag=0;
     310:	80 91 6f 28 	lds	r24, 0x286F	; 0x80286f <Alternate_Display_Flag>
     314:	88 23       	and	r24, r24
     316:	19 f0       	breq	.+6      	; 0x31e <Alternate_Display()+0xe>
     318:	10 92 6f 28 	sts	0x286F, r1	; 0x80286f <Alternate_Display_Flag>
     31c:	08 95       	ret
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Procss.cpp:67
  else                       Alternate_Display_Flag=1;
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	80 93 6f 28 	sts	0x286F, r24	; 0x80286f <Alternate_Display_Flag>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Procss.cpp:68
}
     324:	08 95       	ret

00000326 <Bclass::SET_CHANGE_UP() [clone .constprop.69]>:
SET_CHANGE_UP():
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:63
    TCA0.SINGLE.INTFLAGS = TCA_SINGLE_OVF_bm;  
}

void Bclass :: SET_CHANGE_UP()
{
  if(LONG_PRESS )
     326:	80 91 50 29 	lds	r24, 0x2950	; 0x802950 <LONG_PRESS>
     32a:	88 23       	and	r24, r24
     32c:	09 f4       	brne	.+2      	; 0x330 <Bclass::SET_CHANGE_UP() [clone .constprop.69]+0xa>
     32e:	5e c0       	rjmp	.+188    	; 0x3ec <Bclass::SET_CHANGE_UP() [clone .constprop.69]+0xc6>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:65
   {
      if(SELECTION_PARAMETER == Safe_Value  && DEGREE_VALUE_SET)     SET_LONG_VALUE[Safe_In_Fah] += SPEED_SW[INC];   if(SET_LONG_VALUE[Safe_In_Fah] > 212) SET_LONG_VALUE[Safe_In_Fah] = 212;  
     330:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <SELECTION_PARAMETER>
     334:	90 91 0a 28 	lds	r25, 0x280A	; 0x80280a <SELECTION_PARAMETER+0x1>
     338:	82 30       	cpi	r24, 0x02	; 2
     33a:	91 05       	cpc	r25, r1
     33c:	71 f4       	brne	.+28     	; 0x35a <Bclass::SET_CHANGE_UP() [clone .constprop.69]+0x34>
     33e:	20 91 4f 29 	lds	r18, 0x294F	; 0x80294f <DEGREE_VALUE_SET>
     342:	22 23       	and	r18, r18
     344:	51 f0       	breq	.+20     	; 0x35a <Bclass::SET_CHANGE_UP() [clone .constprop.69]+0x34>
     346:	20 91 45 29 	lds	r18, 0x2945	; 0x802945 <SET_LONG_VALUE+0x28>
     34a:	30 91 46 29 	lds	r19, 0x2946	; 0x802946 <SET_LONG_VALUE+0x29>
     34e:	2f 5f       	subi	r18, 0xFF	; 255
     350:	3f 4f       	sbci	r19, 0xFF	; 255
     352:	20 93 45 29 	sts	0x2945, r18	; 0x802945 <SET_LONG_VALUE+0x28>
     356:	30 93 46 29 	sts	0x2946, r19	; 0x802946 <SET_LONG_VALUE+0x29>
     35a:	20 91 45 29 	lds	r18, 0x2945	; 0x802945 <SET_LONG_VALUE+0x28>
     35e:	30 91 46 29 	lds	r19, 0x2946	; 0x802946 <SET_LONG_VALUE+0x29>
     362:	25 3d       	cpi	r18, 0xD5	; 213
     364:	31 05       	cpc	r19, r1
     366:	a4 f0       	brlt	.+40     	; 0x390 <Bclass::SET_CHANGE_UP() [clone .constprop.69]+0x6a>
     368:	24 ed       	ldi	r18, 0xD4	; 212
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	20 93 45 29 	sts	0x2945, r18	; 0x802945 <SET_LONG_VALUE+0x28>
     370:	30 93 46 29 	sts	0x2946, r19	; 0x802946 <SET_LONG_VALUE+0x29>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:66
      else if(SELECTION_PARAMETER == Cal1_Point && DEGREE_VALUE_SET) SET_LONG_VALUE[Cal1_In_Fah] += SPEED_SW[INC];   if(SET_LONG_VALUE[Cal1_In_Fah] > 212) SET_LONG_VALUE[Cal1_In_Fah] = 212;  
     374:	20 91 47 29 	lds	r18, 0x2947	; 0x802947 <SET_LONG_VALUE+0x2a>
     378:	30 91 48 29 	lds	r19, 0x2948	; 0x802948 <SET_LONG_VALUE+0x2b>
     37c:	25 3d       	cpi	r18, 0xD5	; 213
     37e:	31 05       	cpc	r19, r1
     380:	cc f0       	brlt	.+50     	; 0x3b4 <Bclass::SET_CHANGE_UP() [clone .constprop.69]+0x8e>
     382:	84 ed       	ldi	r24, 0xD4	; 212
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	80 93 47 29 	sts	0x2947, r24	; 0x802947 <SET_LONG_VALUE+0x2a>
     38a:	90 93 48 29 	sts	0x2948, r25	; 0x802948 <SET_LONG_VALUE+0x2b>
     38e:	08 95       	ret
     390:	88 30       	cpi	r24, 0x08	; 8
     392:	91 05       	cpc	r25, r1
     394:	79 f7       	brne	.-34     	; 0x374 <Bclass::SET_CHANGE_UP() [clone .constprop.69]+0x4e>
     396:	20 91 4f 29 	lds	r18, 0x294F	; 0x80294f <DEGREE_VALUE_SET>
     39a:	22 23       	and	r18, r18
     39c:	59 f3       	breq	.-42     	; 0x374 <Bclass::SET_CHANGE_UP() [clone .constprop.69]+0x4e>
     39e:	20 91 47 29 	lds	r18, 0x2947	; 0x802947 <SET_LONG_VALUE+0x2a>
     3a2:	30 91 48 29 	lds	r19, 0x2948	; 0x802948 <SET_LONG_VALUE+0x2b>
     3a6:	2f 5f       	subi	r18, 0xFF	; 255
     3a8:	3f 4f       	sbci	r19, 0xFF	; 255
     3aa:	20 93 47 29 	sts	0x2947, r18	; 0x802947 <SET_LONG_VALUE+0x2a>
     3ae:	30 93 48 29 	sts	0x2948, r19	; 0x802948 <SET_LONG_VALUE+0x2b>
     3b2:	e0 cf       	rjmp	.-64     	; 0x374 <Bclass::SET_CHANGE_UP() [clone .constprop.69]+0x4e>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:69
      else
      {
         SET_LONG_VALUE[SELECTION_PARAMETER] += SPEED_SW[INC];
     3b4:	88 0f       	add	r24, r24
     3b6:	99 1f       	adc	r25, r25
     3b8:	fc 01       	movw	r30, r24
     3ba:	e3 5e       	subi	r30, 0xE3	; 227
     3bc:	f6 4d       	sbci	r31, 0xD6	; 214
     3be:	20 81       	ld	r18, Z
     3c0:	31 81       	ldd	r19, Z+1	; 0x01
     3c2:	2f 5f       	subi	r18, 0xFF	; 255
     3c4:	3f 4f       	sbci	r19, 0xFF	; 255
     3c6:	20 83       	st	Z, r18
     3c8:	31 83       	std	Z+1, r19	; 0x01
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:70
         if(SET_LONG_VALUE[SELECTION_PARAMETER] > MAX_SET_VALUE_LONG[SELECTION_PARAMETER])    SET_LONG_VALUE[SELECTION_PARAMETER]= Menu_Limit_Upper_Side[SELECTION_PARAMETER]; 
     3ca:	dc 01       	movw	r26, r24
     3cc:	a6 57       	subi	r26, 0x76	; 118
     3ce:	b9 44       	sbci	r27, 0x49	; 73
     3d0:	4d 91       	ld	r20, X+
     3d2:	5c 91       	ld	r21, X
     3d4:	42 17       	cp	r20, r18
     3d6:	53 07       	cpc	r21, r19
     3d8:	0c f0       	brlt	.+2      	; 0x3dc <Bclass::SET_CHANGE_UP() [clone .constprop.69]+0xb6>
     3da:	8e c0       	rjmp	.+284    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
     3dc:	8c 59       	subi	r24, 0x9C	; 156
     3de:	99 44       	sbci	r25, 0x49	; 73
     3e0:	dc 01       	movw	r26, r24
     3e2:	8d 91       	ld	r24, X+
     3e4:	9c 91       	ld	r25, X
     3e6:	80 83       	st	Z, r24
     3e8:	91 83       	std	Z+1, r25	; 0x01
     3ea:	08 95       	ret
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:75
      }
  }
  else
  {
               if( ENTER_BUT == 1 )   
     3ec:	80 91 1c 29 	lds	r24, 0x291C	; 0x80291c <ENTER_BUT>
     3f0:	81 30       	cpi	r24, 0x01	; 1
     3f2:	b1 f4       	brne	.+44     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:77
               {
                 SET_VALUE[ENTER_BUT] += SPEED_SW[INC]; if(SET_VALUE[ENTER_BUT] > SAFE_VALUE_SET_DEG) SET_VALUE[ENTER_BUT] = 0; 
     3f4:	80 91 12 29 	lds	r24, 0x2912	; 0x802912 <SET_VALUE+0x2>
     3f8:	90 91 13 29 	lds	r25, 0x2913	; 0x802913 <SET_VALUE+0x3>
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	80 93 12 29 	sts	0x2912, r24	; 0x802912 <SET_VALUE+0x2>
     402:	90 93 13 29 	sts	0x2913, r25	; 0x802913 <SET_VALUE+0x3>
     406:	20 91 0e 29 	lds	r18, 0x290E	; 0x80290e <SAFE_VALUE_SET_DEG>
     40a:	30 91 0f 29 	lds	r19, 0x290F	; 0x80290f <SAFE_VALUE_SET_DEG+0x1>
     40e:	28 17       	cp	r18, r24
     410:	39 07       	cpc	r19, r25
     412:	0c f0       	brlt	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     414:	71 c0       	rjmp	.+226    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
     416:	10 92 12 29 	sts	0x2912, r1	; 0x802912 <SET_VALUE+0x2>
     41a:	10 92 13 29 	sts	0x2913, r1	; 0x802913 <SET_VALUE+0x3>
     41e:	08 95       	ret
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:79
               }
                else if( ENTER_BUT == 2 )   
     420:	82 30       	cpi	r24, 0x02	; 2
     422:	39 f5       	brne	.+78     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:81
               {
                SET_VALUE[ENTER_BUT] +=SPEED_SW[INC]; if(SET_VALUE[ENTER_BUT] > 9) SET_VALUE[ENTER_BUT] = 9; 
     424:	80 91 14 29 	lds	r24, 0x2914	; 0x802914 <SET_VALUE+0x4>
     428:	90 91 15 29 	lds	r25, 0x2915	; 0x802915 <SET_VALUE+0x5>
     42c:	01 96       	adiw	r24, 0x01	; 1
     42e:	8a 30       	cpi	r24, 0x0A	; 10
     430:	91 05       	cpc	r25, r1
     432:	e4 f4       	brge	.+56     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     434:	80 93 14 29 	sts	0x2914, r24	; 0x802914 <SET_VALUE+0x4>
     438:	90 93 15 29 	sts	0x2915, r25	; 0x802915 <SET_VALUE+0x5>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:82
                SET_VALUE[22] +=SPEED_SW[INC]; if(SET_VALUE[22] > SAFE_VALUE_SET_FAH) SET_VALUE[22] = 32; 
     43c:	80 91 3c 29 	lds	r24, 0x293C	; 0x80293c <SET_LONG_VALUE+0x1f>
     440:	90 91 3d 29 	lds	r25, 0x293D	; 0x80293d <SET_LONG_VALUE+0x20>
     444:	01 96       	adiw	r24, 0x01	; 1
     446:	80 93 3c 29 	sts	0x293C, r24	; 0x80293c <SET_LONG_VALUE+0x1f>
     44a:	90 93 3d 29 	sts	0x293D, r25	; 0x80293d <SET_LONG_VALUE+0x20>
     44e:	20 91 0c 29 	lds	r18, 0x290C	; 0x80290c <SAFE_VALUE_SET_FAH>
     452:	30 91 0d 29 	lds	r19, 0x290D	; 0x80290d <SAFE_VALUE_SET_FAH+0x1>
     456:	28 17       	cp	r18, r24
     458:	39 07       	cpc	r19, r25
     45a:	0c f0       	brlt	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     45c:	4d c0       	rjmp	.+154    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
     45e:	80 e2       	ldi	r24, 0x20	; 32
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	80 93 3c 29 	sts	0x293C, r24	; 0x80293c <SET_LONG_VALUE+0x1f>
     466:	90 93 3d 29 	sts	0x293D, r25	; 0x80293d <SET_LONG_VALUE+0x20>
     46a:	08 95       	ret
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:81
               {
                 SET_VALUE[ENTER_BUT] += SPEED_SW[INC]; if(SET_VALUE[ENTER_BUT] > SAFE_VALUE_SET_DEG) SET_VALUE[ENTER_BUT] = 0; 
               }
                else if( ENTER_BUT == 2 )   
               {
                SET_VALUE[ENTER_BUT] +=SPEED_SW[INC]; if(SET_VALUE[ENTER_BUT] > 9) SET_VALUE[ENTER_BUT] = 9; 
     46c:	89 e0       	ldi	r24, 0x09	; 9
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	e1 cf       	rjmp	.-62     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:84
                SET_VALUE[22] +=SPEED_SW[INC]; if(SET_VALUE[22] > SAFE_VALUE_SET_FAH) SET_VALUE[22] = 32; 
               }
               else if( ENTER_BUT == 3 )   
     472:	83 30       	cpi	r24, 0x03	; 3
     474:	91 f4       	brne	.+36     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:86
               {
                SET_VALUE[ENTER_BUT] +=SPEED_SW[INC]; if(SET_VALUE[ENTER_BUT] > MAX_SET_VALUE[ENTER_BUT]) SET_VALUE[ENTER_BUT] = 0; 
     476:	80 91 16 29 	lds	r24, 0x2916	; 0x802916 <SET_VALUE+0x6>
     47a:	90 91 17 29 	lds	r25, 0x2917	; 0x802917 <SET_VALUE+0x7>
     47e:	01 96       	adiw	r24, 0x01	; 1
     480:	84 36       	cpi	r24, 0x64	; 100
     482:	91 05       	cpc	r25, r1
     484:	2c f4       	brge	.+10     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     486:	80 93 16 29 	sts	0x2916, r24	; 0x802916 <SET_VALUE+0x6>
     48a:	90 93 17 29 	sts	0x2917, r25	; 0x802917 <SET_VALUE+0x7>
     48e:	08 95       	ret
     490:	10 92 16 29 	sts	0x2916, r1	; 0x802916 <SET_VALUE+0x6>
     494:	10 92 17 29 	sts	0x2917, r1	; 0x802917 <SET_VALUE+0x7>
     498:	08 95       	ret
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:88
               }
               else if( ENTER_BUT == 4 )   
     49a:	84 30       	cpi	r24, 0x04	; 4
     49c:	91 f4       	brne	.+36     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:90
               {
                SET_VALUE[ENTER_BUT] +=SPEED_SW[INC]; if(SET_VALUE[ENTER_BUT] > MAX_SET_VALUE[ENTER_BUT]) SET_VALUE[ENTER_BUT] = 0; 
     49e:	80 91 18 29 	lds	r24, 0x2918	; 0x802918 <SET_VALUE+0x8>
     4a2:	90 91 19 29 	lds	r25, 0x2919	; 0x802919 <SET_VALUE+0x9>
     4a6:	01 96       	adiw	r24, 0x01	; 1
     4a8:	8c 33       	cpi	r24, 0x3C	; 60
     4aa:	91 05       	cpc	r25, r1
     4ac:	2c f4       	brge	.+10     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     4ae:	80 93 18 29 	sts	0x2918, r24	; 0x802918 <SET_VALUE+0x8>
     4b2:	90 93 19 29 	sts	0x2919, r25	; 0x802919 <SET_VALUE+0x9>
     4b6:	08 95       	ret
     4b8:	10 92 18 29 	sts	0x2918, r1	; 0x802918 <SET_VALUE+0x8>
     4bc:	10 92 19 29 	sts	0x2919, r1	; 0x802919 <SET_VALUE+0x9>
     4c0:	08 95       	ret
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:92
               }  
               if( ENTER_BUT == 5 && PUMP_FLAG && select_product_type)   
     4c2:	85 30       	cpi	r24, 0x05	; 5
     4c4:	c9 f4       	brne	.+50     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
     4c6:	80 91 0b 29 	lds	r24, 0x290B	; 0x80290b <PUMP_FLAG>
     4ca:	88 23       	and	r24, r24
     4cc:	a9 f0       	breq	.+42     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
     4ce:	80 91 0a 29 	lds	r24, 0x290A	; 0x80290a <select_product_type>
     4d2:	88 23       	and	r24, r24
     4d4:	89 f0       	breq	.+34     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:94
               {
                SET_VALUE[ENTER_BUT] +=SPEED_SW[INC]; if(SET_VALUE[ENTER_BUT] > MAX_SET_VALUE[ENTER_BUT]) SET_VALUE[ENTER_BUT] = 0; 
     4d6:	80 91 1a 29 	lds	r24, 0x291A	; 0x80291a <SET_VALUE+0xa>
     4da:	90 91 1b 29 	lds	r25, 0x291B	; 0x80291b <SET_VALUE+0xb>
     4de:	01 96       	adiw	r24, 0x01	; 1
     4e0:	82 30       	cpi	r24, 0x02	; 2
     4e2:	91 05       	cpc	r25, r1
     4e4:	2c f4       	brge	.+10     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4e6:	80 93 1a 29 	sts	0x291A, r24	; 0x80291a <SET_VALUE+0xa>
     4ea:	90 93 1b 29 	sts	0x291B, r25	; 0x80291b <SET_VALUE+0xb>
     4ee:	08 95       	ret
     4f0:	10 92 1a 29 	sts	0x291A, r1	; 0x80291a <SET_VALUE+0xa>
     4f4:	10 92 1b 29 	sts	0x291B, r1	; 0x80291b <SET_VALUE+0xb>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:97
               }
  }
}
     4f8:	08 95       	ret

000004fa <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]>:
SET_CHANGE_DOWN():
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:101

void Bclass :: SET_CHANGE_DOWN()
{
  if(LONG_PRESS )
     4fa:	80 91 50 29 	lds	r24, 0x2950	; 0x802950 <LONG_PRESS>
     4fe:	88 23       	and	r24, r24
     500:	09 f4       	brne	.+2      	; 0x504 <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]+0xa>
     502:	57 c0       	rjmp	.+174    	; 0x5b2 <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]+0xb8>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:103
  {
      if(SELECTION_PARAMETER == Safe_Value  && DEGREE_VALUE_SET)      SET_LONG_VALUE[Safe_In_Fah] -= SPEED_SW[INC];  if(SET_LONG_VALUE[Safe_In_Fah] < 32) SET_LONG_VALUE[Safe_In_Fah] = 32;   
     504:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <SELECTION_PARAMETER>
     508:	90 91 0a 28 	lds	r25, 0x280A	; 0x80280a <SELECTION_PARAMETER+0x1>
     50c:	82 30       	cpi	r24, 0x02	; 2
     50e:	91 05       	cpc	r25, r1
     510:	71 f4       	brne	.+28     	; 0x52e <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]+0x34>
     512:	20 91 4f 29 	lds	r18, 0x294F	; 0x80294f <DEGREE_VALUE_SET>
     516:	22 23       	and	r18, r18
     518:	51 f0       	breq	.+20     	; 0x52e <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]+0x34>
     51a:	20 91 45 29 	lds	r18, 0x2945	; 0x802945 <SET_LONG_VALUE+0x28>
     51e:	30 91 46 29 	lds	r19, 0x2946	; 0x802946 <SET_LONG_VALUE+0x29>
     522:	21 50       	subi	r18, 0x01	; 1
     524:	31 09       	sbc	r19, r1
     526:	20 93 45 29 	sts	0x2945, r18	; 0x802945 <SET_LONG_VALUE+0x28>
     52a:	30 93 46 29 	sts	0x2946, r19	; 0x802946 <SET_LONG_VALUE+0x29>
     52e:	20 91 45 29 	lds	r18, 0x2945	; 0x802945 <SET_LONG_VALUE+0x28>
     532:	30 91 46 29 	lds	r19, 0x2946	; 0x802946 <SET_LONG_VALUE+0x29>
     536:	20 32       	cpi	r18, 0x20	; 32
     538:	31 05       	cpc	r19, r1
     53a:	a4 f4       	brge	.+40     	; 0x564 <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]+0x6a>
     53c:	20 e2       	ldi	r18, 0x20	; 32
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	20 93 45 29 	sts	0x2945, r18	; 0x802945 <SET_LONG_VALUE+0x28>
     544:	30 93 46 29 	sts	0x2946, r19	; 0x802946 <SET_LONG_VALUE+0x29>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:104
      else if(SELECTION_PARAMETER == Cal1_Point && DEGREE_VALUE_SET)  SET_LONG_VALUE[Cal1_In_Fah] -= SPEED_SW[INC];  if(SET_LONG_VALUE[Cal1_In_Fah] < 32) SET_LONG_VALUE[Cal1_In_Fah] = 32;   
     548:	20 91 47 29 	lds	r18, 0x2947	; 0x802947 <SET_LONG_VALUE+0x2a>
     54c:	30 91 48 29 	lds	r19, 0x2948	; 0x802948 <SET_LONG_VALUE+0x2b>
     550:	20 32       	cpi	r18, 0x20	; 32
     552:	31 05       	cpc	r19, r1
     554:	cc f4       	brge	.+50     	; 0x588 <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]+0x8e>
     556:	80 e2       	ldi	r24, 0x20	; 32
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	80 93 47 29 	sts	0x2947, r24	; 0x802947 <SET_LONG_VALUE+0x2a>
     55e:	90 93 48 29 	sts	0x2948, r25	; 0x802948 <SET_LONG_VALUE+0x2b>
     562:	08 95       	ret
     564:	88 30       	cpi	r24, 0x08	; 8
     566:	91 05       	cpc	r25, r1
     568:	79 f7       	brne	.-34     	; 0x548 <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]+0x4e>
     56a:	20 91 4f 29 	lds	r18, 0x294F	; 0x80294f <DEGREE_VALUE_SET>
     56e:	22 23       	and	r18, r18
     570:	59 f3       	breq	.-42     	; 0x548 <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]+0x4e>
     572:	20 91 47 29 	lds	r18, 0x2947	; 0x802947 <SET_LONG_VALUE+0x2a>
     576:	30 91 48 29 	lds	r19, 0x2948	; 0x802948 <SET_LONG_VALUE+0x2b>
     57a:	21 50       	subi	r18, 0x01	; 1
     57c:	31 09       	sbc	r19, r1
     57e:	20 93 47 29 	sts	0x2947, r18	; 0x802947 <SET_LONG_VALUE+0x2a>
     582:	30 93 48 29 	sts	0x2948, r19	; 0x802948 <SET_LONG_VALUE+0x2b>
     586:	e0 cf       	rjmp	.-64     	; 0x548 <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]+0x4e>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:107
      else
      {
        SET_LONG_VALUE[SELECTION_PARAMETER] -= SPEED_SW[INC]; 
     588:	88 0f       	add	r24, r24
     58a:	99 1f       	adc	r25, r25
     58c:	fc 01       	movw	r30, r24
     58e:	e3 5e       	subi	r30, 0xE3	; 227
     590:	f6 4d       	sbci	r31, 0xD6	; 214
     592:	20 81       	ld	r18, Z
     594:	31 81       	ldd	r19, Z+1	; 0x01
     596:	21 50       	subi	r18, 0x01	; 1
     598:	31 09       	sbc	r19, r1
     59a:	20 83       	st	Z, r18
     59c:	31 83       	std	Z+1, r19	; 0x01
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:108
        if(SET_LONG_VALUE[SELECTION_PARAMETER] < 0)     SET_LONG_VALUE[SELECTION_PARAMETER] = Menu_Limit_Lower_Side[SELECTION_PARAMETER];
     59e:	37 ff       	sbrs	r19, 7
     5a0:	8c c0       	rjmp	.+280    	; 0x6ba <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]+0x1c0>
     5a2:	86 5c       	subi	r24, 0xC6	; 198
     5a4:	99 44       	sbci	r25, 0x49	; 73
     5a6:	dc 01       	movw	r26, r24
     5a8:	8d 91       	ld	r24, X+
     5aa:	9c 91       	ld	r25, X
     5ac:	80 83       	st	Z, r24
     5ae:	91 83       	std	Z+1, r25	; 0x01
     5b0:	08 95       	ret
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:113
      }
  }
  else
  {
    if( ENTER_BUT == 1 )   
     5b2:	80 91 1c 29 	lds	r24, 0x291C	; 0x80291c <ENTER_BUT>
     5b6:	81 30       	cpi	r24, 0x01	; 1
     5b8:	a1 f4       	brne	.+40     	; 0x5e2 <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]+0xe8>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:115
    {
       SET_VALUE[ENTER_BUT] -= SPEED_SW[INC]; if(SET_VALUE[ENTER_BUT] < 0) SET_VALUE[ENTER_BUT] = SAFE_VALUE_SET_DEG; 
     5ba:	80 91 12 29 	lds	r24, 0x2912	; 0x802912 <SET_VALUE+0x2>
     5be:	90 91 13 29 	lds	r25, 0x2913	; 0x802913 <SET_VALUE+0x3>
     5c2:	01 97       	sbiw	r24, 0x01	; 1
     5c4:	80 93 12 29 	sts	0x2912, r24	; 0x802912 <SET_VALUE+0x2>
     5c8:	90 93 13 29 	sts	0x2913, r25	; 0x802913 <SET_VALUE+0x3>
     5cc:	97 ff       	sbrs	r25, 7
     5ce:	75 c0       	rjmp	.+234    	; 0x6ba <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]+0x1c0>
     5d0:	80 91 0e 29 	lds	r24, 0x290E	; 0x80290e <SAFE_VALUE_SET_DEG>
     5d4:	90 91 0f 29 	lds	r25, 0x290F	; 0x80290f <SAFE_VALUE_SET_DEG+0x1>
     5d8:	80 93 12 29 	sts	0x2912, r24	; 0x802912 <SET_VALUE+0x2>
     5dc:	90 93 13 29 	sts	0x2913, r25	; 0x802913 <SET_VALUE+0x3>
     5e0:	08 95       	ret
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:117
    }
    else if( ENTER_BUT == 2 )   
     5e2:	82 30       	cpi	r24, 0x02	; 2
     5e4:	99 f5       	brne	.+102    	; 0x64c <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]+0x152>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:119
    {
      if(!DEGREE_VALUE_SET) SET_VALUE[ENTER_BUT] -= SPEED_SW[INC]; if(SET_VALUE[ENTER_BUT] < 0) SET_VALUE[ENTER_BUT] = 9; 
     5e6:	80 91 4f 29 	lds	r24, 0x294F	; 0x80294f <DEGREE_VALUE_SET>
     5ea:	81 11       	cpse	r24, r1
     5ec:	09 c0       	rjmp	.+18     	; 0x600 <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]+0x106>
     5ee:	80 91 14 29 	lds	r24, 0x2914	; 0x802914 <SET_VALUE+0x4>
     5f2:	90 91 15 29 	lds	r25, 0x2915	; 0x802915 <SET_VALUE+0x5>
     5f6:	01 97       	sbiw	r24, 0x01	; 1
     5f8:	80 93 14 29 	sts	0x2914, r24	; 0x802914 <SET_VALUE+0x4>
     5fc:	90 93 15 29 	sts	0x2915, r25	; 0x802915 <SET_VALUE+0x5>
     600:	80 91 14 29 	lds	r24, 0x2914	; 0x802914 <SET_VALUE+0x4>
     604:	90 91 15 29 	lds	r25, 0x2915	; 0x802915 <SET_VALUE+0x5>
     608:	97 ff       	sbrs	r25, 7
     60a:	16 c0       	rjmp	.+44     	; 0x638 <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]+0x13e>
     60c:	89 e0       	ldi	r24, 0x09	; 9
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	80 93 14 29 	sts	0x2914, r24	; 0x802914 <SET_VALUE+0x4>
     614:	90 93 15 29 	sts	0x2915, r25	; 0x802915 <SET_VALUE+0x5>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:120
      else                  SET_VALUE[22] -= SPEED_SW[INC]; if(SET_VALUE[22] < 32) SET_VALUE[22] = SAFE_VALUE_SET_FAH; 
     618:	80 91 3c 29 	lds	r24, 0x293C	; 0x80293c <SET_LONG_VALUE+0x1f>
     61c:	90 91 3d 29 	lds	r25, 0x293D	; 0x80293d <SET_LONG_VALUE+0x20>
     620:	80 97       	sbiw	r24, 0x20	; 32
     622:	0c f0       	brlt	.+2      	; 0x626 <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]+0x12c>
     624:	4a c0       	rjmp	.+148    	; 0x6ba <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]+0x1c0>
     626:	80 91 0c 29 	lds	r24, 0x290C	; 0x80290c <SAFE_VALUE_SET_FAH>
     62a:	90 91 0d 29 	lds	r25, 0x290D	; 0x80290d <SAFE_VALUE_SET_FAH+0x1>
     62e:	80 93 3c 29 	sts	0x293C, r24	; 0x80293c <SET_LONG_VALUE+0x1f>
     632:	90 93 3d 29 	sts	0x293D, r25	; 0x80293d <SET_LONG_VALUE+0x20>
     636:	08 95       	ret
     638:	80 91 3c 29 	lds	r24, 0x293C	; 0x80293c <SET_LONG_VALUE+0x1f>
     63c:	90 91 3d 29 	lds	r25, 0x293D	; 0x80293d <SET_LONG_VALUE+0x20>
     640:	01 97       	sbiw	r24, 0x01	; 1
     642:	80 93 3c 29 	sts	0x293C, r24	; 0x80293c <SET_LONG_VALUE+0x1f>
     646:	90 93 3d 29 	sts	0x293D, r25	; 0x80293d <SET_LONG_VALUE+0x20>
     64a:	e6 cf       	rjmp	.-52     	; 0x618 <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]+0x11e>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:122
    }
    else if( ENTER_BUT == 3 )   
     64c:	83 30       	cpi	r24, 0x03	; 3
     64e:	79 f4       	brne	.+30     	; 0x66e <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]+0x174>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:124
    {
      SET_VALUE[ENTER_BUT] -= SPEED_SW[INC]; if(SET_VALUE[ENTER_BUT] < 0) SET_VALUE[ENTER_BUT] = 99; 
     650:	80 91 16 29 	lds	r24, 0x2916	; 0x802916 <SET_VALUE+0x6>
     654:	90 91 17 29 	lds	r25, 0x2917	; 0x802917 <SET_VALUE+0x7>
     658:	01 97       	sbiw	r24, 0x01	; 1
     65a:	97 fd       	sbrc	r25, 7
     65c:	05 c0       	rjmp	.+10     	; 0x668 <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]+0x16e>
     65e:	80 93 16 29 	sts	0x2916, r24	; 0x802916 <SET_VALUE+0x6>
     662:	90 93 17 29 	sts	0x2917, r25	; 0x802917 <SET_VALUE+0x7>
     666:	08 95       	ret
     668:	83 e6       	ldi	r24, 0x63	; 99
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	f8 cf       	rjmp	.-16     	; 0x65e <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]+0x164>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:126
    }
    else if( ENTER_BUT == 4 )   
     66e:	84 30       	cpi	r24, 0x04	; 4
     670:	79 f4       	brne	.+30     	; 0x690 <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]+0x196>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:128
    {
      SET_VALUE[ENTER_BUT] -= SPEED_SW[INC]; if(SET_VALUE[ENTER_BUT] < 0) SET_VALUE[ENTER_BUT] = 59; 
     672:	80 91 18 29 	lds	r24, 0x2918	; 0x802918 <SET_VALUE+0x8>
     676:	90 91 19 29 	lds	r25, 0x2919	; 0x802919 <SET_VALUE+0x9>
     67a:	01 97       	sbiw	r24, 0x01	; 1
     67c:	97 fd       	sbrc	r25, 7
     67e:	05 c0       	rjmp	.+10     	; 0x68a <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]+0x190>
     680:	80 93 18 29 	sts	0x2918, r24	; 0x802918 <SET_VALUE+0x8>
     684:	90 93 19 29 	sts	0x2919, r25	; 0x802919 <SET_VALUE+0x9>
     688:	08 95       	ret
     68a:	8b e3       	ldi	r24, 0x3B	; 59
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	f8 cf       	rjmp	.-16     	; 0x680 <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]+0x186>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:130
    }
    else if( ENTER_BUT == 5 && PUMP_FLAG && select_product_type)   
     690:	85 30       	cpi	r24, 0x05	; 5
     692:	99 f4       	brne	.+38     	; 0x6ba <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]+0x1c0>
     694:	80 91 0b 29 	lds	r24, 0x290B	; 0x80290b <PUMP_FLAG>
     698:	88 23       	and	r24, r24
     69a:	79 f0       	breq	.+30     	; 0x6ba <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]+0x1c0>
     69c:	80 91 0a 29 	lds	r24, 0x290A	; 0x80290a <select_product_type>
     6a0:	88 23       	and	r24, r24
     6a2:	59 f0       	breq	.+22     	; 0x6ba <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]+0x1c0>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:132
    {
      SET_VALUE[ENTER_BUT] -= SPEED_SW[INC]; if(SET_VALUE[ENTER_BUT] < 0) SET_VALUE[ENTER_BUT] = 1; 
     6a4:	80 91 1a 29 	lds	r24, 0x291A	; 0x80291a <SET_VALUE+0xa>
     6a8:	90 91 1b 29 	lds	r25, 0x291B	; 0x80291b <SET_VALUE+0xb>
     6ac:	01 97       	sbiw	r24, 0x01	; 1
     6ae:	97 fd       	sbrc	r25, 7
     6b0:	05 c0       	rjmp	.+10     	; 0x6bc <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]+0x1c2>
     6b2:	80 93 1a 29 	sts	0x291A, r24	; 0x80291a <SET_VALUE+0xa>
     6b6:	90 93 1b 29 	sts	0x291B, r25	; 0x80291b <SET_VALUE+0xb>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:135
    }
  }
}
     6ba:	08 95       	ret
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Butn.cpp:132
    {
      SET_VALUE[ENTER_BUT] -= SPEED_SW[INC]; if(SET_VALUE[ENTER_BUT] < 0) SET_VALUE[ENTER_BUT] = 59; 
    }
    else if( ENTER_BUT == 5 && PUMP_FLAG && select_product_type)   
    {
      SET_VALUE[ENTER_BUT] -= SPEED_SW[INC]; if(SET_VALUE[ENTER_BUT] < 0) SET_VALUE[ENTER_BUT] = 1; 
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	f8 cf       	rjmp	.-16     	; 0x6b2 <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]+0x1b8>

000006c2 <Eclass::BREAK_NUMBER2(long) [clone .constprop.47]>:
BREAK_NUMBER2():
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:223
    digits1[2] = third_digit;
    fourth_digit = second_left - (third_digit * 10);
    digits1[3] = fourth_digit;
}

void Eclass:: BREAK_NUMBER2(long num2) 
     6c2:	cf 92       	push	r12
     6c4:	df 92       	push	r13
     6c6:	ef 92       	push	r14
     6c8:	ff 92       	push	r15
     6ca:	6b 01       	movw	r12, r22
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:225
{ 
    first_digit2 = num2 / 1000;
     6cc:	28 ee       	ldi	r18, 0xE8	; 232
     6ce:	33 e0       	ldi	r19, 0x03	; 3
     6d0:	40 e0       	ldi	r20, 0x00	; 0
     6d2:	50 e0       	ldi	r21, 0x00	; 0
     6d4:	0e 94 50 3a 	call	0x74a0	; 0x74a0 <__divmodsi4>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:226
    digits2[0] = first_digit2;
     6d8:	ee ef       	ldi	r30, 0xFE	; 254
     6da:	f8 e2       	ldi	r31, 0x28	; 40
     6dc:	20 83       	st	Z, r18
     6de:	31 83       	std	Z+1, r19	; 0x01
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:227
    int first_left2 = num2 - (first_digit2 * 1000);
     6e0:	68 ee       	ldi	r22, 0xE8	; 232
     6e2:	73 e0       	ldi	r23, 0x03	; 3
     6e4:	62 9f       	mul	r22, r18
     6e6:	c0 01       	movw	r24, r0
     6e8:	63 9f       	mul	r22, r19
     6ea:	90 0d       	add	r25, r0
     6ec:	72 9f       	mul	r23, r18
     6ee:	90 0d       	add	r25, r0
     6f0:	11 24       	eor	r1, r1
     6f2:	c8 1a       	sub	r12, r24
     6f4:	d9 0a       	sbc	r13, r25
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:228
    second_digit2 = first_left2 / 100;
     6f6:	c6 01       	movw	r24, r12
     6f8:	64 e6       	ldi	r22, 0x64	; 100
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	0e 94 1b 3a 	call	0x7436	; 0x7436 <__divmodhi4>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:229
    digits2[1] = second_digit2;
     700:	62 83       	std	Z+2, r22	; 0x02
     702:	73 83       	std	Z+3, r23	; 0x03
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:230
    int second_left2 = first_left2 - (second_digit2 * 100);
     704:	2c e9       	ldi	r18, 0x9C	; 156
     706:	26 03       	mulsu	r18, r22
     708:	c0 01       	movw	r24, r0
     70a:	27 9f       	mul	r18, r23
     70c:	90 0d       	add	r25, r0
     70e:	11 24       	eor	r1, r1
     710:	c8 0e       	add	r12, r24
     712:	d9 1e       	adc	r13, r25
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:231
    third_digit2 = second_left2 / 10;
     714:	c6 01       	movw	r24, r12
     716:	6a e0       	ldi	r22, 0x0A	; 10
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	0e 94 1b 3a 	call	0x7436	; 0x7436 <__divmodhi4>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:232
    digits2[2] = third_digit2;
     71e:	64 83       	std	Z+4, r22	; 0x04
     720:	75 83       	std	Z+5, r23	; 0x05
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:233
    fourth_digit2 = second_left2 - (third_digit2 * 10);
     722:	26 ef       	ldi	r18, 0xF6	; 246
     724:	26 03       	mulsu	r18, r22
     726:	c0 01       	movw	r24, r0
     728:	27 9f       	mul	r18, r23
     72a:	90 0d       	add	r25, r0
     72c:	11 24       	eor	r1, r1
     72e:	c8 0e       	add	r12, r24
     730:	d9 1e       	adc	r13, r25
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:234
    digits2[3] = fourth_digit2;
     732:	c6 82       	std	Z+6, r12	; 0x06
     734:	d7 82       	std	Z+7, r13	; 0x07
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:235
}
     736:	ff 90       	pop	r15
     738:	ef 90       	pop	r14
     73a:	df 90       	pop	r13
     73c:	cf 90       	pop	r12
     73e:	08 95       	ret

00000740 <Eclass::BREAK_NUMBER1(long) [clone .constprop.46]>:
BREAK_NUMBER1():
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:209
    digitalWrite(CA_3, HIGH);
    digitalWrite(CA_2, HIGH);
    digitalWrite(CA_1, HIGH);
}

void Eclass:: BREAK_NUMBER1(long num) 
     740:	cf 92       	push	r12
     742:	df 92       	push	r13
     744:	ef 92       	push	r14
     746:	ff 92       	push	r15
     748:	6b 01       	movw	r12, r22
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:211
{ 
    first_digit = num / 1000;
     74a:	28 ee       	ldi	r18, 0xE8	; 232
     74c:	33 e0       	ldi	r19, 0x03	; 3
     74e:	40 e0       	ldi	r20, 0x00	; 0
     750:	50 e0       	ldi	r21, 0x00	; 0
     752:	0e 94 50 3a 	call	0x74a0	; 0x74a0 <__divmodsi4>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:212
    digits1[0] = first_digit;
     756:	e6 ef       	ldi	r30, 0xF6	; 246
     758:	f8 e2       	ldi	r31, 0x28	; 40
     75a:	20 83       	st	Z, r18
     75c:	31 83       	std	Z+1, r19	; 0x01
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:213
    int first_left = num - (first_digit * 1000);
     75e:	68 ee       	ldi	r22, 0xE8	; 232
     760:	73 e0       	ldi	r23, 0x03	; 3
     762:	62 9f       	mul	r22, r18
     764:	c0 01       	movw	r24, r0
     766:	63 9f       	mul	r22, r19
     768:	90 0d       	add	r25, r0
     76a:	72 9f       	mul	r23, r18
     76c:	90 0d       	add	r25, r0
     76e:	11 24       	eor	r1, r1
     770:	c8 1a       	sub	r12, r24
     772:	d9 0a       	sbc	r13, r25
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:214
    second_digit = first_left / 100;
     774:	c6 01       	movw	r24, r12
     776:	64 e6       	ldi	r22, 0x64	; 100
     778:	70 e0       	ldi	r23, 0x00	; 0
     77a:	0e 94 1b 3a 	call	0x7436	; 0x7436 <__divmodhi4>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:215
    digits1[1] = second_digit;
     77e:	62 83       	std	Z+2, r22	; 0x02
     780:	73 83       	std	Z+3, r23	; 0x03
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:216
    int second_left = first_left - (second_digit * 100);
     782:	2c e9       	ldi	r18, 0x9C	; 156
     784:	26 03       	mulsu	r18, r22
     786:	c0 01       	movw	r24, r0
     788:	27 9f       	mul	r18, r23
     78a:	90 0d       	add	r25, r0
     78c:	11 24       	eor	r1, r1
     78e:	c8 0e       	add	r12, r24
     790:	d9 1e       	adc	r13, r25
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:217
    third_digit = second_left / 10;
     792:	c6 01       	movw	r24, r12
     794:	6a e0       	ldi	r22, 0x0A	; 10
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	0e 94 1b 3a 	call	0x7436	; 0x7436 <__divmodhi4>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:218
    digits1[2] = third_digit;
     79c:	64 83       	std	Z+4, r22	; 0x04
     79e:	75 83       	std	Z+5, r23	; 0x05
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:219
    fourth_digit = second_left - (third_digit * 10);
     7a0:	26 ef       	ldi	r18, 0xF6	; 246
     7a2:	26 03       	mulsu	r18, r22
     7a4:	c0 01       	movw	r24, r0
     7a6:	27 9f       	mul	r18, r23
     7a8:	90 0d       	add	r25, r0
     7aa:	11 24       	eor	r1, r1
     7ac:	c8 0e       	add	r12, r24
     7ae:	d9 1e       	adc	r13, r25
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:220
    digits1[3] = fourth_digit;
     7b0:	c6 82       	std	Z+6, r12	; 0x06
     7b2:	d7 82       	std	Z+7, r13	; 0x07
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:221
}
     7b4:	ff 90       	pop	r15
     7b6:	ef 90       	pop	r14
     7b8:	df 90       	pop	r13
     7ba:	cf 90       	pop	r12
     7bc:	08 95       	ret

000007be <PID::SetTunings(double, double, double) [clone .constprop.39]>:
SetTunings():
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:127
}

/* SetTunings(...)*************************************************************
 * Set Tunings using the last-rembered POn setting
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd){
     7be:	4f 92       	push	r4
     7c0:	5f 92       	push	r5
     7c2:	6f 92       	push	r6
     7c4:	7f 92       	push	r7
     7c6:	8f 92       	push	r8
     7c8:	9f 92       	push	r9
     7ca:	af 92       	push	r10
     7cc:	bf 92       	push	r11
     7ce:	cf 92       	push	r12
     7d0:	df 92       	push	r13
     7d2:	ef 92       	push	r14
     7d4:	ff 92       	push	r15
     7d6:	6b 01       	movw	r12, r22
     7d8:	7c 01       	movw	r14, r24
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:104
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	a9 01       	movw	r20, r18
     7e0:	0e 94 65 38 	call	0x70ca	; 0x70ca <__cmpsf2>
     7e4:	87 fd       	sbrc	r24, 7
     7e6:	9a c0       	rjmp	.+308    	; 0x91c <PID::SetTunings(double, double, double) [clone .constprop.39]+0x15e>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:107

   pOn = POn;
   pOnE = POn == P_ON_E;
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	20 91 14 2a 	lds	r18, 0x2A14	; 0x802a14 <myPID+0x1a>
     7ee:	30 91 15 2a 	lds	r19, 0x2A15	; 0x802a15 <myPID+0x1b>
     7f2:	21 30       	cpi	r18, 0x01	; 1
     7f4:	31 05       	cpc	r19, r1
     7f6:	09 f0       	breq	.+2      	; 0x7fa <PID::SetTunings(double, double, double) [clone .constprop.39]+0x3c>
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	80 93 35 2a 	sts	0x2A35, r24	; 0x802a35 <myPID+0x3b>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
     7fe:	c0 92 fa 29 	sts	0x29FA, r12	; 0x8029fa <myPID>
     802:	d0 92 fb 29 	sts	0x29FB, r13	; 0x8029fb <myPID+0x1>
     806:	e0 92 fc 29 	sts	0x29FC, r14	; 0x8029fc <myPID+0x2>
     80a:	f0 92 fd 29 	sts	0x29FD, r15	; 0x8029fd <myPID+0x3>
     80e:	8a e0       	ldi	r24, 0x0A	; 10
     810:	97 ed       	ldi	r25, 0xD7	; 215
     812:	a3 e2       	ldi	r26, 0x23	; 35
     814:	bc e3       	ldi	r27, 0x3C	; 60
     816:	80 93 fe 29 	sts	0x29FE, r24	; 0x8029fe <myPID+0x4>
     81a:	90 93 ff 29 	sts	0x29FF, r25	; 0x8029ff <myPID+0x5>
     81e:	a0 93 00 2a 	sts	0x2A00, r26	; 0x802a00 <myPID+0x6>
     822:	b0 93 01 2a 	sts	0x2A01, r27	; 0x802a01 <myPID+0x7>
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	af e2       	ldi	r26, 0x2F	; 47
     82c:	b4 e4       	ldi	r27, 0x44	; 68
     82e:	80 93 02 2a 	sts	0x2A02, r24	; 0x802a02 <myPID+0x8>
     832:	90 93 03 2a 	sts	0x2A03, r25	; 0x802a03 <myPID+0x9>
     836:	a0 93 04 2a 	sts	0x2A04, r26	; 0x802a04 <myPID+0xa>
     83a:	b0 93 05 2a 	sts	0x2A05, r27	; 0x802a05 <myPID+0xb>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:111

   double SampleTimeInSec = ((double)SampleTime)/1000;
     83e:	60 91 28 2a 	lds	r22, 0x2A28	; 0x802a28 <myPID+0x2e>
     842:	70 91 29 2a 	lds	r23, 0x2A29	; 0x802a29 <myPID+0x2f>
     846:	80 91 2a 2a 	lds	r24, 0x2A2A	; 0x802a2a <myPID+0x30>
     84a:	90 91 2b 2a 	lds	r25, 0x2A2B	; 0x802a2b <myPID+0x31>
     84e:	0e 94 02 39 	call	0x7204	; 0x7204 <__floatunsisf>
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	4a e7       	ldi	r20, 0x7A	; 122
     858:	54 e4       	ldi	r21, 0x44	; 68
     85a:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__divsf3>
     85e:	4b 01       	movw	r8, r22
     860:	5c 01       	movw	r10, r24
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:112
   kp = Kp;
     862:	c0 92 06 2a 	sts	0x2A06, r12	; 0x802a06 <myPID+0xc>
     866:	d0 92 07 2a 	sts	0x2A07, r13	; 0x802a07 <myPID+0xd>
     86a:	e0 92 08 2a 	sts	0x2A08, r14	; 0x802a08 <myPID+0xe>
     86e:	f0 92 09 2a 	sts	0x2A09, r15	; 0x802a09 <myPID+0xf>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
     872:	2a e0       	ldi	r18, 0x0A	; 10
     874:	37 ed       	ldi	r19, 0xD7	; 215
     876:	43 e2       	ldi	r20, 0x23	; 35
     878:	5c e3       	ldi	r21, 0x3C	; 60
     87a:	0e 94 b8 39 	call	0x7370	; 0x7370 <__mulsf3>
     87e:	2b 01       	movw	r4, r22
     880:	3c 01       	movw	r6, r24
     882:	40 92 0a 2a 	sts	0x2A0A, r4	; 0x802a0a <myPID+0x10>
     886:	50 92 0b 2a 	sts	0x2A0B, r5	; 0x802a0b <myPID+0x11>
     88a:	60 92 0c 2a 	sts	0x2A0C, r6	; 0x802a0c <myPID+0x12>
     88e:	70 92 0d 2a 	sts	0x2A0D, r7	; 0x802a0d <myPID+0x13>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
     892:	a5 01       	movw	r20, r10
     894:	94 01       	movw	r18, r8
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	70 e0       	ldi	r23, 0x00	; 0
     89a:	8f e2       	ldi	r24, 0x2F	; 47
     89c:	94 e4       	ldi	r25, 0x44	; 68
     89e:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__divsf3>
     8a2:	4b 01       	movw	r8, r22
     8a4:	5c 01       	movw	r10, r24
     8a6:	80 92 0e 2a 	sts	0x2A0E, r8	; 0x802a0e <myPID+0x14>
     8aa:	90 92 0f 2a 	sts	0x2A0F, r9	; 0x802a0f <myPID+0x15>
     8ae:	a0 92 10 2a 	sts	0x2A10, r10	; 0x802a10 <myPID+0x16>
     8b2:	b0 92 11 2a 	sts	0x2A11, r11	; 0x802a11 <myPID+0x17>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:116

  if(controllerDirection ==REVERSE)
     8b6:	80 91 12 2a 	lds	r24, 0x2A12	; 0x802a12 <myPID+0x18>
     8ba:	90 91 13 2a 	lds	r25, 0x2A13	; 0x802a13 <myPID+0x19>
     8be:	01 97       	sbiw	r24, 0x01	; 1
     8c0:	69 f5       	brne	.+90     	; 0x91c <PID::SetTunings(double, double, double) [clone .constprop.39]+0x15e>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:118
   {
      kp = (0 - kp);
     8c2:	a7 01       	movw	r20, r14
     8c4:	96 01       	movw	r18, r12
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	70 e0       	ldi	r23, 0x00	; 0
     8ca:	cb 01       	movw	r24, r22
     8cc:	0e 94 00 38 	call	0x7000	; 0x7000 <__subsf3>
     8d0:	60 93 06 2a 	sts	0x2A06, r22	; 0x802a06 <myPID+0xc>
     8d4:	70 93 07 2a 	sts	0x2A07, r23	; 0x802a07 <myPID+0xd>
     8d8:	80 93 08 2a 	sts	0x2A08, r24	; 0x802a08 <myPID+0xe>
     8dc:	90 93 09 2a 	sts	0x2A09, r25	; 0x802a09 <myPID+0xf>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:119
      ki = (0 - ki);
     8e0:	a3 01       	movw	r20, r6
     8e2:	92 01       	movw	r18, r4
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	cb 01       	movw	r24, r22
     8ea:	0e 94 00 38 	call	0x7000	; 0x7000 <__subsf3>
     8ee:	60 93 0a 2a 	sts	0x2A0A, r22	; 0x802a0a <myPID+0x10>
     8f2:	70 93 0b 2a 	sts	0x2A0B, r23	; 0x802a0b <myPID+0x11>
     8f6:	80 93 0c 2a 	sts	0x2A0C, r24	; 0x802a0c <myPID+0x12>
     8fa:	90 93 0d 2a 	sts	0x2A0D, r25	; 0x802a0d <myPID+0x13>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:120
      kd = (0 - kd);
     8fe:	a5 01       	movw	r20, r10
     900:	94 01       	movw	r18, r8
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	70 e0       	ldi	r23, 0x00	; 0
     906:	cb 01       	movw	r24, r22
     908:	0e 94 00 38 	call	0x7000	; 0x7000 <__subsf3>
     90c:	60 93 0e 2a 	sts	0x2A0E, r22	; 0x802a0e <myPID+0x14>
     910:	70 93 0f 2a 	sts	0x2A0F, r23	; 0x802a0f <myPID+0x15>
     914:	80 93 10 2a 	sts	0x2A10, r24	; 0x802a10 <myPID+0x16>
     918:	90 93 11 2a 	sts	0x2A11, r25	; 0x802a11 <myPID+0x17>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:129
/* SetTunings(...)*************************************************************
 * Set Tunings using the last-rembered POn setting
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd){
    SetTunings(Kp, Ki, Kd, pOn); 
}
     91c:	ff 90       	pop	r15
     91e:	ef 90       	pop	r14
     920:	df 90       	pop	r13
     922:	cf 90       	pop	r12
     924:	bf 90       	pop	r11
     926:	af 90       	pop	r10
     928:	9f 90       	pop	r9
     92a:	8f 90       	pop	r8
     92c:	7f 90       	pop	r7
     92e:	6f 90       	pop	r6
     930:	5f 90       	pop	r5
     932:	4f 90       	pop	r4
     934:	08 95       	ret

00000936 <Mclass::RTD_TEMP_CONV() [clone .constprop.36]>:
RTD_TEMP_CONV():
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:58
      sample = 0;   AvgVout = 0;   
    }
      avrage_val = 50;
}

void Mclass :: RTD_TEMP_CONV()    //-------------------------PT100 temp read
     936:	4f 92       	push	r4
     938:	5f 92       	push	r5
     93a:	6f 92       	push	r6
     93c:	7f 92       	push	r7
     93e:	8f 92       	push	r8
     940:	9f 92       	push	r9
     942:	af 92       	push	r10
     944:	bf 92       	push	r11
     946:	cf 92       	push	r12
     948:	df 92       	push	r13
     94a:	ef 92       	push	r14
     94c:	ff 92       	push	r15
     94e:	20 e0       	ldi	r18, 0x00	; 0
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	40 e2       	ldi	r20, 0x20	; 32
     954:	51 e4       	ldi	r21, 0x41	; 65
     956:	60 91 06 29 	lds	r22, 0x2906	; 0x802906 <ERROR_CAL1>
     95a:	70 91 07 29 	lds	r23, 0x2907	; 0x802907 <ERROR_CAL1+0x1>
     95e:	80 91 08 29 	lds	r24, 0x2908	; 0x802908 <ERROR_CAL1+0x2>
     962:	90 91 09 29 	lds	r25, 0x2909	; 0x802909 <ERROR_CAL1+0x3>
     966:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__divsf3>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:60
{
    if(SIGN) {ERROR_CAL =(ERROR_CAL1/10) * -1;}
     96a:	20 91 e8 28 	lds	r18, 0x28E8	; 0x8028e8 <SIGN>
     96e:	21 11       	cpse	r18, r1
     970:	90 58       	subi	r25, 0x80	; 128
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:61
    else     {ERROR_CAL =(ERROR_CAL1/10) ;}
     972:	60 93 e4 28 	sts	0x28E4, r22	; 0x8028e4 <ERROR_CAL>
     976:	70 93 e5 28 	sts	0x28E5, r23	; 0x8028e5 <ERROR_CAL+0x1>
     97a:	80 93 e6 28 	sts	0x28E6, r24	; 0x8028e6 <ERROR_CAL+0x2>
     97e:	90 93 e7 28 	sts	0x28E7, r25	; 0x8028e7 <ERROR_CAL+0x3>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:63
    
    if(ERROR_SET_IN_DEG_FLAG)           TEMP_DEG_RAW2  = TEMP_DEG_RAW   + ERROR_CAL;
     982:	f0 90 e3 28 	lds	r15, 0x28E3	; 0x8028e3 <ERROR_SET_IN_DEG_FLAG>
     986:	ff 20       	and	r15, r15
     988:	09 f4       	brne	.+2      	; 0x98c <Mclass::RTD_TEMP_CONV() [clone .constprop.36]+0x56>
     98a:	55 c0       	rjmp	.+170    	; 0xa36 <Mclass::RTD_TEMP_CONV() [clone .constprop.36]+0x100>
     98c:	20 91 e4 28 	lds	r18, 0x28E4	; 0x8028e4 <ERROR_CAL>
     990:	30 91 e5 28 	lds	r19, 0x28E5	; 0x8028e5 <ERROR_CAL+0x1>
     994:	40 91 e6 28 	lds	r20, 0x28E6	; 0x8028e6 <ERROR_CAL+0x2>
     998:	50 91 e7 28 	lds	r21, 0x28E7	; 0x8028e7 <ERROR_CAL+0x3>
     99c:	60 91 ee 28 	lds	r22, 0x28EE	; 0x8028ee <TEMP_DEG_RAW>
     9a0:	70 91 ef 28 	lds	r23, 0x28EF	; 0x8028ef <TEMP_DEG_RAW+0x1>
     9a4:	80 91 f0 28 	lds	r24, 0x28F0	; 0x8028f0 <TEMP_DEG_RAW+0x2>
     9a8:	90 91 f1 28 	lds	r25, 0x28F1	; 0x8028f1 <TEMP_DEG_RAW+0x3>
     9ac:	0e 94 01 38 	call	0x7002	; 0x7002 <__addsf3>
     9b0:	60 93 df 28 	sts	0x28DF, r22	; 0x8028df <TEMP_DEG_RAW2>
     9b4:	70 93 e0 28 	sts	0x28E0, r23	; 0x8028e0 <TEMP_DEG_RAW2+0x1>
     9b8:	80 93 e1 28 	sts	0x28E1, r24	; 0x8028e1 <TEMP_DEG_RAW2+0x2>
     9bc:	90 93 e2 28 	sts	0x28E2, r25	; 0x8028e2 <TEMP_DEG_RAW2+0x3>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:66
    else  if(ERROR_SET_IN_FAH_FLAG)     TEMP_FAH_RAW2  = TEMP_FAH_RAW   + ERROR_CAL;
    
    if (!CAL_SELECT_VALUE)
     9c0:	80 91 d4 28 	lds	r24, 0x28D4	; 0x8028d4 <CAL_SELECT_VALUE>
     9c4:	90 91 d5 28 	lds	r25, 0x28D5	; 0x8028d5 <CAL_SELECT_VALUE+0x1>
     9c8:	89 2b       	or	r24, r25
     9ca:	09 f0       	breq	.+2      	; 0x9ce <Mclass::RTD_TEMP_CONV() [clone .constprop.36]+0x98>
     9cc:	7e c0       	rjmp	.+252    	; 0xaca <Mclass::RTD_TEMP_CONV() [clone .constprop.36]+0x194>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:68
    {
        if(ERROR_SET_IN_DEG_FLAG)                         
     9ce:	ff 20       	and	r15, r15
     9d0:	09 f4       	brne	.+2      	; 0x9d4 <Mclass::RTD_TEMP_CONV() [clone .constprop.36]+0x9e>
     9d2:	50 c0       	rjmp	.+160    	; 0xa74 <Mclass::RTD_TEMP_CONV() [clone .constprop.36]+0x13e>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:70
        {
          TEMP_DEG  =   TEMP_DEG_RAW2;
     9d4:	60 91 df 28 	lds	r22, 0x28DF	; 0x8028df <TEMP_DEG_RAW2>
     9d8:	70 91 e0 28 	lds	r23, 0x28E0	; 0x8028e0 <TEMP_DEG_RAW2+0x1>
     9dc:	80 91 e1 28 	lds	r24, 0x28E1	; 0x8028e1 <TEMP_DEG_RAW2+0x2>
     9e0:	90 91 e2 28 	lds	r25, 0x28E2	; 0x8028e2 <TEMP_DEG_RAW2+0x3>
     9e4:	60 93 f2 28 	sts	0x28F2, r22	; 0x8028f2 <TEMP_DEG>
     9e8:	70 93 f3 28 	sts	0x28F3, r23	; 0x8028f3 <TEMP_DEG+0x1>
     9ec:	80 93 f4 28 	sts	0x28F4, r24	; 0x8028f4 <TEMP_DEG+0x2>
     9f0:	90 93 f5 28 	sts	0x28F5, r25	; 0x8028f5 <TEMP_DEG+0x3>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:71
          TEMP_FAH  =  (( TEMP_DEG_RAW2 * 1.8 ) + 32);
     9f4:	26 e6       	ldi	r18, 0x66	; 102
     9f6:	36 e6       	ldi	r19, 0x66	; 102
     9f8:	46 ee       	ldi	r20, 0xE6	; 230
     9fa:	5f e3       	ldi	r21, 0x3F	; 63
     9fc:	0e 94 b8 39 	call	0x7370	; 0x7370 <__mulsf3>
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	52 e4       	ldi	r21, 0x42	; 66
     a08:	0e 94 01 38 	call	0x7002	; 0x7002 <__addsf3>
     a0c:	60 93 d0 28 	sts	0x28D0, r22	; 0x8028d0 <TEMP_FAH>
     a10:	70 93 d1 28 	sts	0x28D1, r23	; 0x8028d1 <TEMP_FAH+0x1>
     a14:	80 93 d2 28 	sts	0x28D2, r24	; 0x8028d2 <TEMP_FAH+0x2>
     a18:	90 93 d3 28 	sts	0x28D3, r25	; 0x8028d3 <TEMP_FAH+0x3>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:89
        MASTER_HIGH = (MASTER_HIGH_CONV  / 10.0);
        TEMP_DEG = mapFloat( TEMP_DEG_RAW, CAL2_RAW_LOW_VALUE, CAL2_RAW_HIGH_VALUE, MASTER_LOW, MASTER_HIGH);
        TEMP_FAH  = ( TEMP_DEG * 1.8 ) + 32;
        if(TEMP_DEG>=100) TEMP_DEG = 99.9; 
   }
}
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	df 90       	pop	r13
     a22:	cf 90       	pop	r12
     a24:	bf 90       	pop	r11
     a26:	af 90       	pop	r10
     a28:	9f 90       	pop	r9
     a2a:	8f 90       	pop	r8
     a2c:	7f 90       	pop	r7
     a2e:	6f 90       	pop	r6
     a30:	5f 90       	pop	r5
     a32:	4f 90       	pop	r4
     a34:	08 95       	ret
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:64
{
    if(SIGN) {ERROR_CAL =(ERROR_CAL1/10) * -1;}
    else     {ERROR_CAL =(ERROR_CAL1/10) ;}
    
    if(ERROR_SET_IN_DEG_FLAG)           TEMP_DEG_RAW2  = TEMP_DEG_RAW   + ERROR_CAL;
    else  if(ERROR_SET_IN_FAH_FLAG)     TEMP_FAH_RAW2  = TEMP_FAH_RAW   + ERROR_CAL;
     a36:	80 91 de 28 	lds	r24, 0x28DE	; 0x8028de <ERROR_SET_IN_FAH_FLAG>
     a3a:	88 23       	and	r24, r24
     a3c:	09 f2       	breq	.-126    	; 0x9c0 <Mclass::RTD_TEMP_CONV() [clone .constprop.36]+0x8a>
     a3e:	20 91 e4 28 	lds	r18, 0x28E4	; 0x8028e4 <ERROR_CAL>
     a42:	30 91 e5 28 	lds	r19, 0x28E5	; 0x8028e5 <ERROR_CAL+0x1>
     a46:	40 91 e6 28 	lds	r20, 0x28E6	; 0x8028e6 <ERROR_CAL+0x2>
     a4a:	50 91 e7 28 	lds	r21, 0x28E7	; 0x8028e7 <ERROR_CAL+0x3>
     a4e:	60 91 da 28 	lds	r22, 0x28DA	; 0x8028da <TEMP_FAH_RAW>
     a52:	70 91 db 28 	lds	r23, 0x28DB	; 0x8028db <TEMP_FAH_RAW+0x1>
     a56:	80 91 dc 28 	lds	r24, 0x28DC	; 0x8028dc <TEMP_FAH_RAW+0x2>
     a5a:	90 91 dd 28 	lds	r25, 0x28DD	; 0x8028dd <TEMP_FAH_RAW+0x3>
     a5e:	0e 94 01 38 	call	0x7002	; 0x7002 <__addsf3>
     a62:	60 93 d6 28 	sts	0x28D6, r22	; 0x8028d6 <TEMP_FAH_RAW2>
     a66:	70 93 d7 28 	sts	0x28D7, r23	; 0x8028d7 <TEMP_FAH_RAW2+0x1>
     a6a:	80 93 d8 28 	sts	0x28D8, r24	; 0x8028d8 <TEMP_FAH_RAW2+0x2>
     a6e:	90 93 d9 28 	sts	0x28D9, r25	; 0x8028d9 <TEMP_FAH_RAW2+0x3>
     a72:	a6 cf       	rjmp	.-180    	; 0x9c0 <Mclass::RTD_TEMP_CONV() [clone .constprop.36]+0x8a>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:73
        if(ERROR_SET_IN_DEG_FLAG)                         
        {
          TEMP_DEG  =   TEMP_DEG_RAW2;
          TEMP_FAH  =  (( TEMP_DEG_RAW2 * 1.8 ) + 32);
        }
        else if(ERROR_SET_IN_FAH_FLAG)  
     a74:	80 91 de 28 	lds	r24, 0x28DE	; 0x8028de <ERROR_SET_IN_FAH_FLAG>
     a78:	88 23       	and	r24, r24
     a7a:	81 f2       	breq	.-96     	; 0xa1c <Mclass::RTD_TEMP_CONV() [clone .constprop.36]+0xe6>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:75
        {
          TEMP_DEG  =  (( TEMP_FAH_RAW2 - 32) / 1.8);
     a7c:	c0 90 d6 28 	lds	r12, 0x28D6	; 0x8028d6 <TEMP_FAH_RAW2>
     a80:	d0 90 d7 28 	lds	r13, 0x28D7	; 0x8028d7 <TEMP_FAH_RAW2+0x1>
     a84:	e0 90 d8 28 	lds	r14, 0x28D8	; 0x8028d8 <TEMP_FAH_RAW2+0x2>
     a88:	f0 90 d9 28 	lds	r15, 0x28D9	; 0x8028d9 <TEMP_FAH_RAW2+0x3>
     a8c:	20 e0       	ldi	r18, 0x00	; 0
     a8e:	30 e0       	ldi	r19, 0x00	; 0
     a90:	40 e0       	ldi	r20, 0x00	; 0
     a92:	52 e4       	ldi	r21, 0x42	; 66
     a94:	c7 01       	movw	r24, r14
     a96:	b6 01       	movw	r22, r12
     a98:	0e 94 00 38 	call	0x7000	; 0x7000 <__subsf3>
     a9c:	26 e6       	ldi	r18, 0x66	; 102
     a9e:	36 e6       	ldi	r19, 0x66	; 102
     aa0:	46 ee       	ldi	r20, 0xE6	; 230
     aa2:	5f e3       	ldi	r21, 0x3F	; 63
     aa4:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__divsf3>
     aa8:	60 93 f2 28 	sts	0x28F2, r22	; 0x8028f2 <TEMP_DEG>
     aac:	70 93 f3 28 	sts	0x28F3, r23	; 0x8028f3 <TEMP_DEG+0x1>
     ab0:	80 93 f4 28 	sts	0x28F4, r24	; 0x8028f4 <TEMP_DEG+0x2>
     ab4:	90 93 f5 28 	sts	0x28F5, r25	; 0x8028f5 <TEMP_DEG+0x3>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:76
          TEMP_FAH  =  TEMP_FAH_RAW2;
     ab8:	c0 92 d0 28 	sts	0x28D0, r12	; 0x8028d0 <TEMP_FAH>
     abc:	d0 92 d1 28 	sts	0x28D1, r13	; 0x8028d1 <TEMP_FAH+0x1>
     ac0:	e0 92 d2 28 	sts	0x28D2, r14	; 0x8028d2 <TEMP_FAH+0x2>
     ac4:	f0 92 d3 28 	sts	0x28D3, r15	; 0x8028d3 <TEMP_FAH+0x3>
     ac8:	a9 cf       	rjmp	.-174    	; 0xa1c <Mclass::RTD_TEMP_CONV() [clone .constprop.36]+0xe6>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:81
        }
    }
    else
    {
        CAL2_RAW_LOW_VALUE = (CAL2_RAW_LOW_VALUE_CONV / 10.0);
     aca:	60 91 cc 28 	lds	r22, 0x28CC	; 0x8028cc <CAL2_RAW_LOW_VALUE_CONV>
     ace:	70 91 cd 28 	lds	r23, 0x28CD	; 0x8028cd <CAL2_RAW_LOW_VALUE_CONV+0x1>
     ad2:	80 91 ce 28 	lds	r24, 0x28CE	; 0x8028ce <CAL2_RAW_LOW_VALUE_CONV+0x2>
     ad6:	90 91 cf 28 	lds	r25, 0x28CF	; 0x8028cf <CAL2_RAW_LOW_VALUE_CONV+0x3>
     ada:	0e 94 04 39 	call	0x7208	; 0x7208 <__floatsisf>
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	40 e2       	ldi	r20, 0x20	; 32
     ae4:	51 e4       	ldi	r21, 0x41	; 65
     ae6:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__divsf3>
     aea:	4b 01       	movw	r8, r22
     aec:	5c 01       	movw	r10, r24
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:83
        CAL2_RAW_HIGH_VALUE = (CAL2_RAW_HIGH_VALUE_CONV  / 10.0);
        MASTER_LOW =  (MASTER_LOW_CONV  / 10.0);
     aee:	60 91 c4 28 	lds	r22, 0x28C4	; 0x8028c4 <MASTER_LOW_CONV>
     af2:	70 91 c5 28 	lds	r23, 0x28C5	; 0x8028c5 <MASTER_LOW_CONV+0x1>
     af6:	80 91 c6 28 	lds	r24, 0x28C6	; 0x8028c6 <MASTER_LOW_CONV+0x2>
     afa:	90 91 c7 28 	lds	r25, 0x28C7	; 0x8028c7 <MASTER_LOW_CONV+0x3>
     afe:	0e 94 04 39 	call	0x7208	; 0x7208 <__floatsisf>
     b02:	20 e0       	ldi	r18, 0x00	; 0
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	40 e2       	ldi	r20, 0x20	; 32
     b08:	51 e4       	ldi	r21, 0x41	; 65
     b0a:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__divsf3>
     b0e:	6b 01       	movw	r12, r22
     b10:	7c 01       	movw	r14, r24
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:84
        MASTER_HIGH = (MASTER_HIGH_CONV  / 10.0);
     b12:	60 91 c0 28 	lds	r22, 0x28C0	; 0x8028c0 <MASTER_HIGH_CONV>
     b16:	70 91 c1 28 	lds	r23, 0x28C1	; 0x8028c1 <MASTER_HIGH_CONV+0x1>
     b1a:	80 91 c2 28 	lds	r24, 0x28C2	; 0x8028c2 <MASTER_HIGH_CONV+0x2>
     b1e:	90 91 c3 28 	lds	r25, 0x28C3	; 0x8028c3 <MASTER_HIGH_CONV+0x3>
     b22:	0e 94 04 39 	call	0x7208	; 0x7208 <__floatsisf>
     b26:	20 e0       	ldi	r18, 0x00	; 0
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	40 e2       	ldi	r20, 0x20	; 32
     b2c:	51 e4       	ldi	r21, 0x41	; 65
     b2e:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__divsf3>
mapFloat():
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\MapFloat-master\src/MapFloat.cpp:13


#include "MapFloat.h"

float mapFloat(float value, float fromLow, float fromHigh, float toLow, float toHigh) {
  return (value - fromLow) * (toHigh - toLow) / (fromHigh - fromLow) + toLow; 
     b32:	a7 01       	movw	r20, r14
     b34:	96 01       	movw	r18, r12
     b36:	0e 94 00 38 	call	0x7000	; 0x7000 <__subsf3>
     b3a:	2b 01       	movw	r4, r22
     b3c:	3c 01       	movw	r6, r24
     b3e:	a5 01       	movw	r20, r10
     b40:	94 01       	movw	r18, r8
     b42:	60 91 ee 28 	lds	r22, 0x28EE	; 0x8028ee <TEMP_DEG_RAW>
     b46:	70 91 ef 28 	lds	r23, 0x28EF	; 0x8028ef <TEMP_DEG_RAW+0x1>
     b4a:	80 91 f0 28 	lds	r24, 0x28F0	; 0x8028f0 <TEMP_DEG_RAW+0x2>
     b4e:	90 91 f1 28 	lds	r25, 0x28F1	; 0x8028f1 <TEMP_DEG_RAW+0x3>
     b52:	0e 94 00 38 	call	0x7000	; 0x7000 <__subsf3>
     b56:	9b 01       	movw	r18, r22
     b58:	ac 01       	movw	r20, r24
     b5a:	c3 01       	movw	r24, r6
     b5c:	b2 01       	movw	r22, r4
     b5e:	0e 94 b8 39 	call	0x7370	; 0x7370 <__mulsf3>
     b62:	2b 01       	movw	r4, r22
     b64:	3c 01       	movw	r6, r24
RTD_TEMP_CONV():
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:82
        }
    }
    else
    {
        CAL2_RAW_LOW_VALUE = (CAL2_RAW_LOW_VALUE_CONV / 10.0);
        CAL2_RAW_HIGH_VALUE = (CAL2_RAW_HIGH_VALUE_CONV  / 10.0);
     b66:	60 91 c8 28 	lds	r22, 0x28C8	; 0x8028c8 <CAL2_RAW_HIGH_VALUE_CONV>
     b6a:	70 91 c9 28 	lds	r23, 0x28C9	; 0x8028c9 <CAL2_RAW_HIGH_VALUE_CONV+0x1>
     b6e:	80 91 ca 28 	lds	r24, 0x28CA	; 0x8028ca <CAL2_RAW_HIGH_VALUE_CONV+0x2>
     b72:	90 91 cb 28 	lds	r25, 0x28CB	; 0x8028cb <CAL2_RAW_HIGH_VALUE_CONV+0x3>
     b76:	0e 94 04 39 	call	0x7208	; 0x7208 <__floatsisf>
     b7a:	20 e0       	ldi	r18, 0x00	; 0
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	40 e2       	ldi	r20, 0x20	; 32
     b80:	51 e4       	ldi	r21, 0x41	; 65
     b82:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__divsf3>
mapFloat():
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\MapFloat-master\src/MapFloat.cpp:13
     b86:	a5 01       	movw	r20, r10
     b88:	94 01       	movw	r18, r8
     b8a:	0e 94 00 38 	call	0x7000	; 0x7000 <__subsf3>
     b8e:	9b 01       	movw	r18, r22
     b90:	ac 01       	movw	r20, r24
     b92:	c3 01       	movw	r24, r6
     b94:	b2 01       	movw	r22, r4
     b96:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__divsf3>
     b9a:	a7 01       	movw	r20, r14
     b9c:	96 01       	movw	r18, r12
     b9e:	0e 94 01 38 	call	0x7002	; 0x7002 <__addsf3>
     ba2:	6b 01       	movw	r12, r22
     ba4:	7c 01       	movw	r14, r24
RTD_TEMP_CONV():
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:85
        MASTER_LOW =  (MASTER_LOW_CONV  / 10.0);
        MASTER_HIGH = (MASTER_HIGH_CONV  / 10.0);
        TEMP_DEG = mapFloat( TEMP_DEG_RAW, CAL2_RAW_LOW_VALUE, CAL2_RAW_HIGH_VALUE, MASTER_LOW, MASTER_HIGH);
     ba6:	c0 92 f2 28 	sts	0x28F2, r12	; 0x8028f2 <TEMP_DEG>
     baa:	d0 92 f3 28 	sts	0x28F3, r13	; 0x8028f3 <TEMP_DEG+0x1>
     bae:	e0 92 f4 28 	sts	0x28F4, r14	; 0x8028f4 <TEMP_DEG+0x2>
     bb2:	f0 92 f5 28 	sts	0x28F5, r15	; 0x8028f5 <TEMP_DEG+0x3>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:86
        TEMP_FAH  = ( TEMP_DEG * 1.8 ) + 32;
     bb6:	26 e6       	ldi	r18, 0x66	; 102
     bb8:	36 e6       	ldi	r19, 0x66	; 102
     bba:	46 ee       	ldi	r20, 0xE6	; 230
     bbc:	5f e3       	ldi	r21, 0x3F	; 63
     bbe:	0e 94 b8 39 	call	0x7370	; 0x7370 <__mulsf3>
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	40 e0       	ldi	r20, 0x00	; 0
     bc8:	52 e4       	ldi	r21, 0x42	; 66
     bca:	0e 94 01 38 	call	0x7002	; 0x7002 <__addsf3>
     bce:	60 93 d0 28 	sts	0x28D0, r22	; 0x8028d0 <TEMP_FAH>
     bd2:	70 93 d1 28 	sts	0x28D1, r23	; 0x8028d1 <TEMP_FAH+0x1>
     bd6:	80 93 d2 28 	sts	0x28D2, r24	; 0x8028d2 <TEMP_FAH+0x2>
     bda:	90 93 d3 28 	sts	0x28D3, r25	; 0x8028d3 <TEMP_FAH+0x3>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:87
        if(TEMP_DEG>=100) TEMP_DEG = 99.9; 
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	48 ec       	ldi	r20, 0xC8	; 200
     be4:	52 e4       	ldi	r21, 0x42	; 66
     be6:	c7 01       	movw	r24, r14
     be8:	b6 01       	movw	r22, r12
     bea:	0e 94 b4 39 	call	0x7368	; 0x7368 <__gesf2>
     bee:	87 fd       	sbrc	r24, 7
     bf0:	15 cf       	rjmp	.-470    	; 0xa1c <Mclass::RTD_TEMP_CONV() [clone .constprop.36]+0xe6>
     bf2:	8d ec       	ldi	r24, 0xCD	; 205
     bf4:	9c ec       	ldi	r25, 0xCC	; 204
     bf6:	a7 ec       	ldi	r26, 0xC7	; 199
     bf8:	b2 e4       	ldi	r27, 0x42	; 66
     bfa:	80 93 f2 28 	sts	0x28F2, r24	; 0x8028f2 <TEMP_DEG>
     bfe:	90 93 f3 28 	sts	0x28F3, r25	; 0x8028f3 <TEMP_DEG+0x1>
     c02:	a0 93 f4 28 	sts	0x28F4, r26	; 0x8028f4 <TEMP_DEG+0x2>
     c06:	b0 93 f5 28 	sts	0x28F5, r27	; 0x8028f5 <TEMP_DEG+0x3>
     c0a:	08 cf       	rjmp	.-496    	; 0xa1c <Mclass::RTD_TEMP_CONV() [clone .constprop.36]+0xe6>

00000c0c <DEC_LONGPRESS_STOP()>:
DEC_LONGPRESS_STOP():
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:512
}
}

void DEC_LONGPRESS_STOP()
{
  if(checkTempRaised==0)
     c0c:	80 91 85 28 	lds	r24, 0x2885	; 0x802885 <checkTempRaised>
     c10:	81 11       	cpse	r24, r1
     c12:	06 c0       	rjmp	.+12     	; 0xc20 <DEC_LONGPRESS_STOP()+0x14>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:514
  {
  i = 0;
     c14:	10 92 ba 28 	sts	0x28BA, r1	; 0x8028ba <i>
     c18:	10 92 bb 28 	sts	0x28BB, r1	; 0x8028bb <i+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:515
  BLINK_STATS=0;
     c1c:	10 92 b9 28 	sts	0x28B9, r1	; 0x8028b9 <BLINK_STATS>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:517
  }
}
     c20:	08 95       	ret

00000c22 <INC_LONGPRESS_STOP()>:
_Z18INC_LONGPRESS_STOPv():
     c22:	f4 cf       	rjmp	.-24     	; 0xc0c <DEC_LONGPRESS_STOP()>

00000c24 <Print::write(unsigned char const*, unsigned int)>:
write():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles\api/Print.cpp:30

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     c24:	af 92       	push	r10
     c26:	bf 92       	push	r11
     c28:	cf 92       	push	r12
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	6c 01       	movw	r12, r24
     c3a:	7b 01       	movw	r14, r22
     c3c:	8b 01       	movw	r16, r22
     c3e:	04 0f       	add	r16, r20
     c40:	15 1f       	adc	r17, r21
     c42:	eb 01       	movw	r28, r22
     c44:	5e 01       	movw	r10, r28
     c46:	ae 18       	sub	r10, r14
     c48:	bf 08       	sbc	r11, r15
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles\api/Print.cpp:32
  size_t n = 0;
  while (size--)
     c4a:	c0 17       	cp	r28, r16
     c4c:	d1 07       	cpc	r29, r17
     c4e:	59 f0       	breq	.+22     	; 0xc66 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles\api/Print.cpp:34
  {
    if (write(*buffer++))
     c50:	69 91       	ld	r22, Y+
     c52:	d6 01       	movw	r26, r12
     c54:	ed 91       	ld	r30, X+
     c56:	fc 91       	ld	r31, X
     c58:	01 90       	ld	r0, Z+
     c5a:	f0 81       	ld	r31, Z
     c5c:	e0 2d       	mov	r30, r0
     c5e:	c6 01       	movw	r24, r12
     c60:	09 95       	icall
     c62:	89 2b       	or	r24, r25
     c64:	79 f7       	brne	.-34     	; 0xc44 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles\api/Print.cpp:40
      n++;
    else
      break;
  }
  return n;
}
     c66:	c5 01       	movw	r24, r10
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	ff 90       	pop	r15
     c72:	ef 90       	pop	r14
     c74:	df 90       	pop	r13
     c76:	cf 90       	pop	r12
     c78:	bf 90       	pop	r11
     c7a:	af 90       	pop	r10
     c7c:	08 95       	ret

00000c7e <UartClass::availableForWrite()>:
availableForWrite():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:295
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC
  {
    head = _tx_buffer_head;
     c7e:	fc 01       	movw	r30, r24
     c80:	50 8d       	ldd	r21, Z+24	; 0x18
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:296
    tail = _tx_buffer_tail;
     c82:	41 8d       	ldd	r20, Z+25	; 0x19
     c84:	25 2f       	mov	r18, r21
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	84 2f       	mov	r24, r20
     c8a:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:298
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     c8c:	82 1b       	sub	r24, r18
     c8e:	93 0b       	sbc	r25, r19
     c90:	54 17       	cp	r21, r20
     c92:	10 f0       	brcs	.+4      	; 0xc98 <UartClass::availableForWrite()+0x1a>
     c94:	cf 96       	adiw	r24, 0x3f	; 63
     c96:	08 95       	ret
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:299
  return tail - head - 1;
     c98:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:300
}
     c9a:	08 95       	ret

00000c9c <UartClass::read()>:
read():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:274
    return _rx_buffer[_rx_buffer_tail];
  }
}

int UartClass::read(void)
{
     c9c:	fc 01       	movw	r30, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:276
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail)
     c9e:	96 89       	ldd	r25, Z+22	; 0x16
     ca0:	87 89       	ldd	r24, Z+23	; 0x17
     ca2:	98 17       	cp	r25, r24
     ca4:	61 f0       	breq	.+24     	; 0xcbe <UartClass::read()+0x22>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:282
  {
    return -1;
  }
  else
  {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     ca6:	a7 89       	ldd	r26, Z+23	; 0x17
     ca8:	ae 0f       	add	r26, r30
     caa:	bf 2f       	mov	r27, r31
     cac:	b1 1d       	adc	r27, r1
     cae:	5d 96       	adiw	r26, 0x1d	; 29
     cb0:	8c 91       	ld	r24, X
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:283
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     cb2:	97 89       	ldd	r25, Z+23	; 0x17
     cb4:	9f 5f       	subi	r25, 0xFF	; 255
     cb6:	9f 73       	andi	r25, 0x3F	; 63
     cb8:	97 8b       	std	Z+23, r25	; 0x17
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:284
    return c;
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	08 95       	ret
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:278
int UartClass::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail)
  {
    return -1;
     cbe:	8f ef       	ldi	r24, 0xFF	; 255
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:286
  {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     cc2:	08 95       	ret

00000cc4 <UartClass::peek()>:
peek():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:262
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int UartClass::peek(void)
{
     cc4:	fc 01       	movw	r30, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:263
  if (_rx_buffer_head == _rx_buffer_tail)
     cc6:	96 89       	ldd	r25, Z+22	; 0x16
     cc8:	87 89       	ldd	r24, Z+23	; 0x17
     cca:	98 17       	cp	r25, r24
     ccc:	31 f0       	breq	.+12     	; 0xcda <UartClass::peek()+0x16>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:269
  {
    return -1;
  }
  else
  {
    return _rx_buffer[_rx_buffer_tail];
     cce:	87 89       	ldd	r24, Z+23	; 0x17
     cd0:	e8 0f       	add	r30, r24
     cd2:	f1 1d       	adc	r31, r1
     cd4:	85 8d       	ldd	r24, Z+29	; 0x1d
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	08 95       	ret
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:265

int UartClass::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail)
  {
    return -1;
     cda:	8f ef       	ldi	r24, 0xFF	; 255
     cdc:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:271
  }
  else
  {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     cde:	08 95       	ret

00000ce0 <UartClass::available()>:
available():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:257
  // Note: Does not change output pins
  _written = false;
}

int UartClass::available(void)
{
     ce0:	fc 01       	movw	r30, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:258
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     ce2:	96 89       	ldd	r25, Z+22	; 0x16
     ce4:	27 89       	ldd	r18, Z+23	; 0x17
     ce6:	89 2f       	mov	r24, r25
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	80 5c       	subi	r24, 0xC0	; 192
     cec:	9f 4f       	sbci	r25, 0xFF	; 255
     cee:	82 1b       	sub	r24, r18
     cf0:	91 09       	sbc	r25, r1
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:259
}
     cf2:	8f 73       	andi	r24, 0x3F	; 63
     cf4:	99 27       	eor	r25, r25
     cf6:	08 95       	ret

00000cf8 <Serial2_available()>:
Serial2_available():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART2.cpp:65

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available()
{
  return Serial2.available();
     cf8:	81 e5       	ldi	r24, 0x51	; 81
     cfa:	99 e2       	ldi	r25, 0x29	; 41
     cfc:	f1 df       	rcall	.-30     	; 0xce0 <UartClass::available()>
     cfe:	21 e0       	ldi	r18, 0x01	; 1
     d00:	89 2b       	or	r24, r25
     d02:	09 f4       	brne	.+2      	; 0xd06 <Serial2_available()+0xe>
     d04:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART2.cpp:66
}
     d06:	82 2f       	mov	r24, r18
     d08:	08 95       	ret

00000d0a <UartClass::end()>:
end():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:240
  // Restore SREG content
  SREG = oldSREG;
}

void UartClass::end()
{
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	ec 01       	movw	r28, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:242
  // wait for transmission of outgoing data
  flush();
     d10:	e8 81       	ld	r30, Y
     d12:	f9 81       	ldd	r31, Y+1	; 0x01
     d14:	06 80       	ldd	r0, Z+6	; 0x06
     d16:	f7 81       	ldd	r31, Z+7	; 0x07
     d18:	e0 2d       	mov	r30, r0
     d1a:	09 95       	icall
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:246

  // Disable receiver and transmitter as well as the RX complete and
  // data register empty interrupts.
  (*_hwserial_module).CTRLB &= ~(USART_RXEN_bm | USART_TXEN_bm);
     d1c:	ec 85       	ldd	r30, Y+12	; 0x0c
     d1e:	fd 85       	ldd	r31, Y+13	; 0x0d
     d20:	86 81       	ldd	r24, Z+6	; 0x06
     d22:	8f 73       	andi	r24, 0x3F	; 63
     d24:	86 83       	std	Z+6, r24	; 0x06
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:247
  (*_hwserial_module).CTRLA &= ~(USART_RXCIE_bm | USART_DREIE_bm);
     d26:	ec 85       	ldd	r30, Y+12	; 0x0c
     d28:	fd 85       	ldd	r31, Y+13	; 0x0d
     d2a:	85 81       	ldd	r24, Z+5	; 0x05
     d2c:	8f 75       	andi	r24, 0x5F	; 95
     d2e:	85 83       	std	Z+5, r24	; 0x05
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:250

  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
     d30:	8f 89       	ldd	r24, Y+23	; 0x17
     d32:	8e 8b       	std	Y+22, r24	; 0x16
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:253

  // Note: Does not change output pins
  _written = false;
     d34:	1d 8a       	std	Y+21, r1	; 0x15
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:254
}
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	08 95       	ret

00000d3c <UartClass::swap(unsigned char)>:
swap():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:161
  _pin_set = 0; // Default to standard
  return false;
}

bool UartClass::swap(uint8_t state)
{
     d3c:	fc 01       	movw	r30, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:162
  if (state == 1) // Use alternative pin position
     d3e:	61 30       	cpi	r22, 0x01	; 1
     d40:	19 f4       	brne	.+6      	; 0xd48 <UartClass::swap(unsigned char)+0xc>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:164
  {
    _pin_set = state;
     d42:	64 8b       	std	Z+20, r22	; 0x14
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:170
    return true;
  }
  else if (state == 0) // Use default pin position
  {
    _pin_set = 0;
    return true;
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	08 95       	ret
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:169
    _pin_set = state;
    return true;
  }
  else if (state == 0) // Use default pin position
  {
    _pin_set = 0;
     d48:	14 8a       	std	Z+20, r1	; 0x14
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:167
  if (state == 1) // Use alternative pin position
  {
    _pin_set = state;
    return true;
  }
  else if (state == 0) // Use default pin position
     d4a:	66 23       	and	r22, r22
     d4c:	d9 f3       	breq	.-10     	; 0xd44 <UartClass::swap(unsigned char)+0x8>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:175
    return true;
  }
  else // Invalid swap value. Use default position
  {
    _pin_set = 0;
    return false;
     d4e:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:177
  }
}
     d50:	08 95       	ret

00000d52 <UartClass::pins(unsigned char, unsigned char)>:
pins():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:147

// Public Methods //////////////////////////////////////////////////////////////

// Invoke this function before 'begin' to define the pins used
bool UartClass::pins(uint8_t tx, uint8_t rx)
{
     d52:	dc 01       	movw	r26, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:148
  for (_pin_set = 0; _pin_set < SERIAL_PIN_SETS; ++_pin_set)
     d54:	54 96       	adiw	r26, 0x14	; 20
     d56:	1c 92       	st	X, r1
     d58:	54 97       	sbiw	r26, 0x14	; 20
     d5a:	54 96       	adiw	r26, 0x14	; 20
     d5c:	8c 91       	ld	r24, X
     d5e:	54 97       	sbiw	r26, 0x14	; 20
     d60:	82 30       	cpi	r24, 0x02	; 2
     d62:	a0 f4       	brcc	.+40     	; 0xd8c <UartClass::pins(unsigned char, unsigned char)+0x3a>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:150
  {
    if (tx == _hw_set[_pin_set].tx_pin && rx == _hw_set[_pin_set].rx_pin)
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	f9 01       	movw	r30, r18
     d6a:	ee 0f       	add	r30, r30
     d6c:	ff 1f       	adc	r31, r31
     d6e:	e2 0f       	add	r30, r18
     d70:	f3 1f       	adc	r31, r19
     d72:	ea 0f       	add	r30, r26
     d74:	fb 1f       	adc	r31, r27
     d76:	97 85       	ldd	r25, Z+15	; 0x0f
     d78:	96 13       	cpse	r25, r22
     d7a:	03 c0       	rjmp	.+6      	; 0xd82 <UartClass::pins(unsigned char, unsigned char)+0x30>
     d7c:	96 85       	ldd	r25, Z+14	; 0x0e
     d7e:	94 17       	cp	r25, r20
     d80:	49 f0       	breq	.+18     	; 0xd94 <UartClass::pins(unsigned char, unsigned char)+0x42>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:148
// Public Methods //////////////////////////////////////////////////////////////

// Invoke this function before 'begin' to define the pins used
bool UartClass::pins(uint8_t tx, uint8_t rx)
{
  for (_pin_set = 0; _pin_set < SERIAL_PIN_SETS; ++_pin_set)
     d82:	8f 5f       	subi	r24, 0xFF	; 255
     d84:	54 96       	adiw	r26, 0x14	; 20
     d86:	8c 93       	st	X, r24
     d88:	54 97       	sbiw	r26, 0x14	; 20
     d8a:	e7 cf       	rjmp	.-50     	; 0xd5a <UartClass::pins(unsigned char, unsigned char)+0x8>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:156
    {
      // We are good, this set of pins is supported
      return true;
    }
  }
  _pin_set = 0; // Default to standard
     d8c:	54 96       	adiw	r26, 0x14	; 20
     d8e:	1c 92       	st	X, r1
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:157
  return false;
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	08 95       	ret
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:153
  for (_pin_set = 0; _pin_set < SERIAL_PIN_SETS; ++_pin_set)
  {
    if (tx == _hw_set[_pin_set].tx_pin && rx == _hw_set[_pin_set].rx_pin)
    {
      // We are good, this set of pins is supported
      return true;
     d94:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:158
    }
  }
  _pin_set = 0; // Default to standard
  return false;
}
     d96:	08 95       	ret

00000d98 <UartClass::_tx_data_empty_irq()>:
_tx_data_empty_irq():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:89
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void UartClass::_tx_data_empty_irq(void)
{
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	fc 01       	movw	r30, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:91
  // Check if tx buffer already empty.
  if (_tx_buffer_head == _tx_buffer_tail)
     d9e:	90 8d       	ldd	r25, Z+24	; 0x18
     da0:	81 8d       	ldd	r24, Z+25	; 0x19
     da2:	c4 85       	ldd	r28, Z+12	; 0x0c
     da4:	d5 85       	ldd	r29, Z+13	; 0x0d
     da6:	98 13       	cpse	r25, r24
     da8:	06 c0       	rjmp	.+12     	; 0xdb6 <UartClass::_tx_data_empty_irq()+0x1e>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:94
  {
    // Buffer empty, so disable "data register empty" interrupt
    (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
     daa:	8d 81       	ldd	r24, Y+5	; 0x05
     dac:	8f 7d       	andi	r24, 0xDF	; 223
     dae:	8d 83       	std	Y+5, r24	; 0x05
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:122
    {
      CPUINT.LVL1VEC = _prev_lvl1_interrupt_vect;
      _hwserial_dre_interrupt_elevated = 0;
    }
  }
}
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	08 95       	ret
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:100
    return;
  }

  // There must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     db6:	a1 8d       	ldd	r26, Z+25	; 0x19
     db8:	ae 0f       	add	r26, r30
     dba:	bf 2f       	mov	r27, r31
     dbc:	b1 1d       	adc	r27, r1
     dbe:	a3 5a       	subi	r26, 0xA3	; 163
     dc0:	bf 4f       	sbci	r27, 0xFF	; 255
     dc2:	2c 91       	ld	r18, X
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:101
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     dc4:	81 8d       	ldd	r24, Z+25	; 0x19
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	01 96       	adiw	r24, 0x01	; 1
     dca:	8f 73       	andi	r24, 0x3F	; 63
     dcc:	99 27       	eor	r25, r25
     dce:	81 8f       	std	Z+25, r24	; 0x19
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:106

  // clear the TXCIF flag -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  (*_hwserial_module).STATUS = USART_TXCIF_bm;
     dd0:	80 e4       	ldi	r24, 0x40	; 64
     dd2:	8c 83       	std	Y+4, r24	; 0x04
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:108

  (*_hwserial_module).TXDATAL = c;
     dd4:	a4 85       	ldd	r26, Z+12	; 0x0c
     dd6:	b5 85       	ldd	r27, Z+13	; 0x0d
     dd8:	12 96       	adiw	r26, 0x02	; 2
     dda:	2c 93       	st	X, r18
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:110

  if (_tx_buffer_head == _tx_buffer_tail)
     ddc:	90 8d       	ldd	r25, Z+24	; 0x18
     dde:	81 8d       	ldd	r24, Z+25	; 0x19
     de0:	98 13       	cpse	r25, r24
     de2:	e6 cf       	rjmp	.-52     	; 0xdb0 <UartClass::_tx_data_empty_irq()+0x18>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:113
  {
    // Buffer empty, so disable "data register empty" interrupt
    (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
     de4:	a4 85       	ldd	r26, Z+12	; 0x0c
     de6:	b5 85       	ldd	r27, Z+13	; 0x0d
     de8:	15 96       	adiw	r26, 0x05	; 5
     dea:	8c 91       	ld	r24, X
     dec:	15 97       	sbiw	r26, 0x05	; 5
     dee:	8f 7d       	andi	r24, 0xDF	; 223
     df0:	15 96       	adiw	r26, 0x05	; 5
     df2:	8c 93       	st	X, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:116

    //Take the DRE interrupt back no normal priority level if it has been elevated
    if (_hwserial_dre_interrupt_elevated)
     df4:	83 8d       	ldd	r24, Z+27	; 0x1b
     df6:	88 23       	and	r24, r24
     df8:	d9 f2       	breq	.-74     	; 0xdb0 <UartClass::_tx_data_empty_irq()+0x18>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:118
    {
      CPUINT.LVL1VEC = _prev_lvl1_interrupt_vect;
     dfa:	84 8d       	ldd	r24, Z+28	; 0x1c
     dfc:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <__TEXT_REGION_LENGTH__+0x7f4113>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:119
      _hwserial_dre_interrupt_elevated = 0;
     e00:	13 8e       	std	Z+27, r1	; 0x1b
     e02:	d6 cf       	rjmp	.-84     	; 0xdb0 <UartClass::_tx_data_empty_irq()+0x18>

00000e04 <UartClass::_poll_tx_data_empty()>:
_poll_tx_data_empty():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:126
  }
}

// To invoke data empty "interrupt" via a call, use this method
void UartClass::_poll_tx_data_empty(void)
{
     e04:	dc 01       	movw	r26, r24
     e06:	1c 96       	adiw	r26, 0x0c	; 12
     e08:	ed 91       	ld	r30, X+
     e0a:	fc 91       	ld	r31, X
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:127
  if ((!(SREG & CPU_I_bm)) || (!((*_hwserial_module).CTRLA & USART_DREIE_bm)))
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	07 fe       	sbrs	r0, 7
     e10:	03 c0       	rjmp	.+6      	; 0xe18 <UartClass::_poll_tx_data_empty()+0x14>
     e12:	25 81       	ldd	r18, Z+5	; 0x05
     e14:	25 fd       	sbrc	r18, 5
     e16:	03 c0       	rjmp	.+6      	; 0xe1e <UartClass::_poll_tx_data_empty()+0x1a>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:135
    // so we'll have to poll the "data register empty" flag ourselves.
    // If it is set, pretend an interrupt has happened and call the handler
    // to free up space for us.

    // Invoke interrupt handler only if conditions data register is empty
    if ((*_hwserial_module).STATUS & USART_DREIF_bm)
     e18:	24 81       	ldd	r18, Z+4	; 0x04
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:137
    {
      _tx_data_empty_irq();
     e1a:	25 fd       	sbrc	r18, 5
     e1c:	bd cf       	rjmp	.-134    	; 0xd98 <UartClass::_tx_data_empty_irq()>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:141
    }
  }
  // In case interrupts are enabled, the interrupt routine will be invoked by itself
}
     e1e:	08 95       	ret

00000e20 <UartClass::write(unsigned char)>:
write():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:336
  // If we get here, nothing is queued anymore (DREIE is disabled) and
  // the hardware finished transmission (TXCIF is set).
}

size_t UartClass::write(uint8_t c)
{
     e20:	ef 92       	push	r14
     e22:	ff 92       	push	r15
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	ec 01       	movw	r28, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:337
  _written = true;
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	8d 8b       	std	Y+21, r24	; 0x15
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:343

  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective data rate at high (>
  // 500kbit/s) bit rates, where interrupt overhead becomes a slowdown.
  if ((_tx_buffer_head == _tx_buffer_tail) && ((*_hwserial_module).STATUS & USART_DREIF_bm))
     e32:	98 8d       	ldd	r25, Y+24	; 0x18
     e34:	89 8d       	ldd	r24, Y+25	; 0x19
     e36:	98 13       	cpse	r25, r24
     e38:	1c c0       	rjmp	.+56     	; 0xe72 <UartClass::write(unsigned char)+0x52>
     e3a:	ac 85       	ldd	r26, Y+12	; 0x0c
     e3c:	bd 85       	ldd	r27, Y+13	; 0x0d
     e3e:	14 96       	adiw	r26, 0x04	; 4
     e40:	8c 91       	ld	r24, X
     e42:	14 97       	sbiw	r26, 0x04	; 4
     e44:	85 ff       	sbrs	r24, 5
     e46:	15 c0       	rjmp	.+42     	; 0xe72 <UartClass::write(unsigned char)+0x52>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:345
  {
    (*_hwserial_module).TXDATAL = c;
     e48:	12 96       	adiw	r26, 0x02	; 2
     e4a:	6c 93       	st	X, r22
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:346
    (*_hwserial_module).STATUS = USART_TXCIF_bm;
     e4c:	ac 85       	ldd	r26, Y+12	; 0x0c
     e4e:	bd 85       	ldd	r27, Y+13	; 0x0d
     e50:	80 e4       	ldi	r24, 0x40	; 64
     e52:	14 96       	adiw	r26, 0x04	; 4
     e54:	8c 93       	st	X, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:350

    // Make sure data register empty interrupt is disabled to avoid
    // that the interrupt handler is called in this situation
    (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
     e56:	ec 85       	ldd	r30, Y+12	; 0x0c
     e58:	fd 85       	ldd	r31, Y+13	; 0x0d
     e5a:	85 81       	ldd	r24, Z+5	; 0x05
     e5c:	8f 7d       	andi	r24, 0xDF	; 223
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:380

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  // Enable data "register empty interrupt"
  (*_hwserial_module).CTRLA |= USART_DREIE_bm;
     e5e:	85 83       	std	Z+5, r24	; 0x05
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:383

  return 1;
}
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	ff 90       	pop	r15
     e6e:	ef 90       	pop	r14
     e70:	08 95       	ret
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:357
    return 1;
  }

  //Check if we are inside an ISR already (could be from by a source other than UART),
  // in which case the UART ISRs will be blocked.
  if (CPUINT.STATUS & CPUINT_LVL0EX_bm)
     e72:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <__TEXT_REGION_LENGTH__+0x7f4111>
     e76:	80 ff       	sbrs	r24, 0
     e78:	08 c0       	rjmp	.+16     	; 0xe8a <UartClass::write(unsigned char)+0x6a>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:361
  {
    //Elevate the priority level of the Data Register Empty Interrupt vector
    //and copy whatever vector number that might be in the register already.
    _prev_lvl1_interrupt_vect = CPUINT.LVL1VEC;
     e7a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <__TEXT_REGION_LENGTH__+0x7f4113>
     e7e:	8c 8f       	std	Y+28, r24	; 0x1c
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:362
    CPUINT.LVL1VEC = _hwserial_dre_interrupt_vect_num;
     e80:	8a 8d       	ldd	r24, Y+26	; 0x1a
     e82:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <__TEXT_REGION_LENGTH__+0x7f4113>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:364

    _hwserial_dre_interrupt_elevated = 1;
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	8b 8f       	std	Y+27, r24	; 0x1b
     e8a:	f6 2e       	mov	r15, r22
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:367
  }

  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     e8c:	08 8d       	ldd	r16, Y+24	; 0x18
     e8e:	10 e0       	ldi	r17, 0x00	; 0
     e90:	0f 5f       	subi	r16, 0xFF	; 255
     e92:	1f 4f       	sbci	r17, 0xFF	; 255
     e94:	0f 73       	andi	r16, 0x3F	; 63
     e96:	11 27       	eor	r17, r17
     e98:	e0 2e       	mov	r14, r16
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:371

  //If the output buffer is full, there's nothing for it other than to
  //wait for the interrupt handler to empty it a bit (or emulate interrupts)
  while (i == _tx_buffer_tail)
     e9a:	89 8d       	ldd	r24, Y+25	; 0x19
     e9c:	8e 11       	cpse	r24, r14
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:373
  {
    _poll_tx_data_empty();
     e9e:	03 c0       	rjmp	.+6      	; 0xea6 <UartClass::write(unsigned char)+0x86>
     ea0:	ce 01       	movw	r24, r28
     ea2:	b0 df       	rcall	.-160    	; 0xe04 <UartClass::_poll_tx_data_empty()>
     ea4:	fa cf       	rjmp	.-12     	; 0xe9a <UartClass::write(unsigned char)+0x7a>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:376
  }

  _tx_buffer[_tx_buffer_head] = c;
     ea6:	e8 8d       	ldd	r30, Y+24	; 0x18
     ea8:	ec 0f       	add	r30, r28
     eaa:	fd 2f       	mov	r31, r29
     eac:	f1 1d       	adc	r31, r1
     eae:	e3 5a       	subi	r30, 0xA3	; 163
     eb0:	ff 4f       	sbci	r31, 0xFF	; 255
     eb2:	f0 82       	st	Z, r15
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:377
  _tx_buffer_head = i;
     eb4:	08 8f       	std	Y+24, r16	; 0x18
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:380

  // Enable data "register empty interrupt"
  (*_hwserial_module).CTRLA |= USART_DREIE_bm;
     eb6:	ec 85       	ldd	r30, Y+12	; 0x0c
     eb8:	fd 85       	ldd	r31, Y+13	; 0x0d
     eba:	85 81       	ldd	r24, Z+5	; 0x05
     ebc:	80 62       	ori	r24, 0x20	; 32
     ebe:	cf cf       	rjmp	.-98     	; 0xe5e <UartClass::write(unsigned char)+0x3e>

00000ec0 <UartClass::flush()>:
flush():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:303
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void UartClass::flush()
{
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:307
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXCIF (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     ec4:	fc 01       	movw	r30, r24
     ec6:	25 89       	ldd	r18, Z+21	; 0x15
     ec8:	22 23       	and	r18, r18
     eca:	c1 f0       	breq	.+48     	; 0xefc <UartClass::flush()+0x3c>
     ecc:	ec 01       	movw	r28, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:314
    return;
  }

  //Check if we are inside an ISR already (e.g. connected to a different peripheral then UART), in which case the UART ISRs will not be called.
  //Temporarily elevate the DRE interrupt to allow it to run.
  if (CPUINT.STATUS & CPUINT_LVL0EX_bm)
     ece:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <__TEXT_REGION_LENGTH__+0x7f4111>
     ed2:	80 ff       	sbrs	r24, 0
     ed4:	08 c0       	rjmp	.+16     	; 0xee6 <UartClass::flush()+0x26>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:318
  {
    //Elevate the priority level of the Data Register Empty Interrupt vector
    //and copy whatever vector number that might be in the register already.
    _prev_lvl1_interrupt_vect = CPUINT.LVL1VEC;
     ed6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <__TEXT_REGION_LENGTH__+0x7f4113>
     eda:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:319
    CPUINT.LVL1VEC = _hwserial_dre_interrupt_vect_num;
     edc:	82 8d       	ldd	r24, Z+26	; 0x1a
     ede:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <__TEXT_REGION_LENGTH__+0x7f4113>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:321

    _hwserial_dre_interrupt_elevated = 1;
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	83 8f       	std	Z+27, r24	; 0x1b
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:325
  }

  // Spin until the data-register-empty-interrupt is disabled and TX complete interrupt flag is raised
  while (((*_hwserial_module).CTRLA & USART_DREIE_bm) || (!((*_hwserial_module).STATUS & USART_TXCIF_bm)))
     ee6:	ec 85       	ldd	r30, Y+12	; 0x0c
     ee8:	fd 85       	ldd	r31, Y+13	; 0x0d
     eea:	85 81       	ldd	r24, Z+5	; 0x05
     eec:	85 fd       	sbrc	r24, 5
     eee:	03 c0       	rjmp	.+6      	; 0xef6 <UartClass::flush()+0x36>
     ef0:	84 81       	ldd	r24, Z+4	; 0x04
     ef2:	86 fd       	sbrc	r24, 6
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:329
  {
    // If interrupts are globally disabled or the and DR empty interrupt is disabled,
    // poll the "data register empty" interrupt flag to prevent deadlock
    _poll_tx_data_empty();
     ef4:	03 c0       	rjmp	.+6      	; 0xefc <UartClass::flush()+0x3c>
     ef6:	ce 01       	movw	r24, r28
     ef8:	85 df       	rcall	.-246    	; 0xe04 <UartClass::_poll_tx_data_empty()>
     efa:	f5 cf       	rjmp	.-22     	; 0xee6 <UartClass::flush()+0x26>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:333
  }
  // If we get here, nothing is queued anymore (DREIE is disabled) and
  // the hardware finished transmission (TXCIF is set).
}
     efc:	df 91       	pop	r29
     efe:	cf 91       	pop	r28
     f00:	08 95       	ret

00000f02 <serialEventRun()>:
serialEventRun():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	89 2b       	or	r24, r25
     f08:	49 f0       	breq	.+18     	; 0xf1c <serialEventRun()+0x1a>
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	89 2b       	or	r24, r25
     f10:	29 f0       	breq	.+10     	; 0xf1c <serialEventRun()+0x1a>
     f12:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
     f16:	81 11       	cpse	r24, r1
     f18:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	89 2b       	or	r24, r25
     f22:	49 f0       	breq	.+18     	; 0xf36 <serialEventRun()+0x34>
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	89 2b       	or	r24, r25
     f2a:	29 f0       	breq	.+10     	; 0xf36 <serialEventRun()+0x34>
     f2c:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
     f30:	81 11       	cpse	r24, r1
     f32:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:72
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	89 2b       	or	r24, r25
     f3c:	21 f0       	breq	.+8      	; 0xf46 <serialEventRun()+0x44>
     f3e:	dc de       	rcall	.-584    	; 0xcf8 <Serial2_available()>
     f40:	81 11       	cpse	r24, r1
     f42:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:75
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	89 2b       	or	r24, r25
     f4c:	49 f0       	breq	.+18     	; 0xf60 <serialEventRun()+0x5e>
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	89 2b       	or	r24, r25
     f54:	29 f0       	breq	.+10     	; 0xf60 <serialEventRun()+0x5e>
     f56:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
     f5a:	81 11       	cpse	r24, r1
     f5c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:77
#endif
}
     f60:	08 95       	ret

00000f62 <UartClass::operator bool()>:
operator 3():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.h:174
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    using Print::write; // pull in write(str) and write(buf, size) from Print
    explicit operator bool() { return true; }
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	08 95       	ret

00000f66 <pinMode.part.1>:
pinMode.part.1():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:29

#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:31
{
  uint8_t bit_mask = digitalPinToBitMask(pin);
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	fc 01       	movw	r30, r24
     f6e:	ef 5e       	subi	r30, 0xEF	; 239
     f70:	f9 44       	sbci	r31, 0x49	; 73
     f72:	20 81       	ld	r18, Z
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:33

  if ((bit_mask == NOT_A_PIN) || (mode > INPUT_PULLUP))
     f74:	2f 3f       	cpi	r18, 0xFF	; 255
     f76:	69 f0       	breq	.+26     	; 0xf92 <pinMode.part.1+0x2c>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:36
    return;

  PORT_t *port = digitalPinToPortStruct(pin);
     f78:	fc 01       	movw	r30, r24
     f7a:	e8 51       	subi	r30, 0x18	; 24
     f7c:	fa 44       	sbci	r31, 0x4A	; 74
     f7e:	a0 81       	ld	r26, Z
     f80:	30 e2       	ldi	r19, 0x20	; 32
     f82:	a3 9f       	mul	r26, r19
     f84:	d0 01       	movw	r26, r0
     f86:	11 24       	eor	r1, r1
     f88:	bc 5f       	subi	r27, 0xFC	; 252
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:40
  if (port == NULL)
    return;

  if (mode == OUTPUT)
     f8a:	61 30       	cpi	r22, 0x01	; 1
     f8c:	29 f4       	brne	.+10     	; 0xf98 <pinMode.part.1+0x32>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:43
  {
    /* Configure direction as output */
    port->DIRSET = bit_mask;
     f8e:	11 96       	adiw	r26, 0x01	; 1
     f90:	2c 93       	st	X, r18
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:75
    }

    /* Restore state */
    SREG = status;
  }
}
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	08 95       	ret
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:48
    port->DIRSET = bit_mask;
  }
  else
  { /* mode == INPUT or INPUT_PULLUP */

    uint8_t bit_pos = digitalPinToBitPosition(pin);
     f98:	81 54       	subi	r24, 0x41	; 65
     f9a:	9a 44       	sbci	r25, 0x4A	; 74
     f9c:	ec 01       	movw	r28, r24
     f9e:	e8 81       	ld	r30, Y
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:50
    /* Calculate where pin control register is */
    volatile uint8_t *pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);
     fa0:	ef 3f       	cpi	r30, 0xFF	; 255
     fa2:	81 f0       	breq	.+32     	; 0xfc4 <pinMode.part.1+0x5e>
     fa4:	cd 01       	movw	r24, r26
     fa6:	40 96       	adiw	r24, 0x10	; 16
     fa8:	e8 0f       	add	r30, r24
     faa:	f9 2f       	mov	r31, r25
     fac:	f1 1d       	adc	r31, r1
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:53

    /* Save state */
    uint8_t status = SREG;
     fae:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:54
    cli();
     fb0:	f8 94       	cli
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:57

    /* Configure direction as input */
    port->DIRCLR = bit_mask;
     fb2:	12 96       	adiw	r26, 0x02	; 2
     fb4:	2c 93       	st	X, r18
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:63

    /* Configure pull-up resistor */
    if (mode == INPUT_PULLUP)
    {
      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
     fb6:	80 81       	ld	r24, Z
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:60

    /* Configure direction as input */
    port->DIRCLR = bit_mask;

    /* Configure pull-up resistor */
    if (mode == INPUT_PULLUP)
     fb8:	62 30       	cpi	r22, 0x02	; 2
     fba:	39 f4       	brne	.+14     	; 0xfca <pinMode.part.1+0x64>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:63
    {
      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
     fbc:	88 60       	ori	r24, 0x08	; 8
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:69
    }
    else
    { /* mode == INPUT (no pullup) */

      /* Disable pull-up */
      *pin_ctrl_reg &= ~(PORT_PULLUPEN_bm);
     fbe:	80 83       	st	Z, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:73
    }

    /* Restore state */
    SREG = status;
     fc0:	9f bf       	out	0x3f, r25	; 63
     fc2:	e7 cf       	rjmp	.-50     	; 0xf92 <pinMode.part.1+0x2c>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:50
  else
  { /* mode == INPUT or INPUT_PULLUP */

    uint8_t bit_pos = digitalPinToBitPosition(pin);
    /* Calculate where pin control register is */
    volatile uint8_t *pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	e0 e0       	ldi	r30, 0x00	; 0
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:69
    }
    else
    { /* mode == INPUT (no pullup) */

      /* Disable pull-up */
      *pin_ctrl_reg &= ~(PORT_PULLUPEN_bm);
     fc8:	f2 cf       	rjmp	.-28     	; 0xfae <pinMode.part.1+0x48>
     fca:	87 7f       	andi	r24, 0xF7	; 247
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:31
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
  uint8_t bit_mask = digitalPinToBitMask(pin);
     fcc:	f8 cf       	rjmp	.-16     	; 0xfbe <pinMode.part.1+0x58>

00000fce <pinMode>:
pinMode():
     fce:	89 32       	cpi	r24, 0x29	; 41
     fd0:	08 f4       	brcc	.+2      	; 0xfd4 <pinMode+0x6>
     fd2:	c9 cf       	rjmp	.-110    	; 0xf66 <pinMode.part.1>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:75
    }

    /* Restore state */
    SREG = status;
  }
}
     fd4:	08 95       	ret

00000fd6 <turnOffPWM.part.0>:
turnOffPWM.part.0():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:97
static void turnOffPWM(uint8_t pin)
{
  /* Actually turn off compare channel, not the timer */

  /* Get pin's timer */
  uint8_t timer = digitalPinToTimer(pin);
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	fc 01       	movw	r30, r24
     fda:	ea 56       	subi	r30, 0x6A	; 106
     fdc:	fa 44       	sbci	r31, 0x4A	; 74
     fde:	e0 81       	ld	r30, Z
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:98
  if (timer == NOT_ON_TIMER)
     fe0:	ee 23       	and	r30, r30
     fe2:	19 f1       	breq	.+70     	; 0x102a <turnOffPWM.part.0+0x54>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:104
    return;

  uint8_t bit_pos;
  TCB_t *timerB;

  switch (timer)
     fe4:	e1 30       	cpi	r30, 0x01	; 1
     fe6:	21 f0       	breq	.+8      	; 0xff0 <turnOffPWM.part.0+0x1a>
     fe8:	00 f1       	brcs	.+64     	; 0x102a <turnOffPWM.part.0+0x54>
     fea:	e6 30       	cpi	r30, 0x06	; 6
     fec:	a8 f0       	brcs	.+42     	; 0x1018 <turnOffPWM.part.0+0x42>
     fee:	08 95       	ret
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:109
  {
    /* TCA0 */
    case TIMERA0:
      /* Bit position will give output channel */
      bit_pos = digitalPinToBitPosition(pin);
     ff0:	81 54       	subi	r24, 0x41	; 65
     ff2:	9a 44       	sbci	r25, 0x4A	; 74
     ff4:	fc 01       	movw	r30, r24
     ff6:	20 81       	ld	r18, Z
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:112

      /* Disable corresponding channel */
      if (bit_pos >= 3) ++bit_pos; /* Upper 3 bits are shifted by 1 */
     ff8:	23 30       	cpi	r18, 0x03	; 3
     ffa:	08 f0       	brcs	.+2      	; 0xffe <turnOffPWM.part.0+0x28>
     ffc:	2f 5f       	subi	r18, 0xFF	; 255
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:113
      TCA0.SPLIT.CTRLB &= ~(1 << (TCA_SPLIT_LCMP0EN_bp + bit_pos));
     ffe:	30 91 01 0a 	lds	r19, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7f4a01>
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	01 c0       	rjmp	.+2      	; 0x100a <turnOffPWM.part.0+0x34>
    1008:	88 0f       	add	r24, r24
    100a:	2a 95       	dec	r18
    100c:	ea f7       	brpl	.-6      	; 0x1008 <turnOffPWM.part.0+0x32>
    100e:	80 95       	com	r24
    1010:	83 23       	and	r24, r19
    1012:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7f4a01>
    1016:	08 95       	ret
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:123
    case TIMERB0:
    case TIMERB1:
    case TIMERB2:
    case TIMERB3:

      timerB = (TCB_t *)&TCB0 + (timer - TIMERB0);
    1018:	80 e1       	ldi	r24, 0x10	; 16
    101a:	e8 9f       	mul	r30, r24
    101c:	f0 01       	movw	r30, r0
    101e:	11 24       	eor	r1, r1
    1020:	e0 5a       	subi	r30, 0xA0	; 160
    1022:	f5 4f       	sbci	r31, 0xF5	; 245
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:126

      /* Disable TCB compare channel */
      timerB->CTRLB &= ~(TCB_CCMPEN_bm);
    1024:	81 81       	ldd	r24, Z+1	; 0x01
    1026:	8f 7e       	andi	r24, 0xEF	; 239
    1028:	81 83       	std	Z+1, r24	; 0x01
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:132

      break;
    default:
      break;
  }
}
    102a:	08 95       	ret

0000102c <digitalWrite.part.2>:
digitalWrite.part.2():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:134

void digitalWrite(uint8_t pin, uint8_t val)
    102c:	0f 93       	push	r16
    102e:	1f 93       	push	r17
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:137
{
  /* Get bit mask for pin */
  uint8_t bit_mask = digitalPinToBitMask(pin);
    1034:	c8 2f       	mov	r28, r24
    1036:	d0 e0       	ldi	r29, 0x00	; 0
    1038:	fe 01       	movw	r30, r28
    103a:	ef 5e       	subi	r30, 0xEF	; 239
    103c:	f9 44       	sbci	r31, 0x49	; 73
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:138
  if (bit_mask == NOT_A_PIN)
    103e:	00 81       	ld	r16, Z
    1040:	0f 3f       	cpi	r16, 0xFF	; 255
    1042:	99 f0       	breq	.+38     	; 0x106a <digitalWrite.part.2+0x3e>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:97
static void turnOffPWM(uint8_t pin)
{
  /* Actually turn off compare channel, not the timer */

  /* Get pin's timer */
  uint8_t timer = digitalPinToTimer(pin);
    1044:	16 2f       	mov	r17, r22
turnOffPWM():
    1046:	89 32       	cpi	r24, 0x29	; 41
    1048:	08 f4       	brcc	.+2      	; 0x104c <digitalWrite.part.2+0x20>
    104a:	c5 df       	rcall	.-118    	; 0xfd6 <turnOffPWM.part.0>
digitalWrite.part.2():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:150
  turnOffPWM(pin);

  /* Assuming the direction is already output !! */

  /* Get port */
  PORT_t *port = digitalPinToPortStruct(pin);
    104c:	fe 01       	movw	r30, r28
    104e:	e8 51       	subi	r30, 0x18	; 24
    1050:	fa 44       	sbci	r31, 0x4A	; 74
    1052:	e0 81       	ld	r30, Z
    1054:	80 e2       	ldi	r24, 0x20	; 32
    1056:	e8 9f       	mul	r30, r24
    1058:	f0 01       	movw	r30, r0
    105a:	11 24       	eor	r1, r1
    105c:	fc 5f       	subi	r31, 0xFC	; 252
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:153

  /* Output direction */
  if (port->DIR & bit_mask)
    105e:	80 81       	ld	r24, Z
    1060:	80 23       	and	r24, r16
    1062:	51 f0       	breq	.+20     	; 0x1078 <digitalWrite.part.2+0x4c>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:156
  {
    /* Set output to value */
    if (val == LOW)
    1064:	11 11       	cpse	r17, r1
    1066:	06 c0       	rjmp	.+12     	; 0x1074 <digitalWrite.part.2+0x48>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:158
    { /* If LOW */
      port->OUTCLR = bit_mask;
    1068:	06 83       	std	Z+6, r16	; 0x06
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:203
    }

    /* Restore system status */
    SREG = status;
  }
}
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	1f 91       	pop	r17
    1070:	0f 91       	pop	r16
    1072:	08 95       	ret
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:167
      port->OUTTGL = bit_mask;
      /* If HIGH OR  > TOGGLE  */
    }
    else
    {
      port->OUTSET = bit_mask;
    1074:	05 83       	std	Z+5, r16	; 0x05
    1076:	f9 cf       	rjmp	.-14     	; 0x106a <digitalWrite.part.2+0x3e>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:180
    pull up is enabled if this function is called.
    Should we purposely implement this side effect?
    */

    /* Get bit position for getting pin ctrl reg */
    uint8_t bit_pos = digitalPinToBitPosition(pin);
    1078:	c1 54       	subi	r28, 0x41	; 65
    107a:	da 44       	sbci	r29, 0x4A	; 74
    107c:	88 81       	ld	r24, Y
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:183

    /* Calculate where pin control register is */
    volatile uint8_t *pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);
    107e:	30 97       	sbiw	r30, 0x00	; 0
    1080:	71 f0       	breq	.+28     	; 0x109e <digitalWrite.part.2+0x72>
    1082:	8f 3f       	cpi	r24, 0xFF	; 255
    1084:	61 f0       	breq	.+24     	; 0x109e <digitalWrite.part.2+0x72>
    1086:	70 96       	adiw	r30, 0x10	; 16
    1088:	e8 0f       	add	r30, r24
    108a:	f1 1d       	adc	r31, r1
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:186

    /* Save system status and disable interrupts */
    uint8_t status = SREG;
    108c:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:187
    cli();
    108e:	f8 94       	cli
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:192

    if (val == LOW)
    {
      /* Disable pullup */
      *pin_ctrl_reg &= ~PORT_PULLUPEN_bm;
    1090:	80 81       	ld	r24, Z
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:189

    /* Save system status and disable interrupts */
    uint8_t status = SREG;
    cli();

    if (val == LOW)
    1092:	11 11       	cpse	r17, r1
    1094:	07 c0       	rjmp	.+14     	; 0x10a4 <digitalWrite.part.2+0x78>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:192
    {
      /* Disable pullup */
      *pin_ctrl_reg &= ~PORT_PULLUPEN_bm;
    1096:	87 7f       	andi	r24, 0xF7	; 247
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:197
    }
    else
    {
      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
    1098:	80 83       	st	Z, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:201
    }

    /* Restore system status */
    SREG = status;
    109a:	9f bf       	out	0x3f, r25	; 63
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:183

    /* Get bit position for getting pin ctrl reg */
    uint8_t bit_pos = digitalPinToBitPosition(pin);

    /* Calculate where pin control register is */
    volatile uint8_t *pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);
    109c:	e6 cf       	rjmp	.-52     	; 0x106a <digitalWrite.part.2+0x3e>
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	e0 e0       	ldi	r30, 0x00	; 0
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:197
      *pin_ctrl_reg &= ~PORT_PULLUPEN_bm;
    }
    else
    {
      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
    10a2:	f4 cf       	rjmp	.-24     	; 0x108c <digitalWrite.part.2+0x60>
    10a4:	88 60       	ori	r24, 0x08	; 8
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:137
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  /* Get bit mask for pin */
  uint8_t bit_mask = digitalPinToBitMask(pin);
    10a6:	f8 cf       	rjmp	.-16     	; 0x1098 <digitalWrite.part.2+0x6c>

000010a8 <digitalWrite>:
digitalWrite():
    10a8:	89 32       	cpi	r24, 0x29	; 41
    10aa:	08 f4       	brcc	.+2      	; 0x10ae <digitalWrite+0x6>
    10ac:	bf cf       	rjmp	.-130    	; 0x102c <digitalWrite.part.2>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:203
    }

    /* Restore system status */
    SREG = status;
  }
}
    10ae:	08 95       	ret

000010b0 <OneButton::OneButton(int, int) [clone .constprop.58]>:
__base_ctor ():
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:15

#include "OneButton.h"

// ----- Initialization and Default Values -----

OneButton::OneButton(int pin, int activeLow)
    10b0:	0f 93       	push	r16
    10b2:	1f 93       	push	r17
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
    10b8:	ec 01       	movw	r28, r24
    10ba:	16 2f       	mov	r17, r22
    10bc:	07 2f       	mov	r16, r23
    10be:	82 e3       	ldi	r24, 0x32	; 50
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	8e 83       	std	Y+6, r24	; 0x06
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:17
{
  pinMode(pin, INPUT);      // sets the MenuPin as input
    10c4:	9f 83       	std	Y+7, r25	; 0x07
    10c6:	60 e0       	ldi	r22, 0x00	; 0
    10c8:	81 2f       	mov	r24, r17
    10ca:	81 df       	rcall	.-254    	; 0xfce <pinMode>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:18
  _pin = pin;
    10cc:	18 83       	st	Y, r17
    10ce:	09 83       	std	Y+1, r16	; 0x01
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:20

  _clickTicks = 600;        // number of millisec that have to pass by before a click is detected.
    10d0:	88 e5       	ldi	r24, 0x58	; 88
    10d2:	92 e0       	ldi	r25, 0x02	; 2
    10d4:	8a 83       	std	Y+2, r24	; 0x02
    10d6:	9b 83       	std	Y+3, r25	; 0x03
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:21
  _pressTicks = 1000;       // number of millisec that have to pass by before a long button press is detected.
    10d8:	88 ee       	ldi	r24, 0xE8	; 232
    10da:	93 e0       	ldi	r25, 0x03	; 3
    10dc:	8c 83       	std	Y+4, r24	; 0x04
    10de:	9d 83       	std	Y+5, r25	; 0x05
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:23
 
  _state = 0; // starting with state 0: waiting for button to be pressed
    10e0:	19 8e       	std	Y+25, r1	; 0x19
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:24
  _isLongPressed = false;  // Keep track of long press state
    10e2:	1a 8e       	std	Y+26, r1	; 0x1a
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:28

  if (activeLow) {
    // button connects ground to the pin when pressed.
    _buttonReleased = HIGH; // notPressed
    10e4:	1c 86       	std	Y+12, r1	; 0x0c
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	88 87       	std	Y+8, r24	; 0x08
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:29
    _buttonPressed = LOW;
    10ec:	99 87       	std	Y+9, r25	; 0x09
    10ee:	1a 86       	std	Y+10, r1	; 0x0a
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:30
    digitalWrite(pin, HIGH);   // turn on pullUp resistor
    10f0:	1b 86       	std	Y+11, r1	; 0x0b
    10f2:	61 e0       	ldi	r22, 0x01	; 1
    10f4:	81 2f       	mov	r24, r17
    10f6:	d8 df       	rcall	.-80     	; 0x10a8 <digitalWrite>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:39
    _buttonReleased = LOW;
    _buttonPressed = HIGH;
  } // if


  _doubleClickFunc = NULL;
    10f8:	1f 86       	std	Y+15, r1	; 0x0f
    10fa:	18 8a       	std	Y+16, r1	; 0x10
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:40
  _pressFunc = NULL;
    10fc:	19 8a       	std	Y+17, r1	; 0x11
    10fe:	1a 8a       	std	Y+18, r1	; 0x12
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:41
  _longPressStartFunc = NULL;
    1100:	1b 8a       	std	Y+19, r1	; 0x13
    1102:	1c 8a       	std	Y+20, r1	; 0x14
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:42
  _longPressStopFunc = NULL;
    1104:	1d 8a       	std	Y+21, r1	; 0x15
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:43
  _duringLongPressFunc = NULL;
    1106:	1e 8a       	std	Y+22, r1	; 0x16
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:44
} // OneButton
    1108:	1f 8a       	std	Y+23, r1	; 0x17
    110a:	18 8e       	std	Y+24, r1	; 0x18
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:195
    digits2[3] = DIG2_4;
}

void Eclass:: cathode_high1()
{ 
    digitalWrite(CA_5, HIGH);
    1110:	1f 91       	pop	r17
    1112:	0f 91       	pop	r16
    1114:	08 95       	ret

00001116 <Eclass::cathode_high1() [clone .constprop.6]>:
cathode_high1():
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:196
    digitalWrite(CA_6, HIGH);
    1116:	61 e0       	ldi	r22, 0x01	; 1
    1118:	8b e0       	ldi	r24, 0x0B	; 11
    111a:	c6 df       	rcall	.-116    	; 0x10a8 <digitalWrite>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:197
    digitalWrite(CA_7, HIGH);
    111c:	61 e0       	ldi	r22, 0x01	; 1
    111e:	8a e0       	ldi	r24, 0x0A	; 10
    1120:	c3 df       	rcall	.-122    	; 0x10a8 <digitalWrite>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:198
    digitalWrite(CA_8, HIGH);
    1122:	61 e0       	ldi	r22, 0x01	; 1
    1124:	89 e0       	ldi	r24, 0x09	; 9
    1126:	c0 df       	rcall	.-128    	; 0x10a8 <digitalWrite>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:203
}

void Eclass:: cathode_high2()
{ 
    digitalWrite(CA_4, HIGH);
    1128:	61 e0       	ldi	r22, 0x01	; 1
    112a:	88 e0       	ldi	r24, 0x08	; 8
    112c:	bd cf       	rjmp	.-134    	; 0x10a8 <digitalWrite>

0000112e <Eclass::cathode_high2() [clone .constprop.4]>:
cathode_high2():
    112e:	61 e0       	ldi	r22, 0x01	; 1
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:204
    digitalWrite(CA_3, HIGH);
    1130:	87 e0       	ldi	r24, 0x07	; 7
    1132:	ba df       	rcall	.-140    	; 0x10a8 <digitalWrite>
    1134:	61 e0       	ldi	r22, 0x01	; 1
    1136:	86 e0       	ldi	r24, 0x06	; 6
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:205
    digitalWrite(CA_2, HIGH);
    1138:	b7 df       	rcall	.-146    	; 0x10a8 <digitalWrite>
    113a:	61 e0       	ldi	r22, 0x01	; 1
    113c:	85 e0       	ldi	r24, 0x05	; 5
    113e:	b4 df       	rcall	.-152    	; 0x10a8 <digitalWrite>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/led.cpp:206
    digitalWrite(CA_1, HIGH);
    1140:	61 e0       	ldi	r22, 0x01	; 1
    1142:	84 e0       	ldi	r24, 0x04	; 4
    1144:	b1 cf       	rjmp	.-158    	; 0x10a8 <digitalWrite>

00001146 <UartClass::begin(unsigned long, unsigned int)>:
begin():
    1146:	af 92       	push	r10
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:180
    return false;
  }
}

void UartClass::begin(unsigned long baud, uint16_t config)
{
    1148:	bf 92       	push	r11
    114a:	cf 92       	push	r12
    114c:	df 92       	push	r13
    114e:	ef 92       	push	r14
    1150:	ff 92       	push	r15
    1152:	0f 93       	push	r16
    1154:	1f 93       	push	r17
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	ec 01       	movw	r28, r24
    115c:	6a 01       	movw	r12, r20
    115e:	7b 01       	movw	r14, r22
    1160:	a2 2e       	mov	r10, r18
    1162:	8d 89       	ldd	r24, Y+21	; 0x15
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:183
  // Make sure no transmissions are ongoing and USART is disabled in case begin() is called by accident
  // without first calling end()
  if (_written)
    1164:	88 23       	and	r24, r24
    1166:	39 f0       	breq	.+14     	; 0x1176 <UartClass::begin(unsigned long, unsigned int)+0x30>
    1168:	e8 81       	ld	r30, Y
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:185
  {
    this->end();
    116a:	f9 81       	ldd	r31, Y+1	; 0x01
    116c:	06 88       	ldd	r0, Z+22	; 0x16
    116e:	f7 89       	ldd	r31, Z+23	; 0x17
    1170:	e0 2d       	mov	r30, r0
    1172:	ce 01       	movw	r24, r28
    1174:	09 95       	icall
    1176:	0c 89       	ldd	r16, Y+20	; 0x14
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:188
  }

  struct UartPinSet *set = &_hw_set[_pin_set];
    1178:	10 e0       	ldi	r17, 0x00	; 0
    117a:	bf b6       	in	r11, 0x3f	; 63
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:193

  int32_t baud_setting = 0;

  //Make sure global interrupts are disabled during initialization
  uint8_t oldSREG = SREG;
    117c:	f8 94       	cli
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:194
  cli();
    117e:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:196

  baud_setting = (((8 * F_CPU) / baud) + 1) / 2;
    1180:	70 e2       	ldi	r23, 0x20	; 32
    1182:	81 ea       	ldi	r24, 0xA1	; 161
    1184:	97 e0       	ldi	r25, 0x07	; 7
    1186:	a7 01       	movw	r20, r14
    1188:	96 01       	movw	r18, r12
    118a:	0e 94 2e 3a 	call	0x745c	; 0x745c <__udivmodsi4>
    118e:	69 01       	movw	r12, r18
    1190:	7a 01       	movw	r14, r20
    1192:	8f ef       	ldi	r24, 0xFF	; 255
    1194:	c8 1a       	sub	r12, r24
    1196:	d8 0a       	sbc	r13, r24
    1198:	e8 0a       	sbc	r14, r24
    119a:	f8 0a       	sbc	r15, r24
    119c:	f6 94       	lsr	r15
    119e:	e7 94       	ror	r14
    11a0:	d7 94       	ror	r13
    11a2:	c7 94       	ror	r12
    11a4:	ec 85       	ldd	r30, Y+12	; 0x0c
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:198
  // Disable CLK2X
  (*_hwserial_module).CTRLB &= (~USART_RXMODE_CLK2X_gc);
    11a6:	fd 85       	ldd	r31, Y+13	; 0x0d
    11a8:	86 81       	ldd	r24, Z+6	; 0x06
    11aa:	8d 7f       	andi	r24, 0xFD	; 253
    11ac:	86 83       	std	Z+6, r24	; 0x06
    11ae:	ec 85       	ldd	r30, Y+12	; 0x0c
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:199
  (*_hwserial_module).CTRLB |= USART_RXMODE_NORMAL_gc;
    11b0:	fd 85       	ldd	r31, Y+13	; 0x0d
    11b2:	86 81       	ldd	r24, Z+6	; 0x06
    11b4:	86 83       	std	Z+6, r24	; 0x06
    11b6:	1d 8a       	std	Y+21, r1	; 0x15
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:201

  _written = false;
    11b8:	a0 91 23 11 	lds	r26, 0x1123	; 0x801123 <__TEXT_REGION_LENGTH__+0x7f5123>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:210
// Use error compensation if internal oscillator is used
#if !defined(USE_EXTERNAL_OSCILLATOR)
#if F_CPU == 20000000L
  sigrow_val = SIGROW.OSC20ERR5V;
#else
  sigrow_val = SIGROW.OSC16ERR5V;
    11bc:	0a 2e       	mov	r0, r26
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:214
#endif
#endif

  baud_setting += (baud_setting * sigrow_val) / 1024;
    11be:	00 0c       	add	r0, r0
    11c0:	bb 0b       	sbc	r27, r27
    11c2:	a7 01       	movw	r20, r14
    11c4:	96 01       	movw	r18, r12
    11c6:	0e 94 82 3a 	call	0x7504	; 0x7504 <__mulshisi3>
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	34 e0       	ldi	r19, 0x04	; 4
    11ce:	40 e0       	ldi	r20, 0x00	; 0
    11d0:	50 e0       	ldi	r21, 0x00	; 0
    11d2:	0e 94 50 3a 	call	0x74a0	; 0x74a0 <__divmodsi4>
    11d6:	ec 85       	ldd	r30, Y+12	; 0x0c
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:217

  // assign the baud_setting, a.k.a. BAUD (USART Baud Rate Register)
  (*_hwserial_module).BAUD = (uint16_t)baud_setting;
    11d8:	fd 85       	ldd	r31, Y+13	; 0x0d
    11da:	c2 0e       	add	r12, r18
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:214
#else
  sigrow_val = SIGROW.OSC16ERR5V;
#endif
#endif

  baud_setting += (baud_setting * sigrow_val) / 1024;
    11dc:	d3 1e       	adc	r13, r19
    11de:	e4 1e       	adc	r14, r20
    11e0:	f5 1e       	adc	r15, r21
    11e2:	c0 86       	std	Z+8, r12	; 0x08
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:217

  // assign the baud_setting, a.k.a. BAUD (USART Baud Rate Register)
  (*_hwserial_module).BAUD = (uint16_t)baud_setting;
    11e4:	d1 86       	std	Z+9, r13	; 0x09
    11e6:	ec 85       	ldd	r30, Y+12	; 0x0c
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:220

  // Set USART mode of operation
  (*_hwserial_module).CTRLC = config;
    11e8:	fd 85       	ldd	r31, Y+13	; 0x0d
    11ea:	a7 82       	std	Z+7, r10	; 0x07
    11ec:	ec 85       	ldd	r30, Y+12	; 0x0c
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:223

  // Enable transmitter and receiver
  (*_hwserial_module).CTRLB |= (USART_RXEN_bm | USART_TXEN_bm);
    11ee:	fd 85       	ldd	r31, Y+13	; 0x0d
    11f0:	86 81       	ldd	r24, Z+6	; 0x06
    11f2:	80 6c       	ori	r24, 0xC0	; 192
    11f4:	86 83       	std	Z+6, r24	; 0x06
    11f6:	ec 85       	ldd	r30, Y+12	; 0x0c
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:225

  (*_hwserial_module).CTRLA |= USART_RXCIE_bm;
    11f8:	fd 85       	ldd	r31, Y+13	; 0x0d
    11fa:	85 81       	ldd	r24, Z+5	; 0x05
    11fc:	80 68       	ori	r24, 0x80	; 128
    11fe:	85 83       	std	Z+5, r24	; 0x05
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:228

  // Let PORTMUX point to alternative UART pins as requested
  PORTMUX.USARTROUTEA = set->mux | (PORTMUX.USARTROUTEA & ~_hw_set[1].mux);
    1200:	90 91 e2 05 	lds	r25, 0x05E2	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f45e2>
    1204:	8b 89       	ldd	r24, Y+19	; 0x13
    1206:	80 95       	com	r24
    1208:	89 23       	and	r24, r25
    120a:	98 01       	movw	r18, r16
    120c:	22 0f       	add	r18, r18
    120e:	33 1f       	adc	r19, r19
    1210:	02 0f       	add	r16, r18
    1212:	13 1f       	adc	r17, r19
    1214:	c0 0f       	add	r28, r16
    1216:	d1 1f       	adc	r29, r17
    1218:	98 89       	ldd	r25, Y+16	; 0x10
    121a:	89 2b       	or	r24, r25
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:231

  // Set pin state for swapped UART pins
  pinMode(set->rx_pin, INPUT_PULLUP);
    121c:	80 93 e2 05 	sts	0x05E2, r24	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f45e2>
    1220:	62 e0       	ldi	r22, 0x02	; 2
    1222:	8e 85       	ldd	r24, Y+14	; 0x0e
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:232
  digitalWrite(set->tx_pin, HIGH);
    1224:	d4 de       	rcall	.-600    	; 0xfce <pinMode>
    1226:	61 e0       	ldi	r22, 0x01	; 1
    1228:	8f 85       	ldd	r24, Y+15	; 0x0f
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:233
  pinMode(set->tx_pin, OUTPUT);
    122a:	3e df       	rcall	.-388    	; 0x10a8 <digitalWrite>
    122c:	61 e0       	ldi	r22, 0x01	; 1
    122e:	8f 85       	ldd	r24, Y+15	; 0x0f
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:236

  // Restore SREG content
  SREG = oldSREG;
    1230:	ce de       	rcall	.-612    	; 0xfce <pinMode>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:237
}
    1232:	bf be       	out	0x3f, r11	; 63
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	1f 91       	pop	r17
    123a:	0f 91       	pop	r16
    123c:	ff 90       	pop	r15
    123e:	ef 90       	pop	r14
    1240:	df 90       	pop	r13
    1242:	cf 90       	pop	r12
    1244:	bf 90       	pop	r11
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Procss.cpp:1252
            break;                 
      }      
  }  
}

void Pclass :: ALL_LED_OFF()
    1246:	af 90       	pop	r10
    1248:	08 95       	ret

0000124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>:
digitalWrite():
    124a:	61 e0       	ldi	r22, 0x01	; 1
    124c:	8a e1       	ldi	r24, 0x1A	; 26
    124e:	ee de       	rcall	.-548    	; 0x102c <digitalWrite.part.2>
    1250:	61 e0       	ldi	r22, 0x01	; 1
    1252:	8d e1       	ldi	r24, 0x1D	; 29
    1254:	eb de       	rcall	.-554    	; 0x102c <digitalWrite.part.2>
    1256:	61 e0       	ldi	r22, 0x01	; 1
    1258:	8c e1       	ldi	r24, 0x1C	; 28
    125a:	e8 de       	rcall	.-560    	; 0x102c <digitalWrite.part.2>
    125c:	61 e0       	ldi	r22, 0x01	; 1
    125e:	8b e1       	ldi	r24, 0x1B	; 27
    1260:	e5 ce       	rjmp	.-566    	; 0x102c <digitalWrite.part.2>

00001262 <digitalRead.part.3>:
digitalRead.part.3():
    1262:	0f 93       	push	r16
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:227
    vport->OUT &= ~mask;
  else // CHANGE
    vport->IN = mask;
}

uint8_t digitalRead(uint8_t pin)
    1264:	1f 93       	push	r17
    1266:	cf 93       	push	r28
    1268:	08 2f       	mov	r16, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:230
{
  /* Get bit mask and check valid pin */
  uint8_t bit_mask = digitalPinToBitMask(pin);
    126a:	10 e0       	ldi	r17, 0x00	; 0
    126c:	f8 01       	movw	r30, r16
    126e:	ef 5e       	subi	r30, 0xEF	; 239
    1270:	f9 44       	sbci	r31, 0x49	; 73
    1272:	c0 81       	ld	r28, Z
    1274:	cf 3f       	cpi	r28, 0xFF	; 255
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:231
  if (bit_mask == NOT_A_PIN)
    1276:	81 f0       	breq	.+32     	; 0x1298 <digitalRead.part.3+0x36>
turnOffPWM():
    1278:	89 32       	cpi	r24, 0x29	; 41
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:97
static void turnOffPWM(uint8_t pin)
{
  /* Actually turn off compare channel, not the timer */

  /* Get pin's timer */
  uint8_t timer = digitalPinToTimer(pin);
    127a:	08 f4       	brcc	.+2      	; 0x127e <digitalRead.part.3+0x1c>
    127c:	ac de       	rcall	.-680    	; 0xfd6 <turnOffPWM.part.0>
digitalRead.part.3():
    127e:	f8 01       	movw	r30, r16
    1280:	e8 51       	subi	r30, 0x18	; 24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:239
  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  turnOffPWM(pin);

  /* Get port and check valid port */
  PORT_t *port = digitalPinToPortStruct(pin);
    1282:	fa 44       	sbci	r31, 0x4A	; 74
    1284:	e0 81       	ld	r30, Z
    1286:	80 e2       	ldi	r24, 0x20	; 32
    1288:	e8 9f       	mul	r30, r24
    128a:	f0 01       	movw	r30, r0
    128c:	11 24       	eor	r1, r1
    128e:	fc 5f       	subi	r31, 0xFC	; 252
    1290:	80 85       	ldd	r24, Z+8	; 0x08
    1292:	c8 23       	and	r28, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:242

  /* Read pin value from PORTx.IN register */
  if (port->IN & bit_mask)
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	09 f4       	brne	.+2      	; 0x129a <digitalRead.part.3+0x38>
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	cf 91       	pop	r28
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:232
uint8_t digitalRead(uint8_t pin)
{
  /* Get bit mask and check valid pin */
  uint8_t bit_mask = digitalPinToBitMask(pin);
  if (bit_mask == NOT_A_PIN)
    return LOW;
    129c:	1f 91       	pop	r17
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:248
    return HIGH;
  else
    return LOW;

  return LOW;
}
    129e:	0f 91       	pop	r16
    12a0:	08 95       	ret

000012a2 <micros>:
micros():
    12a2:	8f b7       	in	r24, 0x3f	; 63
    12a4:	f8 94       	cli
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:103
{
  uint32_t m;
  uint16_t t;

  /* Save current state and disable interrupts */
  uint8_t status = SREG;
    12a6:	20 91 39 28 	lds	r18, 0x2839	; 0x802839 <timer_millis>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:107
  cli();

  /* Get current number of millis (i.e. overflows) and timer count */
  m = timer_millis;
    12aa:	30 91 3a 28 	lds	r19, 0x283A	; 0x80283a <timer_millis+0x1>
    12ae:	40 91 3b 28 	lds	r20, 0x283B	; 0x80283b <timer_millis+0x2>
    12b2:	50 91 3c 28 	lds	r21, 0x283C	; 0x80283c <timer_millis+0x3>
    12b6:	e0 91 aa 0a 	lds	r30, 0x0AAA	; 0x800aaa <__TEXT_REGION_LENGTH__+0x7f4aaa>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:108
  t = _timer->CNT;
    12ba:	f0 91 ab 0a 	lds	r31, 0x0AAB	; 0x800aab <__TEXT_REGION_LENGTH__+0x7f4aab>
    12be:	90 91 a6 0a 	lds	r25, 0x0AA6	; 0x800aa6 <__TEXT_REGION_LENGTH__+0x7f4aa6>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:112

  /* If the timer overflow flag is raised, we just missed it,
  increment to account for it, & read new ticks */
  if (_timer->INTFLAGS & TCB_CAPT_bm)
    12c2:	90 ff       	sbrs	r25, 0
    12c4:	08 c0       	rjmp	.+16     	; 0x12d6 <micros+0x34>
    12c6:	2f 5f       	subi	r18, 0xFF	; 255
    12c8:	3f 4f       	sbci	r19, 0xFF	; 255
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:114
  {
    m++;
    12ca:	4f 4f       	sbci	r20, 0xFF	; 255
    12cc:	5f 4f       	sbci	r21, 0xFF	; 255
    12ce:	e0 91 aa 0a 	lds	r30, 0x0AAA	; 0x800aaa <__TEXT_REGION_LENGTH__+0x7f4aaa>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:115
    t = _timer->CNT;
    12d2:	f0 91 ab 0a 	lds	r31, 0x0AAB	; 0x800aab <__TEXT_REGION_LENGTH__+0x7f4aab>
    12d6:	8f bf       	out	0x3f, r24	; 63
    12d8:	a8 ee       	ldi	r26, 0xE8	; 232
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:119
  }

  // Restore SREG
  SREG = status;
    12da:	b3 e0       	ldi	r27, 0x03	; 3
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:125

#if (F_CPU == 20000000L)
  t = t >> 4;
  return m * 1000 + (t - (t >> 2) + (t >> 4) - (t >> 6));
#elif (F_CPU == 16000000L)
  return m * 1000 + (t >> 4);
    12dc:	0e 94 78 3a 	call	0x74f0	; 0x74f0 <__muluhisi3>
    12e0:	24 e0       	ldi	r18, 0x04	; 4
    12e2:	f6 95       	lsr	r31
    12e4:	e7 95       	ror	r30
    12e6:	2a 95       	dec	r18
    12e8:	e1 f7       	brne	.-8      	; 0x12e2 <micros+0x40>
    12ea:	6e 0f       	add	r22, r30
    12ec:	7f 1f       	adc	r23, r31
    12ee:	81 1d       	adc	r24, r1
    12f0:	91 1d       	adc	r25, r1
    12f2:	08 95       	ret

000012f4 <millis>:
millis():
    12f4:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:143
#elif (F_CPU == 1000000L)
  return m * 1000 + t;
#else
  return 0;
#endif
}
    12f6:	f8 94       	cli
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:87
{
  unsigned long m;

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer_millis)
  uint8_t status = SREG;
    12f8:	60 91 39 28 	lds	r22, 0x2839	; 0x802839 <timer_millis>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:90
  cli();

  m = timer_millis;
    12fc:	70 91 3a 28 	lds	r23, 0x283A	; 0x80283a <timer_millis+0x1>
    1300:	80 91 3b 28 	lds	r24, 0x283B	; 0x80283b <timer_millis+0x2>
    1304:	90 91 3c 28 	lds	r25, 0x283C	; 0x80283c <timer_millis+0x3>
    1308:	2f bf       	out	0x3f, r18	; 63
    130a:	08 95       	ret

0000130c <Lclass::PID_callingg() [clone .constprop.38]>:
PID_callingg():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:92

  SREG = status;
    130c:	0f 93       	push	r16
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:95

  return m;
}
    130e:	1f 93       	push	r17
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Pid.cpp:35
void PID_RUN()
{
   myPID.Compute();  
}

void Lclass ::PID_callingg()
    1310:	80 91 50 29 	lds	r24, 0x2950	; 0x802950 <LONG_PRESS>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Pid.cpp:37
{
  if(!LONG_PRESS)    PID_INPUT = TEMP_DEG;
    1314:	81 11       	cpse	r24, r1
    1316:	80 c0       	rjmp	.+256    	; 0x1418 <Lclass::PID_callingg() [clone .constprop.38]+0x10c>
    1318:	80 91 f2 28 	lds	r24, 0x28F2	; 0x8028f2 <TEMP_DEG>
    131c:	90 91 f3 28 	lds	r25, 0x28F3	; 0x8028f3 <TEMP_DEG+0x1>
    1320:	a0 91 f4 28 	lds	r26, 0x28F4	; 0x8028f4 <TEMP_DEG+0x2>
    1324:	b0 91 f5 28 	lds	r27, 0x28F5	; 0x8028f5 <TEMP_DEG+0x3>
    1328:	80 93 f6 29 	sts	0x29F6, r24	; 0x8029f6 <PID_INPUT>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Pid.cpp:38
  else               PID_INPUT = TEMP_DEG_RAW;
    132c:	90 93 f7 29 	sts	0x29F7, r25	; 0x8029f7 <PID_INPUT+0x1>
    1330:	a0 93 f8 29 	sts	0x29F8, r26	; 0x8029f8 <PID_INPUT+0x2>
    1334:	b0 93 f9 29 	sts	0x29F9, r27	; 0x8029f9 <PID_INPUT+0x3>
    1338:	80 91 ed 28 	lds	r24, 0x28ED	; 0x8028ed <select_heating_type>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Pid.cpp:43


//-------------------------------------------------------Slow_Heating-------------------------------------------------------------//

if(select_heating_type==0)
    133c:	81 11       	cpse	r24, r1
    133e:	8b c0       	rjmp	.+278    	; 0x1456 <Lclass::PID_callingg() [clone .constprop.38]+0x14a>
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	90 e0       	ldi	r25, 0x00	; 0
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Pid.cpp:48
{
//        Serial2.println("Product Slow");
        if(PID_SETPOINT < 51)
          {
            Kp= 28; Ki=0.010; Kd=700;  
    1344:	a0 ee       	ldi	r26, 0xE0	; 224
    1346:	b1 e4       	ldi	r27, 0x41	; 65
    1348:	80 93 0b 28 	sts	0x280B, r24	; 0x80280b <Kp>
    134c:	90 93 0c 28 	sts	0x280C, r25	; 0x80280c <Kp+0x1>
    1350:	a0 93 0d 28 	sts	0x280D, r26	; 0x80280d <Kp+0x2>
    1354:	b0 93 0e 28 	sts	0x280E, r27	; 0x80280e <Kp+0x3>
    1358:	8a e0       	ldi	r24, 0x0A	; 10
    135a:	97 ed       	ldi	r25, 0xD7	; 215
    135c:	a3 e2       	ldi	r26, 0x23	; 35
    135e:	bc e3       	ldi	r27, 0x3C	; 60
    1360:	80 93 0f 28 	sts	0x280F, r24	; 0x80280f <Ki>
    1364:	90 93 10 28 	sts	0x2810, r25	; 0x802810 <Ki+0x1>
    1368:	a0 93 11 28 	sts	0x2811, r26	; 0x802811 <Ki+0x2>
    136c:	b0 93 12 28 	sts	0x2812, r27	; 0x802812 <Ki+0x3>
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	af e2       	ldi	r26, 0x2F	; 47
    1376:	b4 e4       	ldi	r27, 0x44	; 68
    1378:	80 93 13 28 	sts	0x2813, r24	; 0x802813 <Kd>
    137c:	90 93 14 28 	sts	0x2814, r25	; 0x802814 <Kd+0x1>
    1380:	a0 93 15 28 	sts	0x2815, r26	; 0x802815 <Kd+0x2>
    1384:	b0 93 16 28 	sts	0x2816, r27	; 0x802816 <Kd+0x3>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Pid.cpp:49
            myPID.SetTunings(Kp, Ki, Kd);    
    1388:	60 e0       	ldi	r22, 0x00	; 0
    138a:	70 e0       	ldi	r23, 0x00	; 0
    138c:	80 ee       	ldi	r24, 0xE0	; 224
    138e:	91 e4       	ldi	r25, 0x41	; 65
    1390:	16 da       	rcall	.-3028   	; 0x7be <PID::SetTunings(double, double, double) [clone .constprop.39]>
    1392:	b0 df       	rcall	.-160    	; 0x12f4 <millis>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Pid.cpp:57
          {
             Kp= 28; Ki=0.010; Kd=700;  
            myPID.SetTunings(Kp, Ki, Kd);        
          }   
          
          if (millis() - WINDOW_START_TIME > WINDOW_SIZE)
    1394:	00 91 e9 28 	lds	r16, 0x28E9	; 0x8028e9 <WINDOW_START_TIME>
    1398:	10 91 ea 28 	lds	r17, 0x28EA	; 0x8028ea <WINDOW_START_TIME+0x1>
    139c:	20 91 eb 28 	lds	r18, 0x28EB	; 0x8028eb <WINDOW_START_TIME+0x2>
    13a0:	30 91 ec 28 	lds	r19, 0x28EC	; 0x8028ec <WINDOW_START_TIME+0x3>
    13a4:	ab 01       	movw	r20, r22
    13a6:	bc 01       	movw	r22, r24
    13a8:	40 1b       	sub	r20, r16
    13aa:	51 0b       	sbc	r21, r17
    13ac:	62 0b       	sbc	r22, r18
    13ae:	73 0b       	sbc	r23, r19
    13b0:	49 3e       	cpi	r20, 0xE9	; 233
    13b2:	53 40       	sbci	r21, 0x03	; 3
    13b4:	61 05       	cpc	r22, r1
    13b6:	71 05       	cpc	r23, r1
    13b8:	70 f0       	brcs	.+28     	; 0x13d6 <Lclass::PID_callingg() [clone .constprop.38]+0xca>
    13ba:	d9 01       	movw	r26, r18
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Pid.cpp:58
                         WINDOW_START_TIME += WINDOW_SIZE;
    13bc:	c8 01       	movw	r24, r16
    13be:	88 51       	subi	r24, 0x18	; 24
    13c0:	9c 4f       	sbci	r25, 0xFC	; 252
    13c2:	af 4f       	sbci	r26, 0xFF	; 255
    13c4:	bf 4f       	sbci	r27, 0xFF	; 255
    13c6:	80 93 e9 28 	sts	0x28E9, r24	; 0x8028e9 <WINDOW_START_TIME>
    13ca:	90 93 ea 28 	sts	0x28EA, r25	; 0x8028ea <WINDOW_START_TIME+0x1>
    13ce:	a0 93 eb 28 	sts	0x28EB, r26	; 0x8028eb <WINDOW_START_TIME+0x2>
    13d2:	b0 93 ec 28 	sts	0x28EC, r27	; 0x8028ec <WINDOW_START_TIME+0x3>
    13d6:	8e df       	rcall	.-228    	; 0x12f4 <millis>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Pid.cpp:62
        
        //  /*        
         
          if (PID_OUTPUT < millis() - WINDOW_START_TIME)         digitalWrite(HEATER, LOW);    
    13d8:	00 91 e9 28 	lds	r16, 0x28E9	; 0x8028e9 <WINDOW_START_TIME>
    13dc:	10 91 ea 28 	lds	r17, 0x28EA	; 0x8028ea <WINDOW_START_TIME+0x1>
    13e0:	20 91 eb 28 	lds	r18, 0x28EB	; 0x8028eb <WINDOW_START_TIME+0x2>
    13e4:	30 91 ec 28 	lds	r19, 0x28EC	; 0x8028ec <WINDOW_START_TIME+0x3>
    13e8:	60 1b       	sub	r22, r16
    13ea:	71 0b       	sbc	r23, r17
    13ec:	82 0b       	sbc	r24, r18
    13ee:	93 0b       	sbc	r25, r19
    13f0:	0e 94 02 39 	call	0x7204	; 0x7204 <__floatunsisf>
    13f4:	20 91 f2 29 	lds	r18, 0x29F2	; 0x8029f2 <PID_OUTPUT>
    13f8:	30 91 f3 29 	lds	r19, 0x29F3	; 0x8029f3 <PID_OUTPUT+0x1>
    13fc:	40 91 f4 29 	lds	r20, 0x29F4	; 0x8029f4 <PID_OUTPUT+0x2>
    1400:	50 91 f5 29 	lds	r21, 0x29F5	; 0x8029f5 <PID_OUTPUT+0x3>
    1404:	0e 94 b4 39 	call	0x7368	; 0x7368 <__gesf2>
    1408:	18 16       	cp	r1, r24
    140a:	7c f4       	brge	.+30     	; 0x142a <Lclass::PID_callingg() [clone .constprop.38]+0x11e>
digitalWrite():
    140c:	60 e0       	ldi	r22, 0x00	; 0
    140e:	88 e1       	ldi	r24, 0x18	; 24
    1410:	0d de       	rcall	.-998    	; 0x102c <digitalWrite.part.2>
PID_callingg():
    1412:	1f 91       	pop	r17
    1414:	0f 91       	pop	r16
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Pid.cpp:100
          }
  }
  
//  */
//  digitalWrite(HEATER, HIGH);  //Check SSR Fail Error only validation
}
    1416:	08 95       	ret
    1418:	80 91 ee 28 	lds	r24, 0x28EE	; 0x8028ee <TEMP_DEG_RAW>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Pid.cpp:38
}

void Lclass ::PID_callingg()
{
  if(!LONG_PRESS)    PID_INPUT = TEMP_DEG;
  else               PID_INPUT = TEMP_DEG_RAW;
    141c:	90 91 ef 28 	lds	r25, 0x28EF	; 0x8028ef <TEMP_DEG_RAW+0x1>
    1420:	a0 91 f0 28 	lds	r26, 0x28F0	; 0x8028f0 <TEMP_DEG_RAW+0x2>
    1424:	b0 91 f1 28 	lds	r27, 0x28F1	; 0x8028f1 <TEMP_DEG_RAW+0x3>
    1428:	7f cf       	rjmp	.-258    	; 0x1328 <Lclass::PID_callingg() [clone .constprop.38]+0x1c>
    142a:	20 91 ee 29 	lds	r18, 0x29EE	; 0x8029ee <PID_SETPOINT>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Pid.cpp:65
        //  /*        
         
          if (PID_OUTPUT < millis() - WINDOW_START_TIME)         digitalWrite(HEATER, LOW);    
          else 
          {
            if(PID_INPUT >= (float(PID_SETPOINT)))               digitalWrite(HEATER, LOW);    
    142e:	30 91 ef 29 	lds	r19, 0x29EF	; 0x8029ef <PID_SETPOINT+0x1>
    1432:	40 91 f0 29 	lds	r20, 0x29F0	; 0x8029f0 <PID_SETPOINT+0x2>
    1436:	50 91 f1 29 	lds	r21, 0x29F1	; 0x8029f1 <PID_SETPOINT+0x3>
    143a:	60 91 f6 29 	lds	r22, 0x29F6	; 0x8029f6 <PID_INPUT>
    143e:	70 91 f7 29 	lds	r23, 0x29F7	; 0x8029f7 <PID_INPUT+0x1>
    1442:	80 91 f8 29 	lds	r24, 0x29F8	; 0x8029f8 <PID_INPUT+0x2>
    1446:	90 91 f9 29 	lds	r25, 0x29F9	; 0x8029f9 <PID_INPUT+0x3>
    144a:	0e 94 b4 39 	call	0x7368	; 0x7368 <__gesf2>
    144e:	87 ff       	sbrs	r24, 7
    1450:	dd cf       	rjmp	.-70     	; 0x140c <Lclass::PID_callingg() [clone .constprop.38]+0x100>
digitalWrite():
    1452:	61 e0       	ldi	r22, 0x01	; 1
    1454:	dc cf       	rjmp	.-72     	; 0x140e <Lclass::PID_callingg() [clone .constprop.38]+0x102>
PID_callingg():
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	90 e0       	ldi	r25, 0x00	; 0
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Pid.cpp:76
 
  {
//          Serial2.println("Product Fast");
            if(PID_SETPOINT < 51)
          {
            Kp= 45; Ki=0.010; Kd=700;  
    145a:	a4 e3       	ldi	r26, 0x34	; 52
    145c:	b2 e4       	ldi	r27, 0x42	; 66
    145e:	80 93 0b 28 	sts	0x280B, r24	; 0x80280b <Kp>
    1462:	90 93 0c 28 	sts	0x280C, r25	; 0x80280c <Kp+0x1>
    1466:	a0 93 0d 28 	sts	0x280D, r26	; 0x80280d <Kp+0x2>
    146a:	b0 93 0e 28 	sts	0x280E, r27	; 0x80280e <Kp+0x3>
    146e:	8a e0       	ldi	r24, 0x0A	; 10
    1470:	97 ed       	ldi	r25, 0xD7	; 215
    1472:	a3 e2       	ldi	r26, 0x23	; 35
    1474:	bc e3       	ldi	r27, 0x3C	; 60
    1476:	80 93 0f 28 	sts	0x280F, r24	; 0x80280f <Ki>
    147a:	90 93 10 28 	sts	0x2810, r25	; 0x802810 <Ki+0x1>
    147e:	a0 93 11 28 	sts	0x2811, r26	; 0x802811 <Ki+0x2>
    1482:	b0 93 12 28 	sts	0x2812, r27	; 0x802812 <Ki+0x3>
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	af e2       	ldi	r26, 0x2F	; 47
    148c:	b4 e4       	ldi	r27, 0x44	; 68
    148e:	80 93 13 28 	sts	0x2813, r24	; 0x802813 <Kd>
    1492:	90 93 14 28 	sts	0x2814, r25	; 0x802814 <Kd+0x1>
    1496:	a0 93 15 28 	sts	0x2815, r26	; 0x802815 <Kd+0x2>
    149a:	b0 93 16 28 	sts	0x2816, r27	; 0x802816 <Kd+0x3>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Pid.cpp:77
            myPID.SetTunings(Kp, Ki, Kd);    
    149e:	60 e0       	ldi	r22, 0x00	; 0
    14a0:	70 e0       	ldi	r23, 0x00	; 0
    14a2:	84 e3       	ldi	r24, 0x34	; 52
    14a4:	92 e4       	ldi	r25, 0x42	; 66
    14a6:	8b d9       	rcall	.-3306   	; 0x7be <PID::SetTunings(double, double, double) [clone .constprop.39]>
    14a8:	25 df       	rcall	.-438    	; 0x12f4 <millis>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Pid.cpp:85
          {
            Kp= 45; Ki=0.010; Kd=700;  
            myPID.SetTunings(Kp, Ki, Kd);        
          }   
          
          if (millis() - WINDOW_START_TIME > WINDOW_SIZE)
    14aa:	00 91 e9 28 	lds	r16, 0x28E9	; 0x8028e9 <WINDOW_START_TIME>
    14ae:	10 91 ea 28 	lds	r17, 0x28EA	; 0x8028ea <WINDOW_START_TIME+0x1>
    14b2:	20 91 eb 28 	lds	r18, 0x28EB	; 0x8028eb <WINDOW_START_TIME+0x2>
    14b6:	30 91 ec 28 	lds	r19, 0x28EC	; 0x8028ec <WINDOW_START_TIME+0x3>
    14ba:	ab 01       	movw	r20, r22
    14bc:	bc 01       	movw	r22, r24
    14be:	40 1b       	sub	r20, r16
    14c0:	51 0b       	sbc	r21, r17
    14c2:	62 0b       	sbc	r22, r18
    14c4:	73 0b       	sbc	r23, r19
    14c6:	49 3e       	cpi	r20, 0xE9	; 233
    14c8:	53 40       	sbci	r21, 0x03	; 3
    14ca:	61 05       	cpc	r22, r1
    14cc:	71 05       	cpc	r23, r1
    14ce:	70 f0       	brcs	.+28     	; 0x14ec <Lclass::PID_callingg() [clone .constprop.38]+0x1e0>
    14d0:	d9 01       	movw	r26, r18
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Pid.cpp:86
                         WINDOW_START_TIME += WINDOW_SIZE;
    14d2:	c8 01       	movw	r24, r16
    14d4:	88 51       	subi	r24, 0x18	; 24
    14d6:	9c 4f       	sbci	r25, 0xFC	; 252
    14d8:	af 4f       	sbci	r26, 0xFF	; 255
    14da:	bf 4f       	sbci	r27, 0xFF	; 255
    14dc:	80 93 e9 28 	sts	0x28E9, r24	; 0x8028e9 <WINDOW_START_TIME>
    14e0:	90 93 ea 28 	sts	0x28EA, r25	; 0x8028ea <WINDOW_START_TIME+0x1>
    14e4:	a0 93 eb 28 	sts	0x28EB, r26	; 0x8028eb <WINDOW_START_TIME+0x2>
    14e8:	b0 93 ec 28 	sts	0x28EC, r27	; 0x8028ec <WINDOW_START_TIME+0x3>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Pid.cpp:90
        
        //  /*        
         
          if (PID_OUTPUT < millis() - WINDOW_START_TIME)         digitalWrite(HEATER, LOW);    
    14ec:	03 df       	rcall	.-506    	; 0x12f4 <millis>
    14ee:	00 91 e9 28 	lds	r16, 0x28E9	; 0x8028e9 <WINDOW_START_TIME>
    14f2:	10 91 ea 28 	lds	r17, 0x28EA	; 0x8028ea <WINDOW_START_TIME+0x1>
    14f6:	20 91 eb 28 	lds	r18, 0x28EB	; 0x8028eb <WINDOW_START_TIME+0x2>
    14fa:	30 91 ec 28 	lds	r19, 0x28EC	; 0x8028ec <WINDOW_START_TIME+0x3>
    14fe:	60 1b       	sub	r22, r16
    1500:	71 0b       	sbc	r23, r17
    1502:	82 0b       	sbc	r24, r18
    1504:	93 0b       	sbc	r25, r19
    1506:	0e 94 02 39 	call	0x7204	; 0x7204 <__floatunsisf>
    150a:	20 91 f2 29 	lds	r18, 0x29F2	; 0x8029f2 <PID_OUTPUT>
    150e:	30 91 f3 29 	lds	r19, 0x29F3	; 0x8029f3 <PID_OUTPUT+0x1>
    1512:	40 91 f4 29 	lds	r20, 0x29F4	; 0x8029f4 <PID_OUTPUT+0x2>
    1516:	50 91 f5 29 	lds	r21, 0x29F5	; 0x8029f5 <PID_OUTPUT+0x3>
    151a:	0e 94 b4 39 	call	0x7368	; 0x7368 <__gesf2>
    151e:	18 16       	cp	r1, r24
    1520:	2c f4       	brge	.+10     	; 0x152c <Lclass::PID_callingg() [clone .constprop.38]+0x220>
digitalWrite():
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	88 e1       	ldi	r24, 0x18	; 24
PID_callingg():
    1526:	1f 91       	pop	r17
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Pid.cpp:100
          }
  }
  
//  */
//  digitalWrite(HEATER, HIGH);  //Check SSR Fail Error only validation
}
    1528:	0f 91       	pop	r16
digitalWrite():
    152a:	80 cd       	rjmp	.-1280   	; 0x102c <digitalWrite.part.2>
PID_callingg():
    152c:	20 91 ee 29 	lds	r18, 0x29EE	; 0x8029ee <PID_SETPOINT>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Pid.cpp:93
        //  /*        
         
          if (PID_OUTPUT < millis() - WINDOW_START_TIME)         digitalWrite(HEATER, LOW);    
          else 
          {
            if(PID_INPUT >= (float(PID_SETPOINT)))               digitalWrite(HEATER, LOW);    
    1530:	30 91 ef 29 	lds	r19, 0x29EF	; 0x8029ef <PID_SETPOINT+0x1>
    1534:	40 91 f0 29 	lds	r20, 0x29F0	; 0x8029f0 <PID_SETPOINT+0x2>
    1538:	50 91 f1 29 	lds	r21, 0x29F1	; 0x8029f1 <PID_SETPOINT+0x3>
    153c:	60 91 f6 29 	lds	r22, 0x29F6	; 0x8029f6 <PID_INPUT>
    1540:	70 91 f7 29 	lds	r23, 0x29F7	; 0x8029f7 <PID_INPUT+0x1>
    1544:	80 91 f8 29 	lds	r24, 0x29F8	; 0x8029f8 <PID_INPUT+0x2>
    1548:	90 91 f9 29 	lds	r25, 0x29F9	; 0x8029f9 <PID_INPUT+0x3>
    154c:	0e 94 b4 39 	call	0x7368	; 0x7368 <__gesf2>
    1550:	87 ff       	sbrs	r24, 7
    1552:	e7 cf       	rjmp	.-50     	; 0x1522 <Lclass::PID_callingg() [clone .constprop.38]+0x216>
digitalWrite():
    1554:	61 e0       	ldi	r22, 0x01	; 1
    1556:	e6 cf       	rjmp	.-52     	; 0x1524 <Lclass::PID_callingg() [clone .constprop.38]+0x218>

00001558 <Ticker::update()>:
update():
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:71
	else diffTime = micros() - lastTime;
	enabled = false;
	status = PAUSED;
	}

void Ticker::update() {
    1558:	0f 93       	push	r16
    155a:	1f 93       	push	r17
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
tick():
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:76
	if (tick()) callback();
	}

bool Ticker::tick() {
	if (!enabled)	return false;
    1560:	fc 01       	movw	r30, r24
    1562:	20 81       	ld	r18, Z
    1564:	22 23       	and	r18, r18
    1566:	09 f4       	brne	.+2      	; 0x156a <Ticker::update()+0x12>
    1568:	50 c0       	rjmp	.+160    	; 0x160a <Ticker::update()+0xb2>
    156a:	ec 01       	movw	r28, r24
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:77
	if (resolution == MILLIS) {
    156c:	81 85       	ldd	r24, Z+9	; 0x09
    156e:	92 85       	ldd	r25, Z+10	; 0x0a
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	b9 f5       	brne	.+110    	; 0x15e2 <Ticker::update()+0x8a>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:78
		if ((millis() - lastTime) >= timer) {
    1574:	bf de       	rcall	.-642    	; 0x12f4 <millis>
    1576:	0b 89       	ldd	r16, Y+19	; 0x13
    1578:	1c 89       	ldd	r17, Y+20	; 0x14
    157a:	2d 89       	ldd	r18, Y+21	; 0x15
    157c:	3e 89       	ldd	r19, Y+22	; 0x16
    157e:	60 1b       	sub	r22, r16
    1580:	71 0b       	sbc	r23, r17
    1582:	82 0b       	sbc	r24, r18
    1584:	93 0b       	sbc	r25, r19
    1586:	09 81       	ldd	r16, Y+1	; 0x01
    1588:	1a 81       	ldd	r17, Y+2	; 0x02
    158a:	2b 81       	ldd	r18, Y+3	; 0x03
    158c:	3c 81       	ldd	r19, Y+4	; 0x04
    158e:	60 17       	cp	r22, r16
    1590:	71 07       	cpc	r23, r17
    1592:	82 07       	cpc	r24, r18
    1594:	93 07       	cpc	r25, r19
    1596:	c8 f1       	brcs	.+114    	; 0x160a <Ticker::update()+0xb2>
    1598:	ad de       	rcall	.-678    	; 0x12f4 <millis>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:79
			lastTime = millis();
    159a:	6b 8b       	std	Y+19, r22	; 0x13
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:87
	  	return true;
			}
		}
	else {
		if ((micros() - lastTime) >= timer) {
			lastTime = micros();
    159c:	7c 8b       	std	Y+20, r23	; 0x14
    159e:	8d 8b       	std	Y+21, r24	; 0x15
    15a0:	9e 8b       	std	Y+22, r25	; 0x16
    15a2:	8b 85       	ldd	r24, Y+11	; 0x0b
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:88
			if (repeat - counts == 1) enabled = false;
    15a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    15a6:	ad 85       	ldd	r26, Y+13	; 0x0d
    15a8:	be 85       	ldd	r27, Y+14	; 0x0e
    15aa:	4d 81       	ldd	r20, Y+5	; 0x05
    15ac:	5e 81       	ldd	r21, Y+6	; 0x06
    15ae:	6f 81       	ldd	r22, Y+7	; 0x07
    15b0:	78 85       	ldd	r23, Y+8	; 0x08
    15b2:	48 1b       	sub	r20, r24
    15b4:	59 0b       	sbc	r21, r25
    15b6:	6a 0b       	sbc	r22, r26
    15b8:	7b 0b       	sbc	r23, r27
    15ba:	41 30       	cpi	r20, 0x01	; 1
    15bc:	51 05       	cpc	r21, r1
    15be:	61 05       	cpc	r22, r1
    15c0:	71 05       	cpc	r23, r1
    15c2:	09 f4       	brne	.+2      	; 0x15c6 <Ticker::update()+0x6e>
    15c4:	18 82       	st	Y, r1
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:89
			counts++;
    15c6:	01 96       	adiw	r24, 0x01	; 1
    15c8:	a1 1d       	adc	r26, r1
    15ca:	b1 1d       	adc	r27, r1
    15cc:	8b 87       	std	Y+11, r24	; 0x0b
    15ce:	9c 87       	std	Y+12, r25	; 0x0c
    15d0:	ad 87       	std	Y+13, r26	; 0x0d
    15d2:	be 87       	std	Y+14, r27	; 0x0e
update():
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:72
	enabled = false;
	status = PAUSED;
	}

void Ticker::update() {
	if (tick()) callback();
    15d4:	e9 89       	ldd	r30, Y+17	; 0x11
    15d6:	fa 89       	ldd	r31, Y+18	; 0x12
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:73
	}
    15d8:	df 91       	pop	r29
    15da:	cf 91       	pop	r28
    15dc:	1f 91       	pop	r17
    15de:	0f 91       	pop	r16
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:72
	enabled = false;
	status = PAUSED;
	}

void Ticker::update() {
	if (tick()) callback();
    15e0:	09 94       	ijmp
tick():
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:86
			counts++;				
	  	return true;
			}
		}
	else {
		if ((micros() - lastTime) >= timer) {
    15e2:	5f de       	rcall	.-834    	; 0x12a2 <micros>
    15e4:	0b 89       	ldd	r16, Y+19	; 0x13
    15e6:	1c 89       	ldd	r17, Y+20	; 0x14
    15e8:	2d 89       	ldd	r18, Y+21	; 0x15
    15ea:	3e 89       	ldd	r19, Y+22	; 0x16
    15ec:	60 1b       	sub	r22, r16
    15ee:	71 0b       	sbc	r23, r17
    15f0:	82 0b       	sbc	r24, r18
    15f2:	93 0b       	sbc	r25, r19
    15f4:	09 81       	ldd	r16, Y+1	; 0x01
    15f6:	1a 81       	ldd	r17, Y+2	; 0x02
    15f8:	2b 81       	ldd	r18, Y+3	; 0x03
    15fa:	3c 81       	ldd	r19, Y+4	; 0x04
    15fc:	60 17       	cp	r22, r16
    15fe:	71 07       	cpc	r23, r17
    1600:	82 07       	cpc	r24, r18
    1602:	93 07       	cpc	r25, r19
    1604:	10 f0       	brcs	.+4      	; 0x160a <Ticker::update()+0xb2>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:87
			lastTime = micros();
    1606:	4d de       	rcall	.-870    	; 0x12a2 <micros>
    1608:	c8 cf       	rjmp	.-112    	; 0x159a <Ticker::update()+0x42>
update():
    160a:	df 91       	pop	r29
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:73
	status = PAUSED;
	}

void Ticker::update() {
	if (tick()) callback();
	}
    160c:	cf 91       	pop	r28
    160e:	1f 91       	pop	r17
    1610:	0f 91       	pop	r16
    1612:	08 95       	ret

00001614 <Ticker::start()>:
start():
    1614:	cf 93       	push	r28
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:40
	counts = 0;
	}

Ticker::~Ticker() {}

void Ticker::start() {
    1616:	df 93       	push	r29
    1618:	fc 01       	movw	r30, r24
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:41
	if (callback == NULL) return;
    161a:	21 89       	ldd	r18, Z+17	; 0x11
    161c:	32 89       	ldd	r19, Z+18	; 0x12
    161e:	23 2b       	or	r18, r19
    1620:	a1 f0       	breq	.+40     	; 0x164a <Ticker::start()+0x36>
    1622:	ec 01       	movw	r28, r24
    1624:	81 85       	ldd	r24, Z+9	; 0x09
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:42
	if (resolution == MILLIS) lastTime = millis();
    1626:	92 85       	ldd	r25, Z+10	; 0x0a
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	91 f4       	brne	.+36     	; 0x1650 <Ticker::start()+0x3c>
    162c:	63 de       	rcall	.-826    	; 0x12f4 <millis>
    162e:	6b 8b       	std	Y+19, r22	; 0x13
    1630:	7c 8b       	std	Y+20, r23	; 0x14
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:43
	else lastTime = micros();
    1632:	8d 8b       	std	Y+21, r24	; 0x15
    1634:	9e 8b       	std	Y+22, r25	; 0x16
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	88 83       	st	Y, r24
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:44
	enabled = true;
    163a:	1b 86       	std	Y+11, r1	; 0x0b
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:45
	counts = 0;
    163c:	1c 86       	std	Y+12, r1	; 0x0c
    163e:	1d 86       	std	Y+13, r1	; 0x0d
    1640:	1e 86       	std	Y+14, r1	; 0x0e
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:46
	status = RUNNING;
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	8f 87       	std	Y+15, r24	; 0x0f
    1648:	98 8b       	std	Y+16, r25	; 0x10
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:47
	}
    164a:	df 91       	pop	r29
    164c:	cf 91       	pop	r28
    164e:	08 95       	ret
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:43
Ticker::~Ticker() {}

void Ticker::start() {
	if (callback == NULL) return;
	if (resolution == MILLIS) lastTime = millis();
	else lastTime = micros();
    1650:	28 de       	rcall	.-944    	; 0x12a2 <micros>
    1652:	ed cf       	rjmp	.-38     	; 0x162e <Ticker::start()+0x1a>

00001654 <Tclass::BUZZ_INTERVAL(int) [clone .constprop.56]>:
BUZZ_INTERVAL():
    1654:	dc 01       	movw	r26, r24
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Tick.cpp:62
  Blink_LED_ON.start();  
}

void Tclass :: BUZZ_INTERVAL(int i)
{
  BUZZ.interval(i);
    1656:	bc 01       	movw	r22, r24
    1658:	99 0f       	add	r25, r25
    165a:	88 0b       	sbc	r24, r24
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:97
		}
	return false;
	}

void Ticker::interval(uint32_t timer) {
	if (resolution == MICROS) timer = timer * 1000;
    165c:	99 0b       	sbc	r25, r25
interval():
    165e:	20 91 c9 2b 	lds	r18, 0x2BC9	; 0x802bc9 <BUZZ+0x9>
    1662:	30 91 ca 2b 	lds	r19, 0x2BCA	; 0x802bca <BUZZ+0xa>
    1666:	23 2b       	or	r18, r19
    1668:	21 f4       	brne	.+8      	; 0x1672 <Tclass::BUZZ_INTERVAL(int) [clone .constprop.56]+0x1e>
    166a:	28 ee       	ldi	r18, 0xE8	; 232
    166c:	33 e0       	ldi	r19, 0x03	; 3
    166e:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <__usmulhisi3>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:98
	this->timer = timer;
    1672:	60 93 c1 2b 	sts	0x2BC1, r22	; 0x802bc1 <BUZZ+0x1>
    1676:	70 93 c2 2b 	sts	0x2BC2, r23	; 0x802bc2 <BUZZ+0x2>
    167a:	80 93 c3 2b 	sts	0x2BC3, r24	; 0x802bc3 <BUZZ+0x3>
    167e:	90 93 c4 2b 	sts	0x2BC4, r25	; 0x802bc4 <BUZZ+0x4>
digitalWrite():
    1682:	61 e0       	ldi	r22, 0x01	; 1
    1684:	85 e1       	ldi	r24, 0x15	; 21
    1686:	d2 dc       	rcall	.-1628   	; 0x102c <digitalWrite.part.2>
BUZZ_INTERVAL():
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Tick.cpp:64
  digitalWrite(BUZZER, HIGH);
  BUZZ.start();
    1688:	80 ec       	ldi	r24, 0xC0	; 192
    168a:	9b e2       	ldi	r25, 0x2B	; 43
    168c:	c3 cf       	rjmp	.-122    	; 0x1614 <Ticker::start()>

0000168e <OneButton::tick()>:
tick():
    168e:	cf 92       	push	r12
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:104
bool OneButton::isLongPressed(){
  return _isLongPressed;
}

void OneButton::tick(void)
{
    1690:	df 92       	push	r13
    1692:	ef 92       	push	r14
    1694:	ff 92       	push	r15
    1696:	0f 93       	push	r16
    1698:	1f 93       	push	r17
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
    169e:	ec 01       	movw	r28, r24
    16a0:	88 81       	ld	r24, Y
digitalRead():
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:106
  // Detect the input information 
  int buttonLevel = digitalRead(_pin); // current button signal.
    16a2:	89 32       	cpi	r24, 0x29	; 41
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:230
}

uint8_t digitalRead(uint8_t pin)
{
  /* Get bit mask and check valid pin */
  uint8_t bit_mask = digitalPinToBitMask(pin);
    16a4:	f8 f4       	brcc	.+62     	; 0x16e4 <OneButton::tick()+0x56>
    16a6:	dd dd       	rcall	.-1094   	; 0x1262 <digitalRead.part.3>
tick():
    16a8:	08 2f       	mov	r16, r24
    16aa:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:106
    16ac:	23 de       	rcall	.-954    	; 0x12f4 <millis>
    16ae:	29 8d       	ldd	r18, Y+25	; 0x19
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:107
  unsigned long now = millis(); // current (relative) time in msecs.
    16b0:	3a 8d       	ldd	r19, Y+26	; 0x1a
    16b2:	21 15       	cp	r18, r1
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:110

  // Implementation of the state machine
  if (_state == 0) { // waiting for menu pin being pressed.
    16b4:	31 05       	cpc	r19, r1
    16b6:	c1 f4       	brne	.+48     	; 0x16e8 <OneButton::tick()+0x5a>
    16b8:	2a 85       	ldd	r18, Y+10	; 0x0a
    16ba:	3b 85       	ldd	r19, Y+11	; 0x0b
    16bc:	20 17       	cp	r18, r16
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:111
    if (buttonLevel == _buttonPressed) {
    16be:	31 07       	cpc	r19, r17
    16c0:	41 f4       	brne	.+16     	; 0x16d2 <OneButton::tick()+0x44>
    16c2:	21 e0       	ldi	r18, 0x01	; 1
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	29 8f       	std	Y+25, r18	; 0x19
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:112
      _state = 1; // step to state 1
    16c8:	3a 8f       	std	Y+26, r19	; 0x1a
    16ca:	6b 8f       	std	Y+27, r22	; 0x1b
    16cc:	7c 8f       	std	Y+28, r23	; 0x1c
    16ce:	8d 8f       	std	Y+29, r24	; 0x1d
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:113
      _startTime = now; // remember starting time
    16d0:	9e 8f       	std	Y+30, r25	; 0x1e
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	1f 91       	pop	r17
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:166
	  _isLongPressed = true; // Keep track of long press state
	  if (_duringLongPressFunc) _duringLongPressFunc();
    } // if  

  } // if  
} // OneButton.tick()
    16d8:	0f 91       	pop	r16
    16da:	ff 90       	pop	r15
    16dc:	ef 90       	pop	r14
    16de:	df 90       	pop	r13
    16e0:	cf 90       	pop	r12
    16e2:	08 95       	ret
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	e0 cf       	rjmp	.-64     	; 0x16a8 <OneButton::tick()+0x1a>
    16e8:	21 30       	cpi	r18, 0x01	; 1
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:232
  if (bit_mask == NOT_A_PIN)
    return LOW;
    16ea:	31 05       	cpc	r19, r1
    16ec:	09 f0       	breq	.+2      	; 0x16f0 <OneButton::tick()+0x62>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:116
    if (buttonLevel == _buttonPressed) {
      _state = 1; // step to state 1
      _startTime = now; // remember starting time
    } // if

  } else if (_state == 1) { // waiting for menu pin being released.
    16ee:	51 c0       	rjmp	.+162    	; 0x1792 <OneButton::tick()+0x104>
    16f0:	28 85       	ldd	r18, Y+8	; 0x08
    16f2:	39 85       	ldd	r19, Y+9	; 0x09
    16f4:	20 17       	cp	r18, r16
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:118

    if ((buttonLevel == _buttonReleased) && ((unsigned long)(now - _startTime) < _debounceTicks)) {
    16f6:	31 07       	cpc	r19, r17
    16f8:	e9 f4       	brne	.+58     	; 0x1734 <OneButton::tick()+0xa6>
    16fa:	0b 8d       	ldd	r16, Y+27	; 0x1b
    16fc:	1c 8d       	ldd	r17, Y+28	; 0x1c
    16fe:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1700:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1702:	ab 01       	movw	r20, r22
    1704:	bc 01       	movw	r22, r24
    1706:	40 1b       	sub	r20, r16
    1708:	51 0b       	sbc	r21, r17
    170a:	62 0b       	sbc	r22, r18
    170c:	73 0b       	sbc	r23, r19
    170e:	8e 81       	ldd	r24, Y+6	; 0x06
    1710:	9f 81       	ldd	r25, Y+7	; 0x07
    1712:	09 2e       	mov	r0, r25
    1714:	00 0c       	add	r0, r0
    1716:	aa 0b       	sbc	r26, r26
    1718:	bb 0b       	sbc	r27, r27
    171a:	48 17       	cp	r20, r24
    171c:	59 07       	cpc	r21, r25
    171e:	6a 07       	cpc	r22, r26
    1720:	7b 07       	cpc	r23, r27
    1722:	18 f4       	brcc	.+6      	; 0x172a <OneButton::tick()+0x9c>
    1724:	19 8e       	std	Y+25, r1	; 0x19
    1726:	1a 8e       	std	Y+26, r1	; 0x1a
    1728:	d4 cf       	rjmp	.-88     	; 0x16d2 <OneButton::tick()+0x44>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:121
      // button was released to quickly so I assume some debouncing.
	  // go back to state 0 without calling a function.
      _state = 0;
    172a:	82 e0       	ldi	r24, 0x02	; 2
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	89 8f       	std	Y+25, r24	; 0x19
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:124

    } else if (buttonLevel == _buttonReleased) {
      _state = 2; // step to state 2
    1730:	9a 8f       	std	Y+26, r25	; 0x1a
    1732:	cf cf       	rjmp	.-98     	; 0x16d2 <OneButton::tick()+0x44>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:131
    } else if ((buttonLevel == _buttonPressed) && ((unsigned long)(now - _startTime) > _pressTicks)) {
      _isLongPressed = true;  // Keep track of long press state
      if (_pressFunc) _pressFunc();
	  if (_longPressStartFunc) _longPressStartFunc();
	  if (_duringLongPressFunc) _duringLongPressFunc();
      _state = 6; // step to state 6
    1734:	2a 85       	ldd	r18, Y+10	; 0x0a
    1736:	3b 85       	ldd	r19, Y+11	; 0x0b
    1738:	20 17       	cp	r18, r16
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:126
      _state = 0;

    } else if (buttonLevel == _buttonReleased) {
      _state = 2; // step to state 2

    } else if ((buttonLevel == _buttonPressed) && ((unsigned long)(now - _startTime) > _pressTicks)) {
    173a:	31 07       	cpc	r19, r17
    173c:	51 f6       	brne	.-108    	; 0x16d2 <OneButton::tick()+0x44>
    173e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1740:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1742:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1744:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1746:	ab 01       	movw	r20, r22
    1748:	bc 01       	movw	r22, r24
    174a:	40 1b       	sub	r20, r16
    174c:	51 0b       	sbc	r21, r17
    174e:	62 0b       	sbc	r22, r18
    1750:	73 0b       	sbc	r23, r19
    1752:	8c 81       	ldd	r24, Y+4	; 0x04
    1754:	9d 81       	ldd	r25, Y+5	; 0x05
    1756:	09 2e       	mov	r0, r25
    1758:	00 0c       	add	r0, r0
    175a:	aa 0b       	sbc	r26, r26
    175c:	bb 0b       	sbc	r27, r27
    175e:	84 17       	cp	r24, r20
    1760:	95 07       	cpc	r25, r21
    1762:	a6 07       	cpc	r26, r22
    1764:	b7 07       	cpc	r27, r23
    1766:	08 f0       	brcs	.+2      	; 0x176a <OneButton::tick()+0xdc>
    1768:	b4 cf       	rjmp	.-152    	; 0x16d2 <OneButton::tick()+0x44>
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	8c 87       	std	Y+12, r24	; 0x0c
    176e:	e9 89       	ldd	r30, Y+17	; 0x11
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:127
      _isLongPressed = true;  // Keep track of long press state
    1770:	fa 89       	ldd	r31, Y+18	; 0x12
    1772:	30 97       	sbiw	r30, 0x00	; 0
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:128
      if (_pressFunc) _pressFunc();
    1774:	09 f0       	breq	.+2      	; 0x1778 <OneButton::tick()+0xea>
    1776:	09 95       	icall
    1778:	eb 89       	ldd	r30, Y+19	; 0x13
    177a:	fc 89       	ldd	r31, Y+20	; 0x14
    177c:	30 97       	sbiw	r30, 0x00	; 0
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:129
	  if (_longPressStartFunc) _longPressStartFunc();
    177e:	09 f0       	breq	.+2      	; 0x1782 <OneButton::tick()+0xf4>
    1780:	09 95       	icall
    1782:	ef 89       	ldd	r30, Y+23	; 0x17
    1784:	f8 8d       	ldd	r31, Y+24	; 0x18
    1786:	30 97       	sbiw	r30, 0x00	; 0
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:130
	  if (_duringLongPressFunc) _duringLongPressFunc();
    1788:	09 f0       	breq	.+2      	; 0x178c <OneButton::tick()+0xfe>
    178a:	09 95       	icall
    178c:	86 e0       	ldi	r24, 0x06	; 6
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	ce cf       	rjmp	.-100    	; 0x172e <OneButton::tick()+0xa0>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:131
      _state = 6; // step to state 6
    1792:	22 30       	cpi	r18, 0x02	; 2
    1794:	31 05       	cpc	r19, r1
    1796:	19 f5       	brne	.+70     	; 0x17de <OneButton::tick()+0x150>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:137
      
    } else {
      // wait. Stay in this state.
    } // if

  } else if (_state == 2) { // waiting for menu pin being pressed the second time or timeout.
    1798:	cb 8c       	ldd	r12, Y+27	; 0x1b
    179a:	dc 8c       	ldd	r13, Y+28	; 0x1c
    179c:	ed 8c       	ldd	r14, Y+29	; 0x1d
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:138
    if ((unsigned long)(now - _startTime) > _clickTicks) {
    179e:	fe 8c       	ldd	r15, Y+30	; 0x1e
    17a0:	6c 19       	sub	r22, r12
    17a2:	7d 09       	sbc	r23, r13
    17a4:	8e 09       	sbc	r24, r14
    17a6:	9f 09       	sbc	r25, r15
    17a8:	ca 80       	ldd	r12, Y+2	; 0x02
    17aa:	db 80       	ldd	r13, Y+3	; 0x03
    17ac:	0d 2c       	mov	r0, r13
    17ae:	00 0c       	add	r0, r0
    17b0:	ee 08       	sbc	r14, r14
    17b2:	ff 08       	sbc	r15, r15
    17b4:	c6 16       	cp	r12, r22
    17b6:	d7 06       	cpc	r13, r23
    17b8:	e8 06       	cpc	r14, r24
    17ba:	f9 06       	cpc	r15, r25
    17bc:	38 f4       	brcc	.+14     	; 0x17cc <OneButton::tick()+0x13e>
    17be:	ed 85       	ldd	r30, Y+13	; 0x0d
    17c0:	fe 85       	ldd	r31, Y+14	; 0x0e
    17c2:	30 97       	sbiw	r30, 0x00	; 0
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:140
      // this was only a single short click
      if (_clickFunc) _clickFunc();
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <OneButton::tick()+0x13a>
    17c6:	ae cf       	rjmp	.-164    	; 0x1724 <OneButton::tick()+0x96>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:157
    } // if

  } else if (_state == 6) { // waiting for menu pin being release after long press.
    if (buttonLevel == _buttonReleased) {
	  _isLongPressed = false;  // Keep track of long press state
	  if(_longPressStopFunc) _longPressStopFunc();
    17c8:	09 95       	icall
    17ca:	ac cf       	rjmp	.-168    	; 0x1724 <OneButton::tick()+0x96>
    17cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    17ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    17d0:	80 17       	cp	r24, r16
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:143
    if ((unsigned long)(now - _startTime) > _clickTicks) {
      // this was only a single short click
      if (_clickFunc) _clickFunc();
      _state = 0; // restart.

    } else if (buttonLevel == _buttonPressed) {
    17d2:	91 07       	cpc	r25, r17
    17d4:	09 f0       	breq	.+2      	; 0x17d8 <OneButton::tick()+0x14a>
    17d6:	7d cf       	rjmp	.-262    	; 0x16d2 <OneButton::tick()+0x44>
    17d8:	83 e0       	ldi	r24, 0x03	; 3
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	a8 cf       	rjmp	.-176    	; 0x172e <OneButton::tick()+0xa0>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:144
      _state = 3; // step to state 3
    17de:	23 30       	cpi	r18, 0x03	; 3
    17e0:	31 05       	cpc	r19, r1
    17e2:	49 f4       	brne	.+18     	; 0x17f6 <OneButton::tick()+0x168>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:147
    } // if

  } else if (_state == 3) { // waiting for menu pin being released finally.
    17e4:	88 85       	ldd	r24, Y+8	; 0x08
    17e6:	99 85       	ldd	r25, Y+9	; 0x09
    17e8:	80 17       	cp	r24, r16
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:148
    if (buttonLevel == _buttonReleased) {
    17ea:	91 07       	cpc	r25, r17
    17ec:	09 f0       	breq	.+2      	; 0x17f0 <OneButton::tick()+0x162>
    17ee:	71 cf       	rjmp	.-286    	; 0x16d2 <OneButton::tick()+0x44>
    17f0:	ef 85       	ldd	r30, Y+15	; 0x0f
    17f2:	f8 89       	ldd	r31, Y+16	; 0x10
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:150
      // this was a 2 click sequence.
      if (_doubleClickFunc) _doubleClickFunc();
    17f4:	e6 cf       	rjmp	.-52     	; 0x17c2 <OneButton::tick()+0x134>
    17f6:	26 30       	cpi	r18, 0x06	; 6
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:154
      _state = 0; // restart.
    } // if

  } else if (_state == 6) { // waiting for menu pin being release after long press.
    17f8:	31 05       	cpc	r19, r1
    17fa:	09 f0       	breq	.+2      	; 0x17fe <OneButton::tick()+0x170>
    17fc:	6a cf       	rjmp	.-300    	; 0x16d2 <OneButton::tick()+0x44>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:155
    if (buttonLevel == _buttonReleased) {
    17fe:	88 85       	ldd	r24, Y+8	; 0x08
    1800:	99 85       	ldd	r25, Y+9	; 0x09
    1802:	80 17       	cp	r24, r16
    1804:	91 07       	cpc	r25, r17
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:156
	  _isLongPressed = false;  // Keep track of long press state
    1806:	21 f4       	brne	.+8      	; 0x1810 <__DATA_REGION_LENGTH__+0x10>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:157
	  if(_longPressStopFunc) _longPressStopFunc();
    1808:	1c 86       	std	Y+12, r1	; 0x0c
    180a:	ed 89       	ldd	r30, Y+21	; 0x15
    180c:	fe 89       	ldd	r31, Y+22	; 0x16
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:161
      _state = 0; // restart.
    } else {
	  // button is being long pressed
	  _isLongPressed = true; // Keep track of long press state
    180e:	d9 cf       	rjmp	.-78     	; 0x17c2 <OneButton::tick()+0x134>
    1810:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:162
	  if (_duringLongPressFunc) _duringLongPressFunc();
    1812:	8c 87       	std	Y+12, r24	; 0x0c
    1814:	ef 89       	ldd	r30, Y+23	; 0x17
    1816:	f8 8d       	ldd	r31, Y+24	; 0x18
    1818:	30 97       	sbiw	r30, 0x00	; 0
    181a:	09 f4       	brne	.+2      	; 0x181e <__DATA_REGION_LENGTH__+0x1e>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:166
    } // if  

  } // if  
} // OneButton.tick()
    181c:	5a cf       	rjmp	.-332    	; 0x16d2 <OneButton::tick()+0x44>
    181e:	df 91       	pop	r29
    1820:	cf 91       	pop	r28
    1822:	1f 91       	pop	r17
    1824:	0f 91       	pop	r16
    1826:	ff 90       	pop	r15
    1828:	ef 90       	pop	r14
    182a:	df 90       	pop	r13
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:162
	  if(_longPressStopFunc) _longPressStopFunc();
      _state = 0; // restart.
    } else {
	  // button is being long pressed
	  _isLongPressed = true; // Keep track of long press state
	  if (_duringLongPressFunc) _duringLongPressFunc();
    182c:	cf 90       	pop	r12
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:59
	enabled = true;
	status = RUNNING;
	}

void Ticker::stop() {
	enabled = false;
    182e:	09 94       	ijmp

00001830 <STOP_BUZZER()>:
stop():
    1830:	e0 ec       	ldi	r30, 0xC0	; 192
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:60
	counts = 0;
    1832:	fb e2       	ldi	r31, 0x2B	; 43
    1834:	10 82       	st	Z, r1
    1836:	13 86       	std	Z+11, r1	; 0x0b
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:61
	status = STOPPED;
    1838:	14 86       	std	Z+12, r1	; 0x0c
    183a:	15 86       	std	Z+13, r1	; 0x0d
    183c:	16 86       	std	Z+14, r1	; 0x0e
    183e:	17 86       	std	Z+15, r1	; 0x0f
    1840:	10 8a       	std	Z+16, r1	; 0x10
digitalWrite():
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Tick.cpp:86
  BUZZ_TICK1.start();
}

void STOP_BUZZER1()
{
  BUZZ_TICK2.start();
    1842:	60 e0       	ldi	r22, 0x00	; 0
    1844:	85 e1       	ldi	r24, 0x15	; 21
    1846:	f2 cb       	rjmp	.-2076   	; 0x102c <digitalWrite.part.2>

00001848 <STOP_BUZZER1()>:
STOP_BUZZER1():
    1848:	8a e8       	ldi	r24, 0x8A	; 138
    184a:	9b e2       	ldi	r25, 0x2B	; 43
    184c:	e3 de       	rcall	.-570    	; 0x1614 <Ticker::start()>
digitalWrite():
    184e:	61 e0       	ldi	r22, 0x01	; 1
    1850:	85 e1       	ldi	r24, 0x15	; 21
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Tick.cpp:68
  digitalWrite(BUZZER, HIGH);
  BUZZ.start();
}

void STOP_BUZZER2()
{
    1852:	ec cb       	rjmp	.-2088   	; 0x102c <digitalWrite.part.2>

00001854 <STOP_BUZZER2()>:
    1854:	60 e0       	ldi	r22, 0x00	; 0
    1856:	85 e1       	ldi	r24, 0x15	; 21
    1858:	e9 db       	rcall	.-2094   	; 0x102c <digitalWrite.part.2>
STOP_BUZZER2():
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Tick.cpp:70
  digitalWrite(BUZZER, LOW);  
   if(REPETATION_FLAG) FOR_REP++;
    185a:	80 91 88 28 	lds	r24, 0x2888	; 0x802888 <REPETATION_FLAG>
    185e:	88 23       	and	r24, r24
    1860:	49 f0       	breq	.+18     	; 0x1874 <STOP_BUZZER2()+0x20>
    1862:	80 91 94 28 	lds	r24, 0x2894	; 0x802894 <FOR_REP>
    1866:	90 91 95 28 	lds	r25, 0x2895	; 0x802895 <FOR_REP+0x1>
    186a:	01 96       	adiw	r24, 0x01	; 1
    186c:	80 93 94 28 	sts	0x2894, r24	; 0x802894 <FOR_REP>
    1870:	90 93 95 28 	sts	0x2895, r25	; 0x802895 <FOR_REP+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Tick.cpp:71
   FOR_REP2++;
    1874:	80 91 96 28 	lds	r24, 0x2896	; 0x802896 <FOR_REP2>
    1878:	90 91 97 28 	lds	r25, 0x2897	; 0x802897 <FOR_REP2+0x1>
    187c:	01 96       	adiw	r24, 0x01	; 1
    187e:	80 93 96 28 	sts	0x2896, r24	; 0x802896 <FOR_REP2>
    1882:	90 93 97 28 	sts	0x2897, r25	; 0x802897 <FOR_REP2+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Tick.cpp:72
}
    1886:	08 95       	ret

00001888 <LED_off()>:
digitalWrite():
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Tick.cpp:55
  digitalWrite(ALARM_LED, HIGH); 
 Blinking_Freq++;  
}

void LED_off()
{
    1888:	60 e0       	ldi	r22, 0x00	; 0
    188a:	8a e1       	ldi	r24, 0x1A	; 26
    188c:	cf db       	rcall	.-2146   	; 0x102c <digitalWrite.part.2>
LED_off():
    188e:	8f e6       	ldi	r24, 0x6F	; 111
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Tick.cpp:57
  digitalWrite(ALARM_LED, LOW);  
  Blink_LED_ON.start();  
    1890:	9b e2       	ldi	r25, 0x2B	; 43
    1892:	c0 ce       	rjmp	.-640    	; 0x1614 <Ticker::start()>

00001894 <LED_on()>:
digitalWrite():
    1894:	61 e0       	ldi	r22, 0x01	; 1
    1896:	8a e1       	ldi	r24, 0x1A	; 26
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Tick.cpp:49
  Blink_LED_ON.stop();   
  Blink_LED_OFF.stop();
}

void LED_on()
{  
    1898:	c9 db       	rcall	.-2158   	; 0x102c <digitalWrite.part.2>
LED_on():
    189a:	80 91 8e 28 	lds	r24, 0x288E	; 0x80288e <Blinking_Freq>
    189e:	8f 5f       	subi	r24, 0xFF	; 255
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Tick.cpp:51
  digitalWrite(ALARM_LED, HIGH); 
 Blinking_Freq++;  
    18a0:	80 93 8e 28 	sts	0x288E, r24	; 0x80288e <Blinking_Freq>
    18a4:	08 95       	ret

000018a6 <RTD_TEMP_CAL()>:
RTD_TEMP_CAL():
    18a6:	8f 92       	push	r8
    18a8:	9f 92       	push	r9
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Tick.cpp:52
}
    18aa:	af 92       	push	r10
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:39
{  
  TEMP_UPDATE.start();
}

void RTD_TEMP_CAL()
{
    18ac:	bf 92       	push	r11
    18ae:	cf 92       	push	r12
    18b0:	df 92       	push	r13
    18b2:	ef 92       	push	r14
    18b4:	ff 92       	push	r15
    18b6:	cf 93       	push	r28
    18b8:	df 93       	push	r29
    18ba:	c0 91 33 28 	lds	r28, 0x2833	; 0x802833 <sample>
    18be:	d0 91 34 28 	lds	r29, 0x2834	; 0x802834 <sample+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:40
    sample++;
    18c2:	21 96       	adiw	r28, 0x01	; 1
    18c4:	c0 93 33 28 	sts	0x2833, r28	; 0x802833 <sample>
    18c8:	d0 93 34 28 	sts	0x2834, r29	; 0x802834 <sample+0x1>
analogRead():
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_analog.c:63
    return NOT_A_PIN;

#if defined(ADC0)
  /* Reference should be already set up */
  /* Select channel */
  ADC0.MUXPOS = (pin << ADC_MUXPOS_gp);
    18d2:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
    18d6:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_analog.c:66

  /* Start conversion */
  ADC0.COMMAND = ADC_STCONV_bm;
    18da:	80 ff       	sbrs	r24, 0
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_analog.c:69

  /* Wait for result ready */
  while (!(ADC0.INTFLAGS & ADC_RESRDY_bm))
    18dc:	fc cf       	rjmp	.-8      	; 0x18d6 <RTD_TEMP_CAL()+0x30>
    18de:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
    18e2:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
RTD_TEMP_CAL():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_analog.c:73
    ;

  /* Combine two bytes */
  return ADC0.RES;
    18e6:	07 2e       	mov	r0, r23
    18e8:	00 0c       	add	r0, r0
    18ea:	88 0b       	sbc	r24, r24
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:41
    AvgVout = analogRead(A1);
    18ec:	99 0b       	sbc	r25, r25
    18ee:	0e 94 04 39 	call	0x7208	; 0x7208 <__floatsisf>
    18f2:	20 91 2f 28 	lds	r18, 0x282F	; 0x80282f <TotalVout>
    18f6:	30 91 30 28 	lds	r19, 0x2830	; 0x802830 <TotalVout+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:42
    TotalVout  += AvgVout ;  
    18fa:	40 91 31 28 	lds	r20, 0x2831	; 0x802831 <TotalVout+0x2>
    18fe:	50 91 32 28 	lds	r21, 0x2832	; 0x802832 <TotalVout+0x3>
    1902:	0e 94 01 38 	call	0x7002	; 0x7002 <__addsf3>
    1906:	6b 01       	movw	r12, r22
    1908:	7c 01       	movw	r14, r24
    190a:	c0 92 2f 28 	sts	0x282F, r12	; 0x80282f <TotalVout>
    190e:	d0 92 30 28 	sts	0x2830, r13	; 0x802830 <TotalVout+0x1>
    1912:	e0 92 31 28 	sts	0x2831, r14	; 0x802831 <TotalVout+0x2>
    1916:	f0 92 32 28 	sts	0x2832, r15	; 0x802832 <TotalVout+0x3>
    191a:	60 91 00 28 	lds	r22, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
    191e:	70 91 01 28 	lds	r23, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:43
    if(sample >= avrage_val)
    1922:	c6 17       	cp	r28, r22
    1924:	d7 07       	cpc	r29, r23
    1926:	0c f4       	brge	.+2      	; 0x192a <RTD_TEMP_CAL()+0x84>
    1928:	76 c0       	rjmp	.+236    	; 0x1a16 <RTD_TEMP_CAL()+0x170>
    192a:	07 2e       	mov	r0, r23
    192c:	00 0c       	add	r0, r0
    192e:	88 0b       	sbc	r24, r24
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:45
    {
      TotalVout /= avrage_val;
    1930:	99 0b       	sbc	r25, r25
    1932:	0e 94 04 39 	call	0x7208	; 0x7208 <__floatsisf>
    1936:	9b 01       	movw	r18, r22
    1938:	ac 01       	movw	r20, r24
    193a:	c7 01       	movw	r24, r14
    193c:	b6 01       	movw	r22, r12
    193e:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__divsf3>
    1942:	60 93 2f 28 	sts	0x282F, r22	; 0x80282f <TotalVout>
    1946:	70 93 30 28 	sts	0x2830, r23	; 0x802830 <TotalVout+0x1>
    194a:	80 93 31 28 	sts	0x2831, r24	; 0x802831 <TotalVout+0x2>
    194e:	90 93 32 28 	sts	0x2832, r25	; 0x802832 <TotalVout+0x3>
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	40 ea       	ldi	r20, 0xA0	; 160
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:46
      float Vout = ((TotalVout * Vs) / 1023.0);         // Voltage conversion
    1958:	50 e4       	ldi	r21, 0x40	; 64
    195a:	0e 94 b8 39 	call	0x7370	; 0x7370 <__mulsf3>
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 ec       	ldi	r19, 0xC0	; 192
    1962:	4f e7       	ldi	r20, 0x7F	; 127
    1964:	54 e4       	ldi	r21, 0x44	; 68
    1966:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__divsf3>
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e2       	ldi	r20, 0x20	; 32
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:47
      Vin = Vout / 10;                                  // Gain
    1970:	51 e4       	ldi	r21, 0x41	; 65
    1972:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__divsf3>
    1976:	28 eb       	ldi	r18, 0xB8	; 184
    1978:	3f e8       	ldi	r19, 0x8F	; 143
    197a:	40 e6       	ldi	r20, 0x60	; 96
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:48
      Rt = ((Vb + Vin) * Rc) / (Vs - (Vb + Vin));       // Va = Vb + Vin 
    197c:	5f e3       	ldi	r21, 0x3F	; 63
    197e:	0e 94 01 38 	call	0x7002	; 0x7002 <__addsf3>
    1982:	6b 01       	movw	r12, r22
    1984:	7c 01       	movw	r14, r24
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	4b ee       	ldi	r20, 0xEB	; 235
    198c:	53 e4       	ldi	r21, 0x43	; 67
    198e:	0e 94 b8 39 	call	0x7370	; 0x7370 <__mulsf3>
    1992:	4b 01       	movw	r8, r22
    1994:	5c 01       	movw	r10, r24
    1996:	a7 01       	movw	r20, r14
    1998:	96 01       	movw	r18, r12
    199a:	60 e0       	ldi	r22, 0x00	; 0
    199c:	70 e0       	ldi	r23, 0x00	; 0
    199e:	80 ea       	ldi	r24, 0xA0	; 160
    19a0:	90 e4       	ldi	r25, 0x40	; 64
    19a2:	0e 94 00 38 	call	0x7000	; 0x7000 <__subsf3>
    19a6:	9b 01       	movw	r18, r22
    19a8:	ac 01       	movw	r20, r24
    19aa:	c5 01       	movw	r24, r10
    19ac:	b4 01       	movw	r22, r8
    19ae:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__divsf3>
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	48 ec       	ldi	r20, 0xC8	; 200
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:49
      TEMP_DEG_RAW = ((Rt / Rb) - 1) / (Alpha);         // Alpha is temp coefficient for paltinum
    19b8:	52 e4       	ldi	r21, 0x42	; 66
    19ba:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__divsf3>
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	40 e8       	ldi	r20, 0x80	; 128
    19c4:	5f e3       	ldi	r21, 0x3F	; 63
    19c6:	0e 94 00 38 	call	0x7000	; 0x7000 <__subsf3>
    19ca:	28 e4       	ldi	r18, 0x48	; 72
    19cc:	30 e5       	ldi	r19, 0x50	; 80
    19ce:	4c e7       	ldi	r20, 0x7C	; 124
    19d0:	5b e3       	ldi	r21, 0x3B	; 59
    19d2:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__divsf3>
    19d6:	60 93 ee 28 	sts	0x28EE, r22	; 0x8028ee <TEMP_DEG_RAW>
    19da:	70 93 ef 28 	sts	0x28EF, r23	; 0x8028ef <TEMP_DEG_RAW+0x1>
    19de:	80 93 f0 28 	sts	0x28F0, r24	; 0x8028f0 <TEMP_DEG_RAW+0x2>
    19e2:	90 93 f1 28 	sts	0x28F1, r25	; 0x8028f1 <TEMP_DEG_RAW+0x3>
    19e6:	26 e6       	ldi	r18, 0x66	; 102
    19e8:	36 e6       	ldi	r19, 0x66	; 102
    19ea:	46 ee       	ldi	r20, 0xE6	; 230
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:52
//      Serial2.println("Product Temp."); //;Serial2.println("\t");
//      Serial2.print(TEMP_DEG_RAW); Serial2.print("\t"); Serial2.println(TEMP_DEG_RAW_1);
      TEMP_FAH_RAW = (( TEMP_DEG_RAW * 1.8 ) + 32);
    19ec:	5f e3       	ldi	r21, 0x3F	; 63
    19ee:	0e 94 b8 39 	call	0x7370	; 0x7370 <__mulsf3>
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	40 e0       	ldi	r20, 0x00	; 0
    19f8:	52 e4       	ldi	r21, 0x42	; 66
    19fa:	0e 94 01 38 	call	0x7002	; 0x7002 <__addsf3>
    19fe:	60 93 da 28 	sts	0x28DA, r22	; 0x8028da <TEMP_FAH_RAW>
    1a02:	70 93 db 28 	sts	0x28DB, r23	; 0x8028db <TEMP_FAH_RAW+0x1>
    1a06:	80 93 dc 28 	sts	0x28DC, r24	; 0x8028dc <TEMP_FAH_RAW+0x2>
    1a0a:	90 93 dd 28 	sts	0x28DD, r25	; 0x8028dd <TEMP_FAH_RAW+0x3>
    1a0e:	10 92 33 28 	sts	0x2833, r1	; 0x802833 <sample>
    1a12:	10 92 34 28 	sts	0x2834, r1	; 0x802834 <sample+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:53
      sample = 0;   AvgVout = 0;   
    1a16:	82 e3       	ldi	r24, 0x32	; 50
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:55
    }
      avrage_val = 50;
    1a1e:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
    1a22:	df 91       	pop	r29
    1a24:	cf 91       	pop	r28
    1a26:	ff 90       	pop	r15
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Temp.cpp:56
}
    1a28:	ef 90       	pop	r14
    1a2a:	df 90       	pop	r13
    1a2c:	cf 90       	pop	r12
    1a2e:	bf 90       	pop	r11
    1a30:	af 90       	pop	r10
    1a32:	9f 90       	pop	r9
    1a34:	8f 90       	pop	r8
    1a36:	08 95       	ret

00001a38 <RTD_TEMP_CAL_1()>:
RTD_TEMP_CAL_1():
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	c0 91 2d 28 	lds	r28, 0x282D	; 0x80282d <sample_1>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Safety_probe.cpp:27
{  
  TEMP_UPDATE_1.start();
}

void RTD_TEMP_CAL_1()
{
    1a40:	d0 91 2e 28 	lds	r29, 0x282E	; 0x80282e <sample_1+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Safety_probe.cpp:28
    sample_1++;
    1a44:	21 96       	adiw	r28, 0x01	; 1
    1a46:	c0 93 2d 28 	sts	0x282D, r28	; 0x80282d <sample_1>
    1a4a:	d0 93 2e 28 	sts	0x282E, r29	; 0x80282e <sample_1+0x1>
analogRead():
    1a4e:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
    1a52:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_analog.c:63
    return NOT_A_PIN;

#if defined(ADC0)
  /* Reference should be already set up */
  /* Select channel */
  ADC0.MUXPOS = (pin << ADC_MUXPOS_gp);
    1a54:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_analog.c:66

  /* Start conversion */
  ADC0.COMMAND = ADC_STCONV_bm;
    1a58:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
    1a5c:	80 ff       	sbrs	r24, 0
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_analog.c:69

  /* Wait for result ready */
  while (!(ADC0.INTFLAGS & ADC_RESRDY_bm))
    1a5e:	fc cf       	rjmp	.-8      	; 0x1a58 <RTD_TEMP_CAL_1()+0x20>
    1a60:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
    1a64:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
RTD_TEMP_CAL_1():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_analog.c:73
    ;

  /* Combine two bytes */
  return ADC0.RES;
    1a68:	07 2e       	mov	r0, r23
    1a6a:	00 0c       	add	r0, r0
    1a6c:	88 0b       	sbc	r24, r24
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Safety_probe.cpp:29
    AvgVout_1 = analogRead(A0);
    1a6e:	99 0b       	sbc	r25, r25
    1a70:	0e 94 04 39 	call	0x7208	; 0x7208 <__floatsisf>
    1a74:	20 91 29 28 	lds	r18, 0x2829	; 0x802829 <TotalVout_1>
    1a78:	30 91 2a 28 	lds	r19, 0x282A	; 0x80282a <TotalVout_1+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Safety_probe.cpp:30
    TotalVout_1  += AvgVout_1 ; 
    1a7c:	40 91 2b 28 	lds	r20, 0x282B	; 0x80282b <TotalVout_1+0x2>
    1a80:	50 91 2c 28 	lds	r21, 0x282C	; 0x80282c <TotalVout_1+0x3>
    1a84:	0e 94 01 38 	call	0x7002	; 0x7002 <__addsf3>
    1a88:	69 97       	sbiw	r28, 0x19	; 25
    1a8a:	5c f4       	brge	.+22     	; 0x1aa2 <RTD_TEMP_CAL_1()+0x6a>
    1a8c:	60 93 29 28 	sts	0x2829, r22	; 0x802829 <TotalVout_1>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Safety_probe.cpp:31
    if(sample_1 >= avrage_val_1)
    1a90:	70 93 2a 28 	sts	0x282A, r23	; 0x80282a <TotalVout_1+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Safety_probe.cpp:30

void RTD_TEMP_CAL_1()
{
    sample_1++;
    AvgVout_1 = analogRead(A0);
    TotalVout_1  += AvgVout_1 ; 
    1a94:	80 93 2b 28 	sts	0x282B, r24	; 0x80282b <TotalVout_1+0x2>
    1a98:	90 93 2c 28 	sts	0x282C, r25	; 0x80282c <TotalVout_1+0x3>
    1a9c:	df 91       	pop	r29
    1a9e:	cf 91       	pop	r28
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Safety_probe.cpp:40
      Vin1 = Vout1 / 10;                                 // Gain
      Rt1 = ((Vb1 + Vin1) * Rc1) / (Vs1 - (Vb1 + Vin1)); //   Va = Vb + Vin 
      TEMP_DEG_RAW_1 = ((Rt1 / Rb1) - 1) / (Alpha);      // alpha is temp coefficient for platinum
      sample_1 = 0;  AvgVout_1 = 0;   
    }
}
    1aa0:	08 95       	ret
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Safety_probe.cpp:33
    sample_1++;
    AvgVout_1 = analogRead(A0);
    TotalVout_1  += AvgVout_1 ; 
    if(sample_1 >= avrage_val_1)
    {
      TotalVout_1 /= avrage_val_1;
    1aa6:	48 ec       	ldi	r20, 0xC8	; 200
    1aa8:	51 e4       	ldi	r21, 0x41	; 65
    1aaa:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__divsf3>
    1aae:	60 93 29 28 	sts	0x2829, r22	; 0x802829 <TotalVout_1>
    1ab2:	70 93 2a 28 	sts	0x282A, r23	; 0x80282a <TotalVout_1+0x1>
    1ab6:	80 93 2b 28 	sts	0x282B, r24	; 0x80282b <TotalVout_1+0x2>
    1aba:	90 93 2c 28 	sts	0x282C, r25	; 0x80282c <TotalVout_1+0x3>
    1abe:	10 92 2d 28 	sts	0x282D, r1	; 0x80282d <sample_1>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Safety_probe.cpp:38
      float Vout1 = ((TotalVout_1 * Vs1) / 1023.0);      // Voltage conversion
      Vin1 = Vout1 / 10;                                 // Gain
      Rt1 = ((Vb1 + Vin1) * Rc1) / (Vs1 - (Vb1 + Vin1)); //   Va = Vb + Vin 
      TEMP_DEG_RAW_1 = ((Rt1 / Rb1) - 1) / (Alpha);      // alpha is temp coefficient for platinum
      sample_1 = 0;  AvgVout_1 = 0;   
    1ac2:	10 92 2e 28 	sts	0x282E, r1	; 0x80282e <sample_1+0x1>
    1ac6:	ea cf       	rjmp	.-44     	; 0x1a9c <RTD_TEMP_CAL_1()+0x64>

00001ac8 <PID_RUN()>:
PID_RUN():
    1ac8:	3f 92       	push	r3
    1aca:	4f 92       	push	r4
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Pid.cpp:31
  WINDOW_START_TIME = millis();
  myPID.SetMode(AUTOMATIC);
}

void PID_RUN()
{
    1acc:	5f 92       	push	r5
    1ace:	6f 92       	push	r6
    1ad0:	7f 92       	push	r7
    1ad2:	8f 92       	push	r8
    1ad4:	9f 92       	push	r9
    1ad6:	af 92       	push	r10
    1ad8:	bf 92       	push	r11
    1ada:	cf 92       	push	r12
    1adc:	df 92       	push	r13
    1ade:	ef 92       	push	r14
    1ae0:	ff 92       	push	r15
    1ae2:	0f 93       	push	r16
    1ae4:	1f 93       	push	r17
    1ae6:	cf 93       	push	r28
    1ae8:	df 93       	push	r29
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    1aee:	2e 97       	sbiw	r28, 0x0e	; 14
    1af0:	cd bf       	out	0x3d, r28	; 61
    1af2:	de bf       	out	0x3e, r29	; 62
Compute():
    1af4:	80 91 34 2a 	lds	r24, 0x2A34	; 0x802a34 <myPID+0x3a>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:60
 *   pid Output needs to be computed.  returns true when the output is computed,
 *   false when nothing has been done.
 **********************************************************************************/
bool PID::Compute()
{
   if(!inAuto) return false;
    1af8:	88 23       	and	r24, r24
    1afa:	09 f4       	brne	.+2      	; 0x1afe <PID_RUN()+0x36>
    1afc:	29 c1       	rjmp	.+594    	; 0x1d50 <PID_RUN()+0x288>
    1afe:	fa db       	rcall	.-2060   	; 0x12f4 <millis>
    1b00:	6d 83       	std	Y+5, r22	; 0x05
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:61
   unsigned long now = millis();
    1b02:	7e 83       	std	Y+6, r23	; 0x06
    1b04:	8f 83       	std	Y+7, r24	; 0x07
    1b06:	98 87       	std	Y+8, r25	; 0x08
    1b08:	80 91 1c 2a 	lds	r24, 0x2A1C	; 0x802a1c <myPID+0x22>
    1b0c:	90 91 1d 2a 	lds	r25, 0x2A1D	; 0x802a1d <myPID+0x23>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:62
   unsigned long timeChange = (now - lastTime);
    1b10:	a0 91 1e 2a 	lds	r26, 0x2A1E	; 0x802a1e <myPID+0x24>
    1b14:	b0 91 1f 2a 	lds	r27, 0x2A1F	; 0x802a1f <myPID+0x25>
    1b18:	4d 81       	ldd	r20, Y+5	; 0x05
    1b1a:	5e 81       	ldd	r21, Y+6	; 0x06
    1b1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b1e:	78 85       	ldd	r23, Y+8	; 0x08
    1b20:	48 1b       	sub	r20, r24
    1b22:	59 0b       	sbc	r21, r25
    1b24:	6a 0b       	sbc	r22, r26
    1b26:	7b 0b       	sbc	r23, r27
    1b28:	80 91 28 2a 	lds	r24, 0x2A28	; 0x802a28 <myPID+0x2e>
    1b2c:	90 91 29 2a 	lds	r25, 0x2A29	; 0x802a29 <myPID+0x2f>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:63
   if(timeChange>=SampleTime)
    1b30:	a0 91 2a 2a 	lds	r26, 0x2A2A	; 0x802a2a <myPID+0x30>
    1b34:	b0 91 2b 2a 	lds	r27, 0x2A2B	; 0x802a2b <myPID+0x31>
    1b38:	48 17       	cp	r20, r24
    1b3a:	59 07       	cpc	r21, r25
    1b3c:	6a 07       	cpc	r22, r26
    1b3e:	7b 07       	cpc	r23, r27
    1b40:	08 f4       	brcc	.+2      	; 0x1b44 <PID_RUN()+0x7c>
    1b42:	06 c1       	rjmp	.+524    	; 0x1d50 <PID_RUN()+0x288>
    1b44:	e0 91 16 2a 	lds	r30, 0x2A16	; 0x802a16 <myPID+0x1c>
    1b48:	f0 91 17 2a 	lds	r31, 0x2A17	; 0x802a17 <myPID+0x1d>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:66
   {
      /*Compute all the working error variables*/
      double input = *myInput;
    1b4c:	80 81       	ld	r24, Z
    1b4e:	91 81       	ldd	r25, Z+1	; 0x01
    1b50:	a2 81       	ldd	r26, Z+2	; 0x02
    1b52:	b3 81       	ldd	r27, Z+3	; 0x03
    1b54:	89 83       	std	Y+1, r24	; 0x01
    1b56:	9a 83       	std	Y+2, r25	; 0x02
    1b58:	ab 83       	std	Y+3, r26	; 0x03
    1b5a:	bc 83       	std	Y+4, r27	; 0x04
    1b5c:	e0 91 1a 2a 	lds	r30, 0x2A1A	; 0x802a1a <myPID+0x20>
    1b60:	f0 91 1b 2a 	lds	r31, 0x2A1B	; 0x802a1b <myPID+0x21>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:67
      double error = *mySetpoint - input;
    1b64:	9c 01       	movw	r18, r24
    1b66:	ad 01       	movw	r20, r26
    1b68:	60 81       	ld	r22, Z
    1b6a:	71 81       	ldd	r23, Z+1	; 0x01
    1b6c:	82 81       	ldd	r24, Z+2	; 0x02
    1b6e:	93 81       	ldd	r25, Z+3	; 0x03
    1b70:	0e 94 00 38 	call	0x7000	; 0x7000 <__subsf3>
    1b74:	4b 01       	movw	r8, r22
    1b76:	5c 01       	movw	r10, r24
    1b78:	20 91 24 2a 	lds	r18, 0x2A24	; 0x802a24 <myPID+0x2a>
    1b7c:	30 91 25 2a 	lds	r19, 0x2A25	; 0x802a25 <myPID+0x2b>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:68
      double dInput = (input - lastInput);
    1b80:	40 91 26 2a 	lds	r20, 0x2A26	; 0x802a26 <myPID+0x2c>
    1b84:	50 91 27 2a 	lds	r21, 0x2A27	; 0x802a27 <myPID+0x2d>
    1b88:	69 81       	ldd	r22, Y+1	; 0x01
    1b8a:	7a 81       	ldd	r23, Y+2	; 0x02
    1b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b90:	0e 94 00 38 	call	0x7000	; 0x7000 <__subsf3>
    1b94:	6b 01       	movw	r12, r22
    1b96:	7c 01       	movw	r14, r24
    1b98:	20 91 0a 2a 	lds	r18, 0x2A0A	; 0x802a0a <myPID+0x10>
    1b9c:	30 91 0b 2a 	lds	r19, 0x2A0B	; 0x802a0b <myPID+0x11>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:69
      outputSum+= (ki * error);
    1ba0:	40 91 0c 2a 	lds	r20, 0x2A0C	; 0x802a0c <myPID+0x12>
    1ba4:	50 91 0d 2a 	lds	r21, 0x2A0D	; 0x802a0d <myPID+0x13>
    1ba8:	c5 01       	movw	r24, r10
    1baa:	b4 01       	movw	r22, r8
    1bac:	0e 94 b8 39 	call	0x7370	; 0x7370 <__mulsf3>
    1bb0:	20 91 20 2a 	lds	r18, 0x2A20	; 0x802a20 <myPID+0x26>
    1bb4:	30 91 21 2a 	lds	r19, 0x2A21	; 0x802a21 <myPID+0x27>
    1bb8:	40 91 22 2a 	lds	r20, 0x2A22	; 0x802a22 <myPID+0x28>
    1bbc:	50 91 23 2a 	lds	r21, 0x2A23	; 0x802a23 <myPID+0x29>
    1bc0:	0e 94 01 38 	call	0x7002	; 0x7002 <__addsf3>
    1bc4:	2b 01       	movw	r4, r22
    1bc6:	3c 01       	movw	r6, r24
    1bc8:	40 92 20 2a 	sts	0x2A20, r4	; 0x802a20 <myPID+0x26>
    1bcc:	50 92 21 2a 	sts	0x2A21, r5	; 0x802a21 <myPID+0x27>
    1bd0:	60 92 22 2a 	sts	0x2A22, r6	; 0x802a22 <myPID+0x28>
    1bd4:	70 92 23 2a 	sts	0x2A23, r7	; 0x802a23 <myPID+0x29>
    1bd8:	30 90 35 2a 	lds	r3, 0x2A35	; 0x802a35 <myPID+0x3b>
    1bdc:	31 10       	cpse	r3, r1
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:72

      /*Add Proportional on Measurement, if P_ON_M is specified*/
      if(!pOnE) outputSum-= kp * dInput;
    1bde:	1a c0       	rjmp	.+52     	; 0x1c14 <PID_RUN()+0x14c>
    1be0:	20 91 06 2a 	lds	r18, 0x2A06	; 0x802a06 <myPID+0xc>
    1be4:	30 91 07 2a 	lds	r19, 0x2A07	; 0x802a07 <myPID+0xd>
    1be8:	40 91 08 2a 	lds	r20, 0x2A08	; 0x802a08 <myPID+0xe>
    1bec:	50 91 09 2a 	lds	r21, 0x2A09	; 0x802a09 <myPID+0xf>
    1bf0:	c7 01       	movw	r24, r14
    1bf2:	b6 01       	movw	r22, r12
    1bf4:	0e 94 b8 39 	call	0x7370	; 0x7370 <__mulsf3>
    1bf8:	9b 01       	movw	r18, r22
    1bfa:	ac 01       	movw	r20, r24
    1bfc:	c3 01       	movw	r24, r6
    1bfe:	b2 01       	movw	r22, r4
    1c00:	0e 94 00 38 	call	0x7000	; 0x7000 <__subsf3>
    1c04:	60 93 20 2a 	sts	0x2A20, r22	; 0x802a20 <myPID+0x26>
    1c08:	70 93 21 2a 	sts	0x2A21, r23	; 0x802a21 <myPID+0x27>
    1c0c:	80 93 22 2a 	sts	0x2A22, r24	; 0x802a22 <myPID+0x28>
    1c10:	90 93 23 2a 	sts	0x2A23, r25	; 0x802a23 <myPID+0x29>
    1c14:	40 90 20 2a 	lds	r4, 0x2A20	; 0x802a20 <myPID+0x26>
    1c18:	50 90 21 2a 	lds	r5, 0x2A21	; 0x802a21 <myPID+0x27>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:74

      if(outputSum > outMax) outputSum= outMax;
    1c1c:	60 90 22 2a 	lds	r6, 0x2A22	; 0x802a22 <myPID+0x28>
    1c20:	70 90 23 2a 	lds	r7, 0x2A23	; 0x802a23 <myPID+0x29>
    1c24:	10 91 30 2a 	lds	r17, 0x2A30	; 0x802a30 <myPID+0x36>
    1c28:	90 91 31 2a 	lds	r25, 0x2A31	; 0x802a31 <myPID+0x37>
    1c2c:	9e 87       	std	Y+14, r25	; 0x0e
    1c2e:	a0 91 32 2a 	lds	r26, 0x2A32	; 0x802a32 <myPID+0x38>
    1c32:	ad 87       	std	Y+13, r26	; 0x0d
    1c34:	00 91 33 2a 	lds	r16, 0x2A33	; 0x802a33 <myPID+0x39>
    1c38:	21 2f       	mov	r18, r17
    1c3a:	39 2f       	mov	r19, r25
    1c3c:	4a 2f       	mov	r20, r26
    1c3e:	50 2f       	mov	r21, r16
    1c40:	c3 01       	movw	r24, r6
    1c42:	b2 01       	movw	r22, r4
    1c44:	0e 94 b4 39 	call	0x7368	; 0x7368 <__gesf2>
    1c48:	18 16       	cp	r1, r24
    1c4a:	0c f0       	brlt	.+2      	; 0x1c4e <PID_RUN()+0x186>
    1c4c:	96 c0       	rjmp	.+300    	; 0x1d7a <PID_RUN()+0x2b2>
    1c4e:	81 2f       	mov	r24, r17
    1c50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c52:	ad 85       	ldd	r26, Y+13	; 0x0d
    1c54:	b0 2f       	mov	r27, r16
    1c56:	80 93 20 2a 	sts	0x2A20, r24	; 0x802a20 <myPID+0x26>
    1c5a:	90 93 21 2a 	sts	0x2A21, r25	; 0x802a21 <myPID+0x27>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:75
      else if(outputSum < outMin) outputSum= outMin;
    1c5e:	a0 93 22 2a 	sts	0x2A22, r26	; 0x802a22 <myPID+0x28>
    1c62:	b0 93 23 2a 	sts	0x2A23, r27	; 0x802a23 <myPID+0x29>
    1c66:	33 20       	and	r3, r3
    1c68:	09 f4       	brne	.+2      	; 0x1c6c <PID_RUN()+0x1a4>
    1c6a:	a0 c0       	rjmp	.+320    	; 0x1dac <PID_RUN()+0x2e4>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:79

      /*Add Proportional on Error, if P_ON_E is specified*/
	   double output;
      if(pOnE) output = kp * error;
    1c6c:	20 91 06 2a 	lds	r18, 0x2A06	; 0x802a06 <myPID+0xc>
    1c70:	30 91 07 2a 	lds	r19, 0x2A07	; 0x802a07 <myPID+0xd>
    1c74:	40 91 08 2a 	lds	r20, 0x2A08	; 0x802a08 <myPID+0xe>
    1c78:	50 91 09 2a 	lds	r21, 0x2A09	; 0x802a09 <myPID+0xf>
    1c7c:	c5 01       	movw	r24, r10
    1c7e:	b4 01       	movw	r22, r8
    1c80:	0e 94 b8 39 	call	0x7370	; 0x7370 <__mulsf3>
    1c84:	4b 01       	movw	r8, r22
    1c86:	5c 01       	movw	r10, r24
    1c88:	20 91 0e 2a 	lds	r18, 0x2A0E	; 0x802a0e <myPID+0x14>
    1c8c:	30 91 0f 2a 	lds	r19, 0x2A0F	; 0x802a0f <myPID+0x15>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:83
      else output = 0;

      /*Compute Rest of PID Output*/
      output += outputSum - kd * dInput;
    1c90:	40 91 10 2a 	lds	r20, 0x2A10	; 0x802a10 <myPID+0x16>
    1c94:	50 91 11 2a 	lds	r21, 0x2A11	; 0x802a11 <myPID+0x17>
    1c98:	c7 01       	movw	r24, r14
    1c9a:	b6 01       	movw	r22, r12
    1c9c:	0e 94 b8 39 	call	0x7370	; 0x7370 <__mulsf3>
    1ca0:	9b 01       	movw	r18, r22
    1ca2:	ac 01       	movw	r20, r24
    1ca4:	60 91 20 2a 	lds	r22, 0x2A20	; 0x802a20 <myPID+0x26>
    1ca8:	70 91 21 2a 	lds	r23, 0x2A21	; 0x802a21 <myPID+0x27>
    1cac:	80 91 22 2a 	lds	r24, 0x2A22	; 0x802a22 <myPID+0x28>
    1cb0:	90 91 23 2a 	lds	r25, 0x2A23	; 0x802a23 <myPID+0x29>
    1cb4:	0e 94 00 38 	call	0x7000	; 0x7000 <__subsf3>
    1cb8:	a5 01       	movw	r20, r10
    1cba:	94 01       	movw	r18, r8
    1cbc:	0e 94 01 38 	call	0x7002	; 0x7002 <__addsf3>
    1cc0:	6b 01       	movw	r12, r22
    1cc2:	7c 01       	movw	r14, r24
    1cc4:	9b 01       	movw	r18, r22
    1cc6:	ac 01       	movw	r20, r24
    1cc8:	61 2f       	mov	r22, r17
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:85
	  
	    if(output > outMax) output = outMax;
    1cca:	7e 85       	ldd	r23, Y+14	; 0x0e
    1ccc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cce:	90 2f       	mov	r25, r16
    1cd0:	0e 94 65 38 	call	0x70ca	; 0x70ca <__cmpsf2>
    1cd4:	87 fd       	sbrc	r24, 7
    1cd6:	18 c0       	rjmp	.+48     	; 0x1d08 <PID_RUN()+0x240>
    1cd8:	10 91 2c 2a 	lds	r17, 0x2A2C	; 0x802a2c <myPID+0x32>
    1cdc:	90 91 2d 2a 	lds	r25, 0x2A2D	; 0x802a2d <myPID+0x33>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:86
      else if(output < outMin) output = outMin;
    1ce0:	9e 87       	std	Y+14, r25	; 0x0e
    1ce2:	a0 91 2e 2a 	lds	r26, 0x2A2E	; 0x802a2e <myPID+0x34>
    1ce6:	ad 87       	std	Y+13, r26	; 0x0d
    1ce8:	00 91 2f 2a 	lds	r16, 0x2A2F	; 0x802a2f <myPID+0x35>
    1cec:	21 2f       	mov	r18, r17
    1cee:	39 2f       	mov	r19, r25
    1cf0:	4a 2f       	mov	r20, r26
    1cf2:	50 2f       	mov	r21, r16
    1cf4:	b6 01       	movw	r22, r12
    1cf6:	c7 01       	movw	r24, r14
    1cf8:	0e 94 65 38 	call	0x70ca	; 0x70ca <__cmpsf2>
    1cfc:	87 fd       	sbrc	r24, 7
    1cfe:	04 c0       	rjmp	.+8      	; 0x1d08 <PID_RUN()+0x240>
PID_RUN():
    1d00:	1c 2d       	mov	r17, r12
    1d02:	de 86       	std	Y+14, r13	; 0x0e
    1d04:	ed 86       	std	Y+13, r14	; 0x0d
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:83
	   double output;
      if(pOnE) output = kp * error;
      else output = 0;

      /*Compute Rest of PID Output*/
      output += outputSum - kd * dInput;
    1d06:	0f 2d       	mov	r16, r15
Compute():
    1d08:	e0 91 18 2a 	lds	r30, 0x2A18	; 0x802a18 <myPID+0x1e>
    1d0c:	f0 91 19 2a 	lds	r31, 0x2A19	; 0x802a19 <myPID+0x1f>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:87
	  
	    if(output > outMax) output = outMax;
      else if(output < outMin) output = outMin;
	    *myOutput = output;
    1d10:	81 2f       	mov	r24, r17
    1d12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d14:	ad 85       	ldd	r26, Y+13	; 0x0d
    1d16:	b0 2f       	mov	r27, r16
    1d18:	80 83       	st	Z, r24
    1d1a:	91 83       	std	Z+1, r25	; 0x01
    1d1c:	a2 83       	std	Z+2, r26	; 0x02
    1d1e:	b3 83       	std	Z+3, r27	; 0x03
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	9a 81       	ldd	r25, Y+2	; 0x02
    1d24:	ab 81       	ldd	r26, Y+3	; 0x03
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:90

      /*Remember some variables for next time*/
      lastInput = input;
    1d26:	bc 81       	ldd	r27, Y+4	; 0x04
    1d28:	80 93 24 2a 	sts	0x2A24, r24	; 0x802a24 <myPID+0x2a>
    1d2c:	90 93 25 2a 	sts	0x2A25, r25	; 0x802a25 <myPID+0x2b>
    1d30:	a0 93 26 2a 	sts	0x2A26, r26	; 0x802a26 <myPID+0x2c>
    1d34:	b0 93 27 2a 	sts	0x2A27, r27	; 0x802a27 <myPID+0x2d>
    1d38:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3c:	af 81       	ldd	r26, Y+7	; 0x07
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:91
      lastTime = now;
    1d3e:	b8 85       	ldd	r27, Y+8	; 0x08
    1d40:	80 93 1c 2a 	sts	0x2A1C, r24	; 0x802a1c <myPID+0x22>
    1d44:	90 93 1d 2a 	sts	0x2A1D, r25	; 0x802a1d <myPID+0x23>
    1d48:	a0 93 1e 2a 	sts	0x2A1E, r26	; 0x802a1e <myPID+0x24>
    1d4c:	b0 93 1f 2a 	sts	0x2A1F, r27	; 0x802a1f <myPID+0x25>
PID_RUN():
    1d50:	2e 96       	adiw	r28, 0x0e	; 14
    1d52:	cd bf       	out	0x3d, r28	; 61
    1d54:	de bf       	out	0x3e, r29	; 62
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Pid.cpp:33
   myPID.Compute();  
}
    1d56:	df 91       	pop	r29
    1d58:	cf 91       	pop	r28
    1d5a:	1f 91       	pop	r17
    1d5c:	0f 91       	pop	r16
    1d5e:	ff 90       	pop	r15
    1d60:	ef 90       	pop	r14
    1d62:	df 90       	pop	r13
    1d64:	cf 90       	pop	r12
    1d66:	bf 90       	pop	r11
    1d68:	af 90       	pop	r10
    1d6a:	9f 90       	pop	r9
    1d6c:	8f 90       	pop	r8
    1d6e:	7f 90       	pop	r7
    1d70:	6f 90       	pop	r6
    1d72:	5f 90       	pop	r5
    1d74:	4f 90       	pop	r4
    1d76:	3f 90       	pop	r3
    1d78:	08 95       	ret
Compute():
    1d7a:	80 91 2c 2a 	lds	r24, 0x2A2C	; 0x802a2c <myPID+0x32>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:75

      /*Add Proportional on Measurement, if P_ON_M is specified*/
      if(!pOnE) outputSum-= kp * dInput;

      if(outputSum > outMax) outputSum= outMax;
      else if(outputSum < outMin) outputSum= outMin;
    1d7e:	90 91 2d 2a 	lds	r25, 0x2A2D	; 0x802a2d <myPID+0x33>
    1d82:	a0 91 2e 2a 	lds	r26, 0x2A2E	; 0x802a2e <myPID+0x34>
    1d86:	b0 91 2f 2a 	lds	r27, 0x2A2F	; 0x802a2f <myPID+0x35>
    1d8a:	89 87       	std	Y+9, r24	; 0x09
    1d8c:	9a 87       	std	Y+10, r25	; 0x0a
    1d8e:	ab 87       	std	Y+11, r26	; 0x0b
    1d90:	bc 87       	std	Y+12, r27	; 0x0c
    1d92:	9c 01       	movw	r18, r24
    1d94:	ad 01       	movw	r20, r26
    1d96:	c3 01       	movw	r24, r6
    1d98:	b2 01       	movw	r22, r4
    1d9a:	0e 94 65 38 	call	0x70ca	; 0x70ca <__cmpsf2>
    1d9e:	87 ff       	sbrs	r24, 7
    1da0:	62 cf       	rjmp	.-316    	; 0x1c66 <PID_RUN()+0x19e>
    1da2:	89 85       	ldd	r24, Y+9	; 0x09
    1da4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da6:	ab 85       	ldd	r26, Y+11	; 0x0b
    1da8:	bc 85       	ldd	r27, Y+12	; 0x0c
    1daa:	55 cf       	rjmp	.-342    	; 0x1c56 <PID_RUN()+0x18e>
PID_RUN():
    1dac:	81 2c       	mov	r8, r1
    1dae:	91 2c       	mov	r9, r1
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Arduino-PID-Library-master/PID_v1.cpp:80

      /*Add Proportional on Error, if P_ON_E is specified*/
	   double output;
      if(pOnE) output = kp * error;
      else output = 0;
    1db0:	54 01       	movw	r10, r8
    1db2:	6a cf       	rjmp	.-300    	; 0x1c88 <PID_RUN()+0x1c0>

00001db4 <RESET_LONG_PRESS_START()>:
RESET_LONG_PRESS_START():
    1db4:	80 91 85 28 	lds	r24, 0x2885	; 0x802885 <checkTempRaised>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:585
}
}

void RESET_LONG_PRESS_START()
{
  if(checkTempRaised==0)
    1db8:	81 11       	cpse	r24, r1
    1dba:	22 c0       	rjmp	.+68     	; 0x1e00 <RESET_LONG_PRESS_START()+0x4c>
    1dbc:	80 91 50 29 	lds	r24, 0x2950	; 0x802950 <LONG_PRESS>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:587
  {
  if (!LONG_PRESS )   
    1dc0:	81 11       	cpse	r24, r1
    1dc2:	16 c0       	rjmp	.+44     	; 0x1df0 <RESET_LONG_PRESS_START()+0x3c>
    1dc4:	80 91 1c 29 	lds	r24, 0x291C	; 0x80291c <ENTER_BUT>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:589
  {
  if(!ENTER_BUT)
    1dc8:	81 11       	cpse	r24, r1
    1dca:	0b c0       	rjmp	.+22     	; 0x1de2 <RESET_LONG_PRESS_START()+0x2e>
    1dcc:	10 92 a4 28 	sts	0x28A4, r1	; 0x8028a4 <RST_BUTT>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:591
  {
    RST_BUTT = 0;    
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:593
    LONG_PRESS = 0;
    SELECTION_PARAMETER = Unit_C_F;
    1dd4:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <SELECTION_PARAMETER>
    1dd8:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <SELECTION_PARAMETER+0x1>
    1ddc:	88 ec       	ldi	r24, 0xC8	; 200
    1dde:	90 e0       	ldi	r25, 0x00	; 0
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:606
  if (LONG_PRESS)
  {
    if(Service_Menu) Service_Menu=0;
    LONG_PRESS = 0;
  }
 Tick.BUZZ_INTERVAL(200); 
    1de0:	39 cc       	rjmp	.-1934   	; 0x1654 <Tclass::BUZZ_INTERVAL(int) [clone .constprop.56]>
    1de2:	10 92 1c 29 	sts	0x291C, r1	; 0x80291c <ENTER_BUT>
    1de6:	10 92 a2 28 	sts	0x28A2, r1	; 0x8028a2 <SET_MIN>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:597
    LONG_PRESS = 0;
    SELECTION_PARAMETER = Unit_C_F;
  }
  else
  {
      ENTER_BUT = 0;
    1dea:	10 92 a3 28 	sts	0x28A3, r1	; 0x8028a3 <SET_MIN+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:598
      SET_MIN = 0;
    1dee:	f6 cf       	rjmp	.-20     	; 0x1ddc <RESET_LONG_PRESS_START()+0x28>
    1df0:	80 91 ad 28 	lds	r24, 0x28AD	; 0x8028ad <Service_Menu>
    1df4:	81 11       	cpse	r24, r1
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:603
  }
  }
  if (LONG_PRESS)
  {
    if(Service_Menu) Service_Menu=0;
    1df6:	10 92 ad 28 	sts	0x28AD, r1	; 0x8028ad <Service_Menu>
    1dfa:	10 92 50 29 	sts	0x2950, r1	; 0x802950 <LONG_PRESS>
    1dfe:	ee cf       	rjmp	.-36     	; 0x1ddc <RESET_LONG_PRESS_START()+0x28>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:604
    LONG_PRESS = 0;
    1e00:	08 95       	ret

00001e02 <RESET_CLICK()>:
RESET_CLICK():
    1e02:	80 91 85 28 	lds	r24, 0x2885	; 0x802885 <checkTempRaised>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:608
  }
 Tick.BUZZ_INTERVAL(200); 
}
}
    1e06:	81 11       	cpse	r24, r1
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:553
  }
}

void RESET_CLICK()
{
  if(checkTempRaised==0)
    1e08:	5e c0       	rjmp	.+188    	; 0x1ec6 <RESET_CLICK()+0xc4>
    1e0a:	20 91 4f 29 	lds	r18, 0x294F	; 0x80294f <DEGREE_VALUE_SET>
    1e0e:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <SELECTION_PARAMETER>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:555
  {
   if (!DEGREE_VALUE_SET && SELECTION_PARAMETER == Cal1_Point  || 
    1e12:	90 91 0a 28 	lds	r25, 0x280A	; 0x80280a <SELECTION_PARAMETER+0x1>
    1e16:	21 11       	cpse	r18, r1
    1e18:	03 c0       	rjmp	.+6      	; 0x1e20 <RESET_CLICK()+0x1e>
    1e1a:	88 30       	cpi	r24, 0x08	; 8
    1e1c:	91 05       	cpc	r25, r1
    1e1e:	29 f0       	breq	.+10     	; 0x1e2a <RESET_CLICK()+0x28>
    1e20:	ac 01       	movw	r20, r24
    1e22:	4d 7f       	andi	r20, 0xFD	; 253
    1e24:	4c 30       	cpi	r20, 0x0C	; 12
    1e26:	51 05       	cpc	r21, r1
    1e28:	b9 f5       	brne	.+110    	; 0x1e98 <RESET_CLICK()+0x96>
    1e2a:	01 97       	sbiw	r24, 0x01	; 1
    1e2c:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <SELECTION_PARAMETER>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:558
        SELECTION_PARAMETER == Cal2LowPointTemp_Enter_Maintain || 
        SELECTION_PARAMETER == Cal2HighPointTemp_Enter_Maintain ) 
        SELECTION_PARAMETER--;
    1e30:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <SELECTION_PARAMETER+0x1>
    1e34:	80 91 50 29 	lds	r24, 0x2950	; 0x802950 <LONG_PRESS>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:569
      else
      {
        if(Mode_Button_Single_Press_In_Settings) Mode_Button_Single_Press_In_Settings=0;
      }
   }
  if (!LONG_PRESS )
    1e38:	81 11       	cpse	r24, r1
    1e3a:	2b c0       	rjmp	.+86     	; 0x1e92 <RESET_CLICK()+0x90>
    1e3c:	80 91 1c 29 	lds	r24, 0x291C	; 0x80291c <ENTER_BUT>
    1e40:	22 23       	and	r18, r18
    1e42:	d9 f1       	breq	.+118    	; 0x1eba <RESET_CLICK()+0xb8>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:571
  {
    if(DEGREE_VALUE_SET && ENTER_BUT==2)   ENTER_BUT=0;
    1e44:	82 30       	cpi	r24, 0x02	; 2
    1e46:	c9 f5       	brne	.+114    	; 0x1eba <RESET_CLICK()+0xb8>
    1e48:	10 92 1c 29 	sts	0x291C, r1	; 0x80291c <ENTER_BUT>
    1e4c:	80 91 1c 29 	lds	r24, 0x291C	; 0x80291c <ENTER_BUT>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:573
    else if (ENTER_BUT >= 1 && ENTER_BUT <= 4)  ENTER_BUT--;
   if ( ENTER_BUT == 5   &&  RATE_OF_HEATING >= 1  && CHECK_RATE_OF_HEATING == 1 )
    1e50:	85 30       	cpi	r24, 0x05	; 5
    1e52:	f9 f4       	brne	.+62     	; 0x1e92 <RESET_CLICK()+0x90>
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	40 e8       	ldi	r20, 0x80	; 128
    1e5a:	5f e3       	ldi	r21, 0x3F	; 63
    1e5c:	60 91 8a 28 	lds	r22, 0x288A	; 0x80288a <RATE_OF_HEATING>
    1e60:	70 91 8b 28 	lds	r23, 0x288B	; 0x80288b <RATE_OF_HEATING+0x1>
    1e64:	80 91 8c 28 	lds	r24, 0x288C	; 0x80288c <RATE_OF_HEATING+0x2>
    1e68:	90 91 8d 28 	lds	r25, 0x288D	; 0x80288d <RATE_OF_HEATING+0x3>
    1e6c:	0e 94 b4 39 	call	0x7368	; 0x7368 <__gesf2>
    1e70:	87 fd       	sbrc	r24, 7
    1e72:	0f c0       	rjmp	.+30     	; 0x1e92 <RESET_CLICK()+0x90>
    1e74:	80 91 87 28 	lds	r24, 0x2887	; 0x802887 <CHECK_RATE_OF_HEATING>
    1e78:	88 23       	and	r24, r24
    1e7a:	59 f0       	breq	.+22     	; 0x1e92 <RESET_CLICK()+0x90>
    1e7c:	10 92 8a 28 	sts	0x288A, r1	; 0x80288a <RATE_OF_HEATING>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:575
   {
     RATE_OF_HEATING =0;
    1e80:	10 92 8b 28 	sts	0x288B, r1	; 0x80288b <RATE_OF_HEATING+0x1>
    1e84:	10 92 8c 28 	sts	0x288C, r1	; 0x80288c <RATE_OF_HEATING+0x2>
    1e88:	10 92 8d 28 	sts	0x288D, r1	; 0x80288d <RATE_OF_HEATING+0x3>
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	80 93 87 28 	sts	0x2887, r24	; 0x802887 <CHECK_RATE_OF_HEATING>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:576
     CHECK_RATE_OF_HEATING =1;
    1e92:	82 e3       	ldi	r24, 0x32	; 50
    1e94:	90 e0       	ldi	r25, 0x00	; 0
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:579
   }
  }
   Tick.BUZZ_INTERVAL(50); 
    1e96:	de cb       	rjmp	.-2116   	; 0x1654 <Tclass::BUZZ_INTERVAL(int) [clone .constprop.56]>
    1e98:	8b 30       	cpi	r24, 0x0B	; 11
    1e9a:	91 05       	cpc	r25, r1
    1e9c:	11 f0       	breq	.+4      	; 0x1ea2 <RESET_CLICK()+0xa0>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:561
        SELECTION_PARAMETER == Cal2LowPointTemp_Enter_Maintain || 
        SELECTION_PARAMETER == Cal2HighPointTemp_Enter_Maintain ) 
        SELECTION_PARAMETER--;
   else
   {
      if (SELECTION_PARAMETER == Cal2LowDecimalTemp_Enter_Heat    || 
    1e9e:	0d 97       	sbiw	r24, 0x0d	; 13
    1ea0:	21 f4       	brne	.+8      	; 0x1eaa <RESET_CLICK()+0xa8>
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	80 93 bf 28 	sts	0x28BF, r24	; 0x8028bf <Mode_Button_Single_Press_In_Settings>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:563
          SELECTION_PARAMETER == Cal2HighDecimalTemp_Enter_Heat )    
          Mode_Button_Single_Press_In_Settings =1;
    1ea8:	c5 cf       	rjmp	.-118    	; 0x1e34 <RESET_CLICK()+0x32>
    1eaa:	80 91 bf 28 	lds	r24, 0x28BF	; 0x8028bf <Mode_Button_Single_Press_In_Settings>
    1eae:	88 23       	and	r24, r24
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:566
      else
      {
        if(Mode_Button_Single_Press_In_Settings) Mode_Button_Single_Press_In_Settings=0;
    1eb0:	09 f4       	brne	.+2      	; 0x1eb4 <RESET_CLICK()+0xb2>
    1eb2:	c0 cf       	rjmp	.-128    	; 0x1e34 <RESET_CLICK()+0x32>
    1eb4:	10 92 bf 28 	sts	0x28BF, r1	; 0x8028bf <Mode_Button_Single_Press_In_Settings>
    1eb8:	bd cf       	rjmp	.-134    	; 0x1e34 <RESET_CLICK()+0x32>
    1eba:	81 50       	subi	r24, 0x01	; 1
    1ebc:	84 30       	cpi	r24, 0x04	; 4
    1ebe:	30 f6       	brcc	.-116    	; 0x1e4c <RESET_CLICK()+0x4a>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:572
      }
   }
  if (!LONG_PRESS )
  {
    if(DEGREE_VALUE_SET && ENTER_BUT==2)   ENTER_BUT=0;
    else if (ENTER_BUT >= 1 && ENTER_BUT <= 4)  ENTER_BUT--;
    1ec0:	80 93 1c 29 	sts	0x291C, r24	; 0x80291c <ENTER_BUT>
    1ec4:	c3 cf       	rjmp	.-122    	; 0x1e4c <RESET_CLICK()+0x4a>
    1ec6:	08 95       	ret

00001ec8 <DEC_LONGPRESS()>:
DEC_LONGPRESS():
    1ec8:	80 91 85 28 	lds	r24, 0x2885	; 0x802885 <checkTempRaised>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:581
     CHECK_RATE_OF_HEATING =1;
   }
  }
   Tick.BUZZ_INTERVAL(50); 
}
}
    1ecc:	81 11       	cpse	r24, r1
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:495
}
}

void DEC_LONGPRESS()
{ 
  if(checkTempRaised==0)
    1ece:	12 c0       	rjmp	.+36     	; 0x1ef4 <DEC_LONGPRESS()+0x2c>
    1ed0:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <but1>
    1ed4:	81 11       	cpse	r24, r1
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:497
  {
  if(!but1)
    1ed6:	0e c0       	rjmp	.+28     	; 0x1ef4 <DEC_LONGPRESS()+0x2c>
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	80 93 b9 28 	sts	0x28B9, r24	; 0x8028b9 <BLINK_STATS>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:499
  {
    BLINK_STATS=1;
    1ede:	80 91 28 28 	lds	r24, 0x2828	; 0x802828 <INC5>
    1ee2:	8f 5f       	subi	r24, 0xFF	; 255
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:500
    INC5++;
    1ee4:	80 93 28 28 	sts	0x2828, r24	; 0x802828 <INC5>
    1ee8:	89 31       	cpi	r24, 0x19	; 25
    1eea:	24 f0       	brlt	.+8      	; 0x1ef4 <DEC_LONGPRESS()+0x2c>
    1eec:	0e 94 7d 02 	call	0x4fa	; 0x4fa <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:501
    if (INC5 >= 25)
    1ef0:	10 92 28 28 	sts	0x2828, r1	; 0x802828 <INC5>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:503
    {
      Butn.SET_CHANGE_DOWN();
    1ef4:	08 95       	ret

00001ef6 <DEC_CLICK()>:
DEC_CLICK():
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:504
      INC5 = 0;
    1ef6:	80 91 85 28 	lds	r24, 0x2885	; 0x802885 <checkTempRaised>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:508
    }
  }
}
}
    1efa:	81 11       	cpse	r24, r1
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:455
  }
}

void DEC_CLICK()
{ 
  if(checkTempRaised==0)
    1efc:	5a c0       	rjmp	.+180    	; 0x1fb2 <DEC_CLICK()+0xbc>
    1efe:	80 91 50 29 	lds	r24, 0x2950	; 0x802950 <LONG_PRESS>
    1f02:	88 23       	and	r24, r24
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:457
  {
  if (LONG_PRESS && !Mode_Button_Single_Press_In_Settings )
    1f04:	09 f4       	brne	.+2      	; 0x1f08 <DEC_CLICK()+0x12>
    1f06:	53 c0       	rjmp	.+166    	; 0x1fae <DEC_CLICK()+0xb8>
    1f08:	80 91 bf 28 	lds	r24, 0x28BF	; 0x8028bf <Mode_Button_Single_Press_In_Settings>
    1f0c:	81 11       	cpse	r24, r1
    1f0e:	4f c0       	rjmp	.+158    	; 0x1fae <DEC_CLICK()+0xb8>
    1f10:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <SELECTION_PARAMETER>
    1f14:	90 91 0a 28 	lds	r25, 0x280A	; 0x80280a <SELECTION_PARAMETER+0x1>
    1f18:	20 91 ad 28 	lds	r18, 0x28AD	; 0x8028ad <Service_Menu>
    1f1c:	21 11       	cpse	r18, r1
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:459
  {
    if(!Service_Menu){
    1f1e:	19 c0       	rjmp	.+50     	; 0x1f52 <DEC_CLICK()+0x5c>
    1f20:	01 96       	adiw	r24, 0x01	; 1
    1f22:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <SELECTION_PARAMETER>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:460
        SELECTION_PARAMETER++;
    1f26:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <SELECTION_PARAMETER+0x1>
    1f2a:	20 91 0a 29 	lds	r18, 0x290A	; 0x80290a <select_product_type>
    1f2e:	22 23       	and	r18, r18
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:462

      if(select_product_type )
    1f30:	39 f0       	breq	.+14     	; 0x1f40 <DEC_CLICK()+0x4a>
    1f32:	05 97       	sbiw	r24, 0x05	; 5
    1f34:	f4 f1       	brlt	.+124    	; 0x1fb2 <DEC_CLICK()+0xbc>
    1f36:	10 92 09 28 	sts	0x2809, r1	; 0x802809 <SELECTION_PARAMETER>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:464
      {
         if (SELECTION_PARAMETER > Auto_Resume_Enable)  SELECTION_PARAMETER = Stir_ON_OFF;
    1f3a:	10 92 0a 28 	sts	0x280A, r1	; 0x80280a <SELECTION_PARAMETER+0x1>
    1f3e:	08 95       	ret
    1f40:	05 97       	sbiw	r24, 0x05	; 5
    1f42:	bc f1       	brlt	.+110    	; 0x1fb2 <DEC_CLICK()+0xbc>
    1f44:	81 e0       	ldi	r24, 0x01	; 1
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:468
      }
      else 
      {
         if (SELECTION_PARAMETER > Auto_Resume_Enable)   SELECTION_PARAMETER = Unit_C_F;        
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <SELECTION_PARAMETER>
    1f4c:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <SELECTION_PARAMETER+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:474
      }
    }
    else 
    {
      if (SELECTION_PARAMETER == Calibration_Selection )     
                   SELECTION_PARAMETER = Cal1_Point;
    1f50:	08 95       	ret
    1f52:	86 30       	cpi	r24, 0x06	; 6
    1f54:	91 05       	cpc	r25, r1
    1f56:	19 f4       	brne	.+6      	; 0x1f5e <DEC_CLICK()+0x68>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:473
         if (SELECTION_PARAMETER > Auto_Resume_Enable)   SELECTION_PARAMETER = Unit_C_F;        
      }
    }
    else 
    {
      if (SELECTION_PARAMETER == Calibration_Selection )     
    1f58:	88 e0       	ldi	r24, 0x08	; 8
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	f5 cf       	rjmp	.-22     	; 0x1f48 <DEC_CLICK()+0x52>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:474
                   SELECTION_PARAMETER = Cal1_Point;
    1f5e:	20 91 b8 28 	lds	r18, 0x28B8	; 0x8028b8 <CAL2_START>
    1f62:	89 30       	cpi	r24, 0x09	; 9
    1f64:	91 05       	cpc	r25, r1
    1f66:	39 f4       	brne	.+14     	; 0x1f76 <DEC_CLICK()+0x80>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:475
      else if (SELECTION_PARAMETER == Cal2LowTemp_Set_Display  &&  CAL2_START )      
    1f68:	8b e0       	ldi	r24, 0x0B	; 11
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	21 11       	cpse	r18, r1
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:476
                      SELECTION_PARAMETER = Cal2LowDecimalTemp_Enter_Heat;
    1f6e:	ec cf       	rjmp	.-40     	; 0x1f48 <DEC_CLICK()+0x52>
    1f70:	80 e1       	ldi	r24, 0x10	; 16
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:475
    }
    else 
    {
      if (SELECTION_PARAMETER == Calibration_Selection )     
                   SELECTION_PARAMETER = Cal1_Point;
      else if (SELECTION_PARAMETER == Cal2LowTemp_Set_Display  &&  CAL2_START )      
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	e9 cf       	rjmp	.-46     	; 0x1f48 <DEC_CLICK()+0x52>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:478
                      SELECTION_PARAMETER = Cal2LowDecimalTemp_Enter_Heat;
      else if (CAL2_START == 0 && SELECTION_PARAMETER >= Cal2LowTemp_Set_Display && SELECTION_PARAMETER <= Cal2_Complete_Display  )  
                       SELECTION_PARAMETER = Slow_Fast_Heating;
    1f76:	21 11       	cpse	r18, r1
    1f78:	06 c0       	rjmp	.+12     	; 0x1f86 <DEC_CLICK()+0x90>
    1f7a:	89 30       	cpi	r24, 0x09	; 9
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:477
    {
      if (SELECTION_PARAMETER == Calibration_Selection )     
                   SELECTION_PARAMETER = Cal1_Point;
      else if (SELECTION_PARAMETER == Cal2LowTemp_Set_Display  &&  CAL2_START )      
                      SELECTION_PARAMETER = Cal2LowDecimalTemp_Enter_Heat;
      else if (CAL2_START == 0 && SELECTION_PARAMETER >= Cal2LowTemp_Set_Display && SELECTION_PARAMETER <= Cal2_Complete_Display  )  
    1f7c:	91 05       	cpc	r25, r1
    1f7e:	4c f0       	brlt	.+18     	; 0x1f92 <DEC_CLICK()+0x9c>
    1f80:	80 31       	cpi	r24, 0x10	; 16
    1f82:	91 05       	cpc	r25, r1
    1f84:	ac f3       	brlt	.-22     	; 0x1f70 <DEC_CLICK()+0x7a>
    1f86:	80 31       	cpi	r24, 0x10	; 16
    1f88:	91 05       	cpc	r25, r1
    1f8a:	19 f4       	brne	.+6      	; 0x1f92 <DEC_CLICK()+0x9c>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:479
                       SELECTION_PARAMETER = Slow_Fast_Heating;
      else if(SELECTION_PARAMETER ==  Slow_Fast_Heating)            
    1f8c:	81 e1       	ldi	r24, 0x11	; 17
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	db cf       	rjmp	.-74     	; 0x1f48 <DEC_CLICK()+0x52>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:480
              SELECTION_PARAMETER = Log;                  
    1f92:	81 31       	cpi	r24, 0x11	; 17
    1f94:	91 05       	cpc	r25, r1
    1f96:	19 f4       	brne	.+6      	; 0x1f9e <DEC_CLICK()+0xa8>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:481
      else if(SELECTION_PARAMETER ==  Log)            
    1f98:	82 e1       	ldi	r24, 0x12	; 18
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	d5 cf       	rjmp	.-86     	; 0x1f48 <DEC_CLICK()+0x52>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:482
              SELECTION_PARAMETER = FactoryAndSure_Reset;       
    1f9e:	82 31       	cpi	r24, 0x12	; 18
    1fa0:	91 05       	cpc	r25, r1
    1fa2:	1c f0       	brlt	.+6      	; 0x1faa <DEC_CLICK()+0xb4>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:483
      else if(SELECTION_PARAMETER >=  FactoryAndSure_Reset)            
    1fa4:	85 e0       	ldi	r24, 0x05	; 5
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	cf cf       	rjmp	.-98     	; 0x1f48 <DEC_CLICK()+0x52>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:484
              SELECTION_PARAMETER = Product_Selection_Parameter;
    1faa:	01 96       	adiw	r24, 0x01	; 1
    1fac:	cd cf       	rjmp	.-102    	; 0x1f48 <DEC_CLICK()+0x52>
    1fae:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <Bclass::SET_CHANGE_DOWN() [clone .constprop.68]>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:486
      else                                                 
             SELECTION_PARAMETER++;             
    1fb2:	08 95       	ret

00001fb4 <INC_LONGPRESS()>:
INC_LONGPRESS():
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:489
    }
  }
  if (!LONG_PRESS  || (LONG_PRESS && Mode_Button_Single_Press_In_Settings ))       Butn.SET_CHANGE_DOWN();
    1fb4:	80 91 85 28 	lds	r24, 0x2885	; 0x802885 <checkTempRaised>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:491
}
}
    1fb8:	81 11       	cpse	r24, r1
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:429
}
}

void INC_LONGPRESS()
{
  if(checkTempRaised==0)
    1fba:	12 c0       	rjmp	.+36     	; 0x1fe0 <INC_LONGPRESS()+0x2c>
    1fbc:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <but1>
    1fc0:	81 11       	cpse	r24, r1
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:431
  {
  if(!but1)
    1fc2:	0e c0       	rjmp	.+28     	; 0x1fe0 <INC_LONGPRESS()+0x2c>
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	80 93 b9 28 	sts	0x28B9, r24	; 0x8028b9 <BLINK_STATS>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:433
  {
    BLINK_STATS=1;
    1fca:	80 91 28 28 	lds	r24, 0x2828	; 0x802828 <INC5>
    1fce:	8f 5f       	subi	r24, 0xFF	; 255
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:434
    INC5++;
    1fd0:	80 93 28 28 	sts	0x2828, r24	; 0x802828 <INC5>
    1fd4:	89 31       	cpi	r24, 0x19	; 25
    1fd6:	24 f0       	brlt	.+8      	; 0x1fe0 <INC_LONGPRESS()+0x2c>
    1fd8:	0e 94 93 01 	call	0x326	; 0x326 <Bclass::SET_CHANGE_UP() [clone .constprop.69]>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:435
    if (INC5 >= 25)
    1fdc:	10 92 28 28 	sts	0x2828, r1	; 0x802828 <INC5>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:437
    {
      Butn.SET_CHANGE_UP();
    1fe0:	08 95       	ret

00001fe2 <INC_CLICK()>:
INC_CLICK():
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:438
      INC5 = 0;
    1fe2:	80 91 85 28 	lds	r24, 0x2885	; 0x802885 <checkTempRaised>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:442
    }
  }
}
}
    1fe6:	81 11       	cpse	r24, r1
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:384
  button4.tick();  
}

void INC_CLICK()
{ 
  if(checkTempRaised==0)
    1fe8:	26 c0       	rjmp	.+76     	; 0x2036 <INC_CLICK()+0x54>
    1fea:	80 91 50 29 	lds	r24, 0x2950	; 0x802950 <LONG_PRESS>
    1fee:	88 23       	and	r24, r24
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:386
  {
  if (LONG_PRESS && !Mode_Button_Single_Press_In_Settings )
    1ff0:	09 f4       	brne	.+2      	; 0x1ff4 <INC_CLICK()+0x12>
    1ff2:	45 c0       	rjmp	.+138    	; 0x207e <INC_CLICK()+0x9c>
    1ff4:	80 91 bf 28 	lds	r24, 0x28BF	; 0x8028bf <Mode_Button_Single_Press_In_Settings>
    1ff8:	81 11       	cpse	r24, r1
    1ffa:	41 c0       	rjmp	.+130    	; 0x207e <INC_CLICK()+0x9c>
    1ffc:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <SELECTION_PARAMETER>
    2000:	90 91 0a 28 	lds	r25, 0x280A	; 0x80280a <SELECTION_PARAMETER+0x1>
    2004:	20 91 ad 28 	lds	r18, 0x28AD	; 0x8028ad <Service_Menu>
    2008:	21 11       	cpse	r18, r1
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:388
  {    
    if(!Service_Menu)
    200a:	16 c0       	rjmp	.+44     	; 0x2038 <INC_CLICK()+0x56>
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <SELECTION_PARAMETER>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:390
    {
      SELECTION_PARAMETER--;                              //------------------- scroll down menu
    2012:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <SELECTION_PARAMETER+0x1>
    2016:	20 91 0a 29 	lds	r18, 0x290A	; 0x80290a <select_product_type>
    201a:	22 23       	and	r18, r18
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:391
      if(select_product_type )
    201c:	49 f0       	breq	.+18     	; 0x2030 <INC_CLICK()+0x4e>
    201e:	97 ff       	sbrs	r25, 7
    2020:	0a c0       	rjmp	.+20     	; 0x2036 <INC_CLICK()+0x54>
    2022:	84 e0       	ldi	r24, 0x04	; 4
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:393
      {
         if(SELECTION_PARAMETER < Stir_ON_OFF) SELECTION_PARAMETER = Auto_Resume_Enable;
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <SELECTION_PARAMETER>
    202a:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <SELECTION_PARAMETER+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:403
      }
    }
    else
    {
      if ( SELECTION_PARAMETER == Cal1_Point ) 
                              SELECTION_PARAMETER = Calibration_Selection;
    202e:	08 95       	ret
    2030:	18 16       	cp	r1, r24
    2032:	19 06       	cpc	r1, r25
    2034:	b4 f7       	brge	.-20     	; 0x2022 <INC_CLICK()+0x40>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:397
      {
         if(SELECTION_PARAMETER < Stir_ON_OFF) SELECTION_PARAMETER = Auto_Resume_Enable;
      }
      else 
      {
        if(SELECTION_PARAMETER < Unit_C_F) SELECTION_PARAMETER = Auto_Resume_Enable;        
    2036:	08 95       	ret
    2038:	88 30       	cpi	r24, 0x08	; 8
    203a:	91 05       	cpc	r25, r1
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:425
          
    }
  }  
  if (!LONG_PRESS  || (LONG_PRESS && Mode_Button_Single_Press_In_Settings ))    Butn.SET_CHANGE_UP();
}
}
    203c:	19 f4       	brne	.+6      	; 0x2044 <INC_CLICK()+0x62>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:402
        if(SELECTION_PARAMETER < Unit_C_F) SELECTION_PARAMETER = Auto_Resume_Enable;        
      }
    }
    else
    {
      if ( SELECTION_PARAMETER == Cal1_Point ) 
    203e:	86 e0       	ldi	r24, 0x06	; 6
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	f1 cf       	rjmp	.-30     	; 0x2026 <INC_CLICK()+0x44>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:403
                              SELECTION_PARAMETER = Calibration_Selection;
    2044:	8b 30       	cpi	r24, 0x0B	; 11
    2046:	91 05       	cpc	r25, r1
    2048:	19 f4       	brne	.+6      	; 0x2050 <INC_CLICK()+0x6e>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:405
                              
      else if (SELECTION_PARAMETER == Cal2LowDecimalTemp_Enter_Heat ) 
    204a:	89 e0       	ldi	r24, 0x09	; 9
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	eb cf       	rjmp	.-42     	; 0x2026 <INC_CLICK()+0x44>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:406
                                SELECTION_PARAMETER = Cal2LowTemp_Set_Display;
    2050:	81 31       	cpi	r24, 0x11	; 17
    2052:	91 05       	cpc	r25, r1
    2054:	19 f4       	brne	.+6      	; 0x205c <INC_CLICK()+0x7a>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:408
                                
      else if(SELECTION_PARAMETER == Log)   
    2056:	80 e1       	ldi	r24, 0x10	; 16
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	e5 cf       	rjmp	.-54     	; 0x2026 <INC_CLICK()+0x44>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:409
                                SELECTION_PARAMETER = Slow_Fast_Heating;
    205c:	82 31       	cpi	r24, 0x12	; 18
    205e:	91 05       	cpc	r25, r1
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:411
                                                         
      else if(SELECTION_PARAMETER == FactoryAndSure_Reset)   
    2060:	19 f4       	brne	.+6      	; 0x2068 <INC_CLICK()+0x86>
    2062:	81 e1       	ldi	r24, 0x11	; 17
    2064:	90 e0       	ldi	r25, 0x00	; 0
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:412
                                SELECTION_PARAMETER = Log;
    2066:	df cf       	rjmp	.-66     	; 0x2026 <INC_CLICK()+0x44>
    2068:	80 31       	cpi	r24, 0x10	; 16
    206a:	91 05       	cpc	r25, r1
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:414
                                
      else if(SELECTION_PARAMETER == Slow_Fast_Heating)   
    206c:	71 f3       	breq	.-36     	; 0x204a <INC_CLICK()+0x68>
    206e:	86 30       	cpi	r24, 0x06	; 6
    2070:	91 05       	cpc	r25, r1
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:417
                                SELECTION_PARAMETER = Cal2LowTemp_Set_Display;  
                                                              
      else if (SELECTION_PARAMETER < Calibration_Selection)
    2072:	1c f4       	brge	.+6      	; 0x207a <INC_CLICK()+0x98>
    2074:	82 e1       	ldi	r24, 0x12	; 18
    2076:	90 e0       	ldi	r25, 0x00	; 0
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:418
       SELECTION_PARAMETER = FactoryAndSure_Reset;  
    2078:	d6 cf       	rjmp	.-84     	; 0x2026 <INC_CLICK()+0x44>
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	d4 cf       	rjmp	.-88     	; 0x2026 <INC_CLICK()+0x44>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:419
      else                      SELECTION_PARAMETER--;      
    207e:	0c 94 93 01 	jmp	0x326	; 0x326 <Bclass::SET_CHANGE_UP() [clone .constprop.69]>

00002082 <MODE_LONG_PRESS_START()>:
MODE_LONG_PRESS_START():
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:423
          
    }
  }  
  if (!LONG_PRESS  || (LONG_PRESS && Mode_Button_Single_Press_In_Settings ))    Butn.SET_CHANGE_UP();
    2082:	80 91 85 28 	lds	r24, 0x2885	; 0x802885 <checkTempRaised>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:357
}
}

void MODE_LONG_PRESS_START()
{ 
  if(checkTempRaised==0)
    2086:	81 11       	cpse	r24, r1
    2088:	25 c0       	rjmp	.+74     	; 0x20d4 <MODE_LONG_PRESS_START()+0x52>
    208a:	80 91 1c 29 	lds	r24, 0x291C	; 0x80291c <ENTER_BUT>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:359
  {
  if (!ENTER_BUT)
    208e:	81 11       	cpse	r24, r1
    2090:	17 c0       	rjmp	.+46     	; 0x20c0 <MODE_LONG_PRESS_START()+0x3e>
    2092:	80 91 50 29 	lds	r24, 0x2950	; 0x802950 <LONG_PRESS>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:361
  {
    if (!LONG_PRESS )      //------------------at home page  user setting
    2096:	81 11       	cpse	r24, r1
    2098:	13 c0       	rjmp	.+38     	; 0x20c0 <MODE_LONG_PRESS_START()+0x3e>
    209a:	8e e5       	ldi	r24, 0x5E	; 94
    209c:	91 e0       	ldi	r25, 0x01	; 1
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:363
    {
      i = 350;
    209e:	80 93 ba 28 	sts	0x28BA, r24	; 0x8028ba <i>
    20a2:	90 93 bb 28 	sts	0x28BB, r25	; 0x8028bb <i+0x1>
    20a6:	80 91 0a 29 	lds	r24, 0x290A	; 0x80290a <select_product_type>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:364
      if (select_product_type ) SELECTION_PARAMETER = Stir_ON_OFF;
    20aa:	88 23       	and	r24, r24
    20ac:	61 f0       	breq	.+24     	; 0x20c6 <MODE_LONG_PRESS_START()+0x44>
    20ae:	10 92 09 28 	sts	0x2809, r1	; 0x802809 <SELECTION_PARAMETER>
    20b2:	10 92 0a 28 	sts	0x280A, r1	; 0x80280a <SELECTION_PARAMETER+0x1>
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	80 93 50 29 	sts	0x2950, r24	; 0x802950 <LONG_PRESS>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:366
      else                      SELECTION_PARAMETER = Unit_C_F;
      LONG_PRESS = 1;      //------------------go to menu //Siddhesh
    20bc:	80 93 a4 28 	sts	0x28A4, r24	; 0x8028a4 <RST_BUTT>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:367
      RST_BUTT = 1;
    20c0:	88 ec       	ldi	r24, 0xC8	; 200
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:370
    }   
  }
 Tick.BUZZ_INTERVAL(200); 
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	c7 ca       	rjmp	.-2674   	; 0x1654 <Tclass::BUZZ_INTERVAL(int) [clone .constprop.56]>
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	90 e0       	ldi	r25, 0x00	; 0
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:365
  {
    if (!LONG_PRESS )      //------------------at home page  user setting
    {
      i = 350;
      if (select_product_type ) SELECTION_PARAMETER = Stir_ON_OFF;
      else                      SELECTION_PARAMETER = Unit_C_F;
    20ca:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <SELECTION_PARAMETER>
    20ce:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <SELECTION_PARAMETER+0x1>
    20d2:	f1 cf       	rjmp	.-30     	; 0x20b6 <MODE_LONG_PRESS_START()+0x34>
    20d4:	08 95       	ret

000020d6 <UartClass::begin(unsigned long)>:
begin():
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:372
      RST_BUTT = 1;
    }   
  }
 Tick.BUZZ_INTERVAL(200); 
}
}
    20d6:	dc 01       	movw	r26, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.h:160

  public:
    inline UartClass(volatile USART_t *hwserial_module, uint8_t hwserial_rx_pin, uint8_t hwserial_tx_pin, uint8_t hwserial_rx_pin_swap, uint8_t hwserial_tx_pin_swap, uint8_t dre_vect_num, uint8_t uart_mux, uint8_t uart_mux_swap);
    bool pins(uint8_t tx, uint8_t rx);
    bool swap(uint8_t state = 1);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    20d8:	ed 91       	ld	r30, X+
    20da:	fc 91       	ld	r31, X
    20dc:	04 88       	ldd	r0, Z+20	; 0x14
    20de:	f5 89       	ldd	r31, Z+21	; 0x15
    20e0:	e0 2d       	mov	r30, r0
    20e2:	23 e0       	ldi	r18, 0x03	; 3
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	09 94       	ijmp

000020e8 <EERef::operator*() const>:
operator*():
    20e8:	fc 01       	movw	r30, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:52
{
  EERef(const int index)
      : index(index) {}

  //Access/read members.
  uint8_t operator*() const { return nvm_read_byte(index); }
    20ea:	80 81       	ld	r24, Z
    20ec:	91 81       	ldd	r25, Z+1	; 0x01
    20ee:	fc 01       	movw	r30, r24
    20f0:	ff 27       	eor	r31, r31
    20f2:	90 fd       	sbrc	r25, 0
    20f4:	06 c0       	rjmp	.+12     	; 0x2102 <EERef::operator*() const+0x1a>
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	94 e1       	ldi	r25, 0x14	; 20
    20fa:	e8 2b       	or	r30, r24
    20fc:	f9 2b       	or	r31, r25
    20fe:	80 81       	ld	r24, Z
    2100:	08 95       	ret
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	93 e1       	ldi	r25, 0x13	; 19
    2106:	f9 cf       	rjmp	.-14     	; 0x20fa <EERef::operator*() const+0x12>

00002108 <int& EEPROMClass::get<int>(int, int&) [clone .isra.4]>:
_ZN11EEPROMClass3getIiEERT_iS2_.isra.4():
    2108:	ef 92       	push	r14
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:141
  EEPtr end() { return length(); } //Standards requires this to be the item after the last valid entry. The returned pointer is invalid.
  uint16_t length() { return EEPROM_SIZE; }

  //Functionality to 'get' and 'put' objects to and from EEPROM.
  template <typename T>
  T &get(int idx, T &t)
    210a:	ff 92       	push	r15
    210c:	0f 93       	push	r16
    210e:	1f 93       	push	r17
    2110:	cf 93       	push	r28
    2112:	df 93       	push	r29
    2114:	00 d0       	rcall	.+0      	; 0x2116 <int& EEPROMClass::get<int>(int, int&) [clone .isra.4]+0xe>
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
    211a:	8c 01       	movw	r16, r24
    211c:	7b 01       	movw	r14, r22
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:145
  {
    EEPtr e = idx;
    uint8_t *ptr = (uint8_t *)&t;
    for (int count = sizeof(T); count; --count, ++e) *ptr++ = *e;
    211e:	89 83       	std	Y+1, r24	; 0x01
    2120:	9a 83       	std	Y+2, r25	; 0x02
_ZNK5EERefcvhEv():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:53
  EERef(const int index)
      : index(index) {}

  //Access/read members.
  uint8_t operator*() const { return nvm_read_byte(index); }
  operator uint8_t() const { return **this; }
    2122:	ce 01       	movw	r24, r28
    2124:	01 96       	adiw	r24, 0x01	; 1
    2126:	e0 df       	rcall	.-64     	; 0x20e8 <EERef::operator*() const>
_ZN11EEPROMClass3getIiEERT_iS2_.isra.4():
    2128:	f7 01       	movw	r30, r14
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:145
  template <typename T>
  T &get(int idx, T &t)
  {
    EEPtr e = idx;
    uint8_t *ptr = (uint8_t *)&t;
    for (int count = sizeof(T); count; --count, ++e) *ptr++ = *e;
    212a:	80 83       	st	Z, r24
_ZN5EEPtrppEv():
    212c:	0f 5f       	subi	r16, 0xFF	; 255
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:111
  //Iterator functionality.
  bool operator!=(const EEPtr &ptr) { return index != ptr.index; }
  EERef operator*() { return index; }

  /** Prefix & Postfix increment/decrement **/
  EEPtr &operator++() { return ++index, *this; }
    212e:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN11EEPROMClass3getIiEERT_iS2_.isra.4():
    2130:	09 83       	std	Y+1, r16	; 0x01
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:145
  template <typename T>
  T &get(int idx, T &t)
  {
    EEPtr e = idx;
    uint8_t *ptr = (uint8_t *)&t;
    for (int count = sizeof(T); count; --count, ++e) *ptr++ = *e;
    2132:	1a 83       	std	Y+2, r17	; 0x02
_ZNK5EERefcvhEv():
    2134:	ce 01       	movw	r24, r28
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:53
  EERef(const int index)
      : index(index) {}

  //Access/read members.
  uint8_t operator*() const { return nvm_read_byte(index); }
  operator uint8_t() const { return **this; }
    2136:	01 96       	adiw	r24, 0x01	; 1
    2138:	d7 df       	rcall	.-82     	; 0x20e8 <EERef::operator*() const>
_ZN11EEPROMClass3getIiEERT_iS2_.isra.4():
    213a:	f7 01       	movw	r30, r14
    213c:	81 83       	std	Z+1, r24	; 0x01
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:145
  template <typename T>
  T &get(int idx, T &t)
  {
    EEPtr e = idx;
    uint8_t *ptr = (uint8_t *)&t;
    for (int count = sizeof(T); count; --count, ++e) *ptr++ = *e;
    213e:	c7 01       	movw	r24, r14
    2140:	0f 90       	pop	r0
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:147
    return t;
  }
    2142:	0f 90       	pop	r0
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	1f 91       	pop	r17
    214a:	0f 91       	pop	r16
    214c:	ff 90       	pop	r15
    214e:	ef 90       	pop	r14
    2150:	08 95       	ret

00002152 <long& EEPROMClass::get<long>(int, long&) [clone .isra.6]>:
_ZN11EEPROMClass3getIlEERT_iS2_.isra.6():
    2152:	af 92       	push	r10
    2154:	bf 92       	push	r11
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:141
  EEPtr end() { return length(); } //Standards requires this to be the item after the last valid entry. The returned pointer is invalid.
  uint16_t length() { return EEPROM_SIZE; }

  //Functionality to 'get' and 'put' objects to and from EEPROM.
  template <typename T>
  T &get(int idx, T &t)
    2156:	cf 92       	push	r12
    2158:	df 92       	push	r13
    215a:	ef 92       	push	r14
    215c:	ff 92       	push	r15
    215e:	0f 93       	push	r16
    2160:	1f 93       	push	r17
    2162:	cf 93       	push	r28
    2164:	df 93       	push	r29
    2166:	00 d0       	rcall	.+0      	; 0x2168 <long& EEPROMClass::get<long>(int, long&) [clone .isra.6]+0x16>
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
    216c:	8b 01       	movw	r16, r22
    216e:	6b 01       	movw	r12, r22
    2170:	24 e0       	ldi	r18, 0x04	; 4
    2172:	c2 0e       	add	r12, r18
    2174:	d1 1c       	adc	r13, r1
    2176:	7b 01       	movw	r14, r22
    2178:	5c 01       	movw	r10, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:145
  {
    EEPtr e = idx;
    uint8_t *ptr = (uint8_t *)&t;
    for (int count = sizeof(T); count; --count, ++e) *ptr++ = *e;
    217a:	a6 1a       	sub	r10, r22
    217c:	b7 0a       	sbc	r11, r23
    217e:	c5 01       	movw	r24, r10
    2180:	8e 0d       	add	r24, r14
    2182:	9f 1d       	adc	r25, r15
    2184:	89 83       	std	Y+1, r24	; 0x01
    2186:	9a 83       	std	Y+2, r25	; 0x02
_ZNK5EERefcvhEv():
    2188:	ce 01       	movw	r24, r28
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:53
  EERef(const int index)
      : index(index) {}

  //Access/read members.
  uint8_t operator*() const { return nvm_read_byte(index); }
  operator uint8_t() const { return **this; }
    218a:	01 96       	adiw	r24, 0x01	; 1
    218c:	ad df       	rcall	.-166    	; 0x20e8 <EERef::operator*() const>
_ZN11EEPROMClass3getIlEERT_iS2_.isra.6():
    218e:	f7 01       	movw	r30, r14
    2190:	81 93       	st	Z+, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:145
  template <typename T>
  T &get(int idx, T &t)
  {
    EEPtr e = idx;
    uint8_t *ptr = (uint8_t *)&t;
    for (int count = sizeof(T); count; --count, ++e) *ptr++ = *e;
    2192:	7f 01       	movw	r14, r30
    2194:	ec 15       	cp	r30, r12
    2196:	fd 05       	cpc	r31, r13
    2198:	91 f7       	brne	.-28     	; 0x217e <long& EEPROMClass::get<long>(int, long&) [clone .isra.6]+0x2c>
    219a:	c8 01       	movw	r24, r16
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:147
    return t;
  }
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	df 91       	pop	r29
    21a2:	cf 91       	pop	r28
    21a4:	1f 91       	pop	r17
    21a6:	0f 91       	pop	r16
    21a8:	ff 90       	pop	r15
    21aa:	ef 90       	pop	r14
    21ac:	df 90       	pop	r13
    21ae:	cf 90       	pop	r12
    21b0:	bf 90       	pop	r11
    21b2:	af 90       	pop	r10
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:130

struct EEPROMClass
{
  //Basic user access methods.
  EERef operator[](const int idx) { return idx; }
  uint8_t read(int idx) { return EERef(idx); }
    21b4:	08 95       	ret

000021b6 <EEPROMClass::read(int) [clone .isra.0]>:
_ZN11EEPROMClass4readEi.isra.0():
    21b6:	cf 93       	push	r28
    21b8:	df 93       	push	r29
    21ba:	00 d0       	rcall	.+0      	; 0x21bc <EEPROMClass::read(int) [clone .isra.0]+0x6>
    21bc:	cd b7       	in	r28, 0x3d	; 61
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:49
}

struct EERef
{
  EERef(const int index)
      : index(index) {}
    21be:	de b7       	in	r29, 0x3e	; 62
_ZN5EERefC2Ei():
    21c0:	89 83       	std	Y+1, r24	; 0x01
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:53

  //Access/read members.
  uint8_t operator*() const { return nvm_read_byte(index); }
  operator uint8_t() const { return **this; }
    21c2:	9a 83       	std	Y+2, r25	; 0x02
_ZNK5EERefcvhEv():
    21c4:	ce 01       	movw	r24, r28
    21c6:	01 96       	adiw	r24, 0x01	; 1
    21c8:	8f df       	rcall	.-226    	; 0x20e8 <EERef::operator*() const>
_ZN11EEPROMClass4readEi.isra.0():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:130

struct EEPROMClass
{
  //Basic user access methods.
  EERef operator[](const int idx) { return idx; }
  uint8_t read(int idx) { return EERef(idx); }
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	df 91       	pop	r29
    21d0:	cf 91       	pop	r28
    21d2:	08 95       	ret

000021d4 <nvm_write_byte(unsigned int, unsigned char)>:
nvm_write_byte():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:37

#define nvm_read_byte(idx) *(uint8_t *)((idx & 0xFF) | ((idx & 0x100) ? USER_SIGNATURES_START : EEPROM_START))

static void nvm_write_byte(uint16_t idx, uint8_t dat)
{
  *(uint8_t *)((idx & 0xFF) | ((idx & 0x100) ? USER_SIGNATURES_START : EEPROM_START)) = dat;
    21d4:	fc 01       	movw	r30, r24
    21d6:	ff 27       	eor	r31, r31
    21d8:	90 fd       	sbrc	r25, 0
    21da:	12 c0       	rjmp	.+36     	; 0x2200 <nvm_write_byte(unsigned int, unsigned char)+0x2c>
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	94 e1       	ldi	r25, 0x14	; 20
    21e0:	e8 2b       	or	r30, r24
    21e2:	f9 2b       	or	r31, r25
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:38
  uint8_t oldSREG = SREG;
    21e4:	60 83       	st	Z, r22
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:39
  cli();
    21e6:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:40
  _PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_PAGEERASEWRITE_gc);
    21e8:	f8 94       	cli
    21ea:	9d e9       	ldi	r25, 0x9D	; 157
    21ec:	23 e0       	ldi	r18, 0x03	; 3
    21ee:	94 bf       	out	0x34, r25	; 52
    21f0:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x7f5000>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:42
  SREG = oldSREG;
  while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm)
    21f4:	8f bf       	out	0x3f, r24	; 63
    21f6:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7f5002>
    21fa:	81 fd       	sbrc	r24, 1
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:44
    ;
}
    21fc:	fc cf       	rjmp	.-8      	; 0x21f6 <nvm_write_byte(unsigned int, unsigned char)+0x22>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:37

#define nvm_read_byte(idx) *(uint8_t *)((idx & 0xFF) | ((idx & 0x100) ? USER_SIGNATURES_START : EEPROM_START))

static void nvm_write_byte(uint16_t idx, uint8_t dat)
{
  *(uint8_t *)((idx & 0xFF) | ((idx & 0x100) ? USER_SIGNATURES_START : EEPROM_START)) = dat;
    21fe:	08 95       	ret
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	93 e1       	ldi	r25, 0x13	; 19
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:57
  uint8_t operator*() const { return nvm_read_byte(index); }
  operator uint8_t() const { return **this; }

  //Assignment/write members.
  EERef &operator=(const EERef &ref) { return *this = *ref; }
  EERef &operator=(uint8_t in) { return nvm_write_byte(index, in), *this; }
    2204:	ed cf       	rjmp	.-38     	; 0x21e0 <nvm_write_byte(unsigned int, unsigned char)+0xc>

00002206 <EEPROMClass::write(int, unsigned char) [clone .isra.0]>:
operator=():
    2206:	e6 cf       	rjmp	.-52     	; 0x21d4 <nvm_write_byte(unsigned int, unsigned char)>

00002208 <EERef::update(unsigned char)>:
update():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:69
  EERef &operator&=(uint8_t in) { return *this = **this & in; }
  EERef &operator|=(uint8_t in) { return *this = **this | in; }
  EERef &operator<<=(uint8_t in) { return *this = **this << in; }
  EERef &operator>>=(uint8_t in) { return *this = **this >> in; }

  EERef &update(uint8_t in) { return in != *this ? *this = in : *this; }
    2208:	1f 93       	push	r17
    220a:	cf 93       	push	r28
    220c:	df 93       	push	r29
    220e:	ec 01       	movw	r28, r24
    2210:	16 2f       	mov	r17, r22
_ZNK5EERefcvhEv():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:53
  EERef(const int index)
      : index(index) {}

  //Access/read members.
  uint8_t operator*() const { return nvm_read_byte(index); }
  operator uint8_t() const { return **this; }
    2212:	6a df       	rcall	.-300    	; 0x20e8 <EERef::operator*() const>
update():
    2214:	81 17       	cp	r24, r17
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:69
  EERef &operator&=(uint8_t in) { return *this = **this & in; }
  EERef &operator|=(uint8_t in) { return *this = **this | in; }
  EERef &operator<<=(uint8_t in) { return *this = **this << in; }
  EERef &operator>>=(uint8_t in) { return *this = **this >> in; }

  EERef &update(uint8_t in) { return in != *this ? *this = in : *this; }
    2216:	21 f0       	breq	.+8      	; 0x2220 <EERef::update(unsigned char)+0x18>
operator=():
    2218:	61 2f       	mov	r22, r17
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:57
  uint8_t operator*() const { return nvm_read_byte(index); }
  operator uint8_t() const { return **this; }

  //Assignment/write members.
  EERef &operator=(const EERef &ref) { return *this = *ref; }
  EERef &operator=(uint8_t in) { return nvm_write_byte(index, in), *this; }
    221a:	88 81       	ld	r24, Y
    221c:	99 81       	ldd	r25, Y+1	; 0x01
    221e:	da df       	rcall	.-76     	; 0x21d4 <nvm_write_byte(unsigned int, unsigned char)>
update():
    2220:	ce 01       	movw	r24, r28
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:69
  EERef &operator&=(uint8_t in) { return *this = **this & in; }
  EERef &operator|=(uint8_t in) { return *this = **this | in; }
  EERef &operator<<=(uint8_t in) { return *this = **this << in; }
  EERef &operator>>=(uint8_t in) { return *this = **this >> in; }

  EERef &update(uint8_t in) { return in != *this ? *this = in : *this; }
    2222:	df 91       	pop	r29
    2224:	cf 91       	pop	r28
    2226:	1f 91       	pop	r17
    2228:	08 95       	ret

0000222a <double const& EEPROMClass::put<double>(int, double const&) [clone .isra.10] [clone .constprop.65]>:
_ZN11EEPROMClass3putIdEERKT_iS3_.isra.10():
    222a:	ef 92       	push	r14
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:150
    for (int count = sizeof(T); count; --count, ++e) *ptr++ = *e;
    return t;
  }

  template <typename T>
  const T &put(int idx, const T &t)
    222c:	ff 92       	push	r15
    222e:	0f 93       	push	r16
    2230:	1f 93       	push	r17
    2232:	cf 93       	push	r28
    2234:	df 93       	push	r29
    2236:	00 d0       	rcall	.+0      	; 0x2238 <double const& EEPROMClass::put<double>(int, double const&) [clone .isra.10] [clone .constprop.65]+0xe>
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
    223c:	86 e0       	ldi	r24, 0x06	; 6
    223e:	e8 2e       	mov	r14, r24
    2240:	89 e2       	ldi	r24, 0x29	; 41
    2242:	f8 2e       	mov	r15, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:101
***/

struct EEPtr
{
  EEPtr(const int index)
      : index(index) {}
    2244:	06 e4       	ldi	r16, 0x46	; 70
    2246:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:154
  template <typename T>
  const T &put(int idx, const T &t)
  {
    EEPtr e = idx;
    const uint8_t *ptr = (const uint8_t *)&t;
    for (int count = sizeof(T); count; --count, ++e) (*e).update(*ptr++);
    2248:	09 83       	std	Y+1, r16	; 0x01
    224a:	1a 83       	std	Y+2, r17	; 0x02
    224c:	f7 01       	movw	r30, r14
    224e:	61 91       	ld	r22, Z+
    2250:	7f 01       	movw	r14, r30
    2252:	ce 01       	movw	r24, r28
    2254:	01 96       	adiw	r24, 0x01	; 1
    2256:	d8 df       	rcall	.-80     	; 0x2208 <EERef::update(unsigned char)>
_ZN5EEPtrppEv():
    2258:	0f 5f       	subi	r16, 0xFF	; 255
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:111
  //Iterator functionality.
  bool operator!=(const EEPtr &ptr) { return index != ptr.index; }
  EERef operator*() { return index; }

  /** Prefix & Postfix increment/decrement **/
  EEPtr &operator++() { return ++index, *this; }
    225a:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN11EEPROMClass3putIdEERKT_iS3_.isra.10():
    225c:	0a 34       	cpi	r16, 0x4A	; 74
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:154
  template <typename T>
  const T &put(int idx, const T &t)
  {
    EEPtr e = idx;
    const uint8_t *ptr = (const uint8_t *)&t;
    for (int count = sizeof(T); count; --count, ++e) (*e).update(*ptr++);
    225e:	11 05       	cpc	r17, r1
    2260:	99 f7       	brne	.-26     	; 0x2248 <double const& EEPROMClass::put<double>(int, double const&) [clone .isra.10] [clone .constprop.65]+0x1e>
    2262:	86 e0       	ldi	r24, 0x06	; 6
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:156
    return t;
  }
    2264:	99 e2       	ldi	r25, 0x29	; 41
    2266:	0f 90       	pop	r0
    2268:	0f 90       	pop	r0
    226a:	df 91       	pop	r29
    226c:	cf 91       	pop	r28
    226e:	1f 91       	pop	r17
    2270:	0f 91       	pop	r16
    2272:	ff 90       	pop	r15
    2274:	ef 90       	pop	r14
    2276:	08 95       	ret

00002278 <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.9] [clone .lto_priv.88]>:
_ZN11EEPROMClass3putIiEERKT_iS3_.isra.9():
    2278:	ef 92       	push	r14
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:150
    for (int count = sizeof(T); count; --count, ++e) *ptr++ = *e;
    return t;
  }

  template <typename T>
  const T &put(int idx, const T &t)
    227a:	ff 92       	push	r15
    227c:	0f 93       	push	r16
    227e:	1f 93       	push	r17
    2280:	cf 93       	push	r28
    2282:	df 93       	push	r29
    2284:	00 d0       	rcall	.+0      	; 0x2286 <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.9] [clone .lto_priv.88]+0xe>
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
    228a:	8c 01       	movw	r16, r24
    228c:	7b 01       	movw	r14, r22
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:154
  {
    EEPtr e = idx;
    const uint8_t *ptr = (const uint8_t *)&t;
    for (int count = sizeof(T); count; --count, ++e) (*e).update(*ptr++);
    228e:	89 83       	std	Y+1, r24	; 0x01
    2290:	9a 83       	std	Y+2, r25	; 0x02
    2292:	fb 01       	movw	r30, r22
    2294:	60 81       	ld	r22, Z
    2296:	ce 01       	movw	r24, r28
    2298:	01 96       	adiw	r24, 0x01	; 1
    229a:	b6 df       	rcall	.-148    	; 0x2208 <EERef::update(unsigned char)>
_ZN5EEPtrppEv():
    229c:	0f 5f       	subi	r16, 0xFF	; 255
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:111
  //Iterator functionality.
  bool operator!=(const EEPtr &ptr) { return index != ptr.index; }
  EERef operator*() { return index; }

  /** Prefix & Postfix increment/decrement **/
  EEPtr &operator++() { return ++index, *this; }
    229e:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN11EEPROMClass3putIiEERKT_iS3_.isra.9():
    22a0:	09 83       	std	Y+1, r16	; 0x01
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:154
  template <typename T>
  const T &put(int idx, const T &t)
  {
    EEPtr e = idx;
    const uint8_t *ptr = (const uint8_t *)&t;
    for (int count = sizeof(T); count; --count, ++e) (*e).update(*ptr++);
    22a2:	1a 83       	std	Y+2, r17	; 0x02
    22a4:	f7 01       	movw	r30, r14
    22a6:	61 81       	ldd	r22, Z+1	; 0x01
    22a8:	ce 01       	movw	r24, r28
    22aa:	01 96       	adiw	r24, 0x01	; 1
    22ac:	ad df       	rcall	.-166    	; 0x2208 <EERef::update(unsigned char)>
    22ae:	c7 01       	movw	r24, r14
    22b0:	0f 90       	pop	r0
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:156
    return t;
  }
    22b2:	0f 90       	pop	r0
    22b4:	df 91       	pop	r29
    22b6:	cf 91       	pop	r28
    22b8:	1f 91       	pop	r17
    22ba:	0f 91       	pop	r16
    22bc:	ff 90       	pop	r15
    22be:	ef 90       	pop	r14
    22c0:	08 95       	ret

000022c2 <long const& EEPROMClass::put<long>(int, long const&) [clone .isra.11] [clone .lto_priv.90]>:
_ZN11EEPROMClass3putIlEERKT_iS3_.isra.11():
    22c2:	af 92       	push	r10
    22c4:	bf 92       	push	r11
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:150
    for (int count = sizeof(T); count; --count, ++e) *ptr++ = *e;
    return t;
  }

  template <typename T>
  const T &put(int idx, const T &t)
    22c6:	cf 92       	push	r12
    22c8:	df 92       	push	r13
    22ca:	ef 92       	push	r14
    22cc:	ff 92       	push	r15
    22ce:	0f 93       	push	r16
    22d0:	1f 93       	push	r17
    22d2:	cf 93       	push	r28
    22d4:	df 93       	push	r29
    22d6:	00 d0       	rcall	.+0      	; 0x22d8 <long const& EEPROMClass::put<long>(int, long const&) [clone .isra.11] [clone .lto_priv.90]+0x16>
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
    22dc:	8b 01       	movw	r16, r22
    22de:	6b 01       	movw	r12, r22
    22e0:	24 e0       	ldi	r18, 0x04	; 4
    22e2:	c2 0e       	add	r12, r18
    22e4:	d1 1c       	adc	r13, r1
    22e6:	7b 01       	movw	r14, r22
    22e8:	5c 01       	movw	r10, r24
    22ea:	a6 1a       	sub	r10, r22
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:154
  {
    EEPtr e = idx;
    const uint8_t *ptr = (const uint8_t *)&t;
    for (int count = sizeof(T); count; --count, ++e) (*e).update(*ptr++);
    22ec:	b7 0a       	sbc	r11, r23
    22ee:	c5 01       	movw	r24, r10
    22f0:	8e 0d       	add	r24, r14
    22f2:	9f 1d       	adc	r25, r15
    22f4:	89 83       	std	Y+1, r24	; 0x01
    22f6:	9a 83       	std	Y+2, r25	; 0x02
    22f8:	f7 01       	movw	r30, r14
    22fa:	61 91       	ld	r22, Z+
    22fc:	7f 01       	movw	r14, r30
    22fe:	ce 01       	movw	r24, r28
    2300:	01 96       	adiw	r24, 0x01	; 1
    2302:	82 df       	rcall	.-252    	; 0x2208 <EERef::update(unsigned char)>
    2304:	ec 14       	cp	r14, r12
    2306:	fd 04       	cpc	r15, r13
    2308:	91 f7       	brne	.-28     	; 0x22ee <long const& EEPROMClass::put<long>(int, long const&) [clone .isra.11] [clone .lto_priv.90]+0x2c>
    230a:	c8 01       	movw	r24, r16
    230c:	0f 90       	pop	r0
    230e:	0f 90       	pop	r0
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:156
    return t;
  }
    2310:	df 91       	pop	r29
    2312:	cf 91       	pop	r28
    2314:	1f 91       	pop	r17
    2316:	0f 91       	pop	r16
    2318:	ff 90       	pop	r15
    231a:	ef 90       	pop	r14
    231c:	df 90       	pop	r13
    231e:	cf 90       	pop	r12
    2320:	bf 90       	pop	r11
    2322:	af 90       	pop	r10
    2324:	08 95       	ret

00002326 <MODE_CLICK()>:
MODE_CLICK():
    2326:	2f 92       	push	r2
    2328:	3f 92       	push	r3
    232a:	4f 92       	push	r4
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:141
   led.DISPLAY_DIGIT1(24, 24, 24, 24) ;      // -------------------------- : blank
   }
}

void MODE_CLICK()
{
    232c:	5f 92       	push	r5
    232e:	6f 92       	push	r6
    2330:	7f 92       	push	r7
    2332:	8f 92       	push	r8
    2334:	9f 92       	push	r9
    2336:	af 92       	push	r10
    2338:	bf 92       	push	r11
    233a:	cf 92       	push	r12
    233c:	df 92       	push	r13
    233e:	ef 92       	push	r14
    2340:	ff 92       	push	r15
    2342:	0f 93       	push	r16
    2344:	1f 93       	push	r17
    2346:	cf 93       	push	r28
    2348:	df 93       	push	r29
    234a:	00 d0       	rcall	.+0      	; 0x234c <MODE_CLICK()+0x26>
    234c:	1f 92       	push	r1
    234e:	cd b7       	in	r28, 0x3d	; 61
    2350:	de b7       	in	r29, 0x3e	; 62
    2352:	80 91 85 28 	lds	r24, 0x2885	; 0x802885 <checkTempRaised>
    2356:	81 11       	cpse	r24, r1
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:142
  if(checkTempRaised==0)
    2358:	58 c0       	rjmp	.+176    	; 0x240a <MODE_CLICK()+0xe4>
    235a:	10 92 b9 28 	sts	0x28B9, r1	; 0x8028b9 <BLINK_STATS>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:144
  {
  BLINK_STATS=0;                                                        //-----------------------To blink start parameter
    235e:	80 91 50 29 	lds	r24, 0x2950	; 0x802950 <LONG_PRESS>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:145
  if (!LONG_PRESS )                                                     //-----------------------no longpress (out of settings)
    2362:	81 11       	cpse	r24, r1
    2364:	6a c0       	rjmp	.+212    	; 0x243a <MODE_CLICK()+0x114>
    2366:	10 92 ba 28 	sts	0x28BA, r1	; 0x8028ba <i>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:147
  {
    i = 0;
    236a:	10 92 bb 28 	sts	0x28BB, r1	; 0x8028bb <i+0x1>
    236e:	80 91 1c 29 	lds	r24, 0x291C	; 0x80291c <ENTER_BUT>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:149
         
    if (ENTER_BUT == 4 && SET_MIN == 0 ) ENTER_BUT = 4;                 //-----------------------when selected time is zero, process should not start
    2372:	84 30       	cpi	r24, 0x04	; 4
    2374:	31 f4       	brne	.+12     	; 0x2382 <MODE_CLICK()+0x5c>
    2376:	20 91 a2 28 	lds	r18, 0x28A2	; 0x8028a2 <SET_MIN>
    237a:	30 91 a3 28 	lds	r19, 0x28A3	; 0x8028a3 <SET_MIN+0x1>
    237e:	23 2b       	or	r18, r19
    2380:	51 f0       	breq	.+20     	; 0x2396 <MODE_CLICK()+0x70>
    2382:	90 91 4f 29 	lds	r25, 0x294F	; 0x80294f <DEGREE_VALUE_SET>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:150
    else if(DEGREE_VALUE_SET && !ENTER_BUT)                             //-----------------------at home page and selection of parameter in fah  
    2386:	99 23       	and	r25, r25
    2388:	09 f4       	brne	.+2      	; 0x238c <MODE_CLICK()+0x66>
    238a:	55 c0       	rjmp	.+170    	; 0x2436 <MODE_CLICK()+0x110>
    238c:	81 11       	cpse	r24, r1
    238e:	53 c0       	rjmp	.+166    	; 0x2436 <MODE_CLICK()+0x110>
    2390:	82 e0       	ldi	r24, 0x02	; 2
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:153
    {
//       MIN_SET_FAH =   TEMP_FAH + 15 ; //12                           //-----------------------Level sensing start minimu limit of temp
       ENTER_BUT = 2;
    2392:	80 93 1c 29 	sts	0x291C, r24	; 0x80291c <ENTER_BUT>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:155
    }
    else   ENTER_BUT++;                                                 //-----------------------single press increment variable for homepage
    2396:	80 91 1c 29 	lds	r24, 0x291C	; 0x80291c <ENTER_BUT>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:342
      else        Mode_Button_Single_Press_In_Settings = 0;

    }
    i =VALUE_FOR_BLINK +1;
  }
   if (( ENTER_BUT >= 5) && select_product_type ) 
    239a:	85 30       	cpi	r24, 0x05	; 5
    239c:	0c f4       	brge	.+2      	; 0x23a0 <MODE_CLICK()+0x7a>
    239e:	80 c3       	rjmp	.+1792   	; 0x2aa0 <MODE_CLICK()+0x77a>
    23a0:	80 91 0a 29 	lds	r24, 0x290A	; 0x80290a <select_product_type>
    23a4:	88 23       	and	r24, r24
    23a6:	01 f1       	breq	.+64     	; 0x23e8 <MODE_CLICK()+0xc2>
    23a8:	85 e0       	ldi	r24, 0x05	; 5
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:344
   {
      ENTER_BUT = 5;  
    23aa:	80 93 1c 29 	sts	0x291C, r24	; 0x80291c <ENTER_BUT>
    23ae:	80 91 0b 29 	lds	r24, 0x290B	; 0x80290b <PUMP_FLAG>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:345
      if(PUMP_FLAG)   PUMP_FLAG=0;
    23b2:	88 23       	and	r24, r24
    23b4:	09 f4       	brne	.+2      	; 0x23b8 <MODE_CLICK()+0x92>
    23b6:	70 c3       	rjmp	.+1760   	; 0x2a98 <MODE_CLICK()+0x772>
    23b8:	10 92 0b 29 	sts	0x290B, r1	; 0x80290b <PUMP_FLAG>
Save_Pump_Data():
    23bc:	80 91 0b 29 	lds	r24, 0x290B	; 0x80290b <PUMP_FLAG>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Eeprom.cpp:67
  EEPROM.write(130, SET_MINUTE ); 
}

void Rclass :: Save_Pump_Data()
{
  if(!PUMP_FLAG) 
    23c0:	81 11       	cpse	r24, r1
    23c2:	12 c0       	rjmp	.+36     	; 0x23e8 <MODE_CLICK()+0xc2>
    23c4:	61 e0       	ldi	r22, 0x01	; 1
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Eeprom.cpp:69
    {
      STIR_VALUE_SET = SET_VALUE[5]; 
    23c6:	80 91 1a 29 	lds	r24, 0x291A	; 0x80291a <SET_VALUE+0xa>
    23ca:	90 91 1b 29 	lds	r25, 0x291B	; 0x80291b <SET_VALUE+0xb>
    23ce:	89 2b       	or	r24, r25
    23d0:	09 f4       	brne	.+2      	; 0x23d4 <MODE_CLICK()+0xae>
    23d2:	60 e0       	ldi	r22, 0x00	; 0
    23d4:	60 93 a6 28 	sts	0x28A6, r22	; 0x8028a6 <STIR_VALUE_SET>
    23d8:	90 e0       	ldi	r25, 0x00	; 0
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Eeprom.cpp:70
      EEPROM.write(0, STIR_VALUE_SET);
    23da:	80 e0       	ldi	r24, 0x00	; 0
    23dc:	14 df       	rcall	.-472    	; 0x2206 <EEPROMClass::write(int, unsigned char) [clone .isra.0]>
MODE_CLICK():
    23de:	80 91 1c 29 	lds	r24, 0x291C	; 0x80291c <ENTER_BUT>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:350
      else            PUMP_FLAG =1;
      Eeprom.Save_Pump_Data(); 
   }
   
   if(ENTER_BUT >= 5 && REP1<1) { Tick.BUZZ_INTERVAL(1000);  REP1++; }  //long prees
    23e2:	85 30       	cpi	r24, 0x05	; 5
    23e4:	0c f4       	brge	.+2      	; 0x23e8 <MODE_CLICK()+0xc2>
    23e6:	5c c3       	rjmp	.+1720   	; 0x2aa0 <MODE_CLICK()+0x77a>
    23e8:	00 91 91 28 	lds	r16, 0x2891	; 0x802891 <REP1>
    23ec:	10 91 92 28 	lds	r17, 0x2892	; 0x802892 <REP1+0x1>
    23f0:	10 16       	cp	r1, r16
    23f2:	11 06       	cpc	r1, r17
    23f4:	0c f4       	brge	.+2      	; 0x23f8 <MODE_CLICK()+0xd2>
    23f6:	54 c3       	rjmp	.+1704   	; 0x2aa0 <MODE_CLICK()+0x77a>
    23f8:	88 ee       	ldi	r24, 0xE8	; 232
    23fa:	93 e0       	ldi	r25, 0x03	; 3
    23fc:	2b d9       	rcall	.-3498   	; 0x1654 <Tclass::BUZZ_INTERVAL(int) [clone .constprop.56]>
    23fe:	0f 5f       	subi	r16, 0xFF	; 255
    2400:	1f 4f       	sbci	r17, 0xFF	; 255
    2402:	00 93 91 28 	sts	0x2891, r16	; 0x802891 <REP1>
    2406:	10 93 92 28 	sts	0x2892, r17	; 0x802892 <REP1+0x1>
    240a:	23 96       	adiw	r28, 0x03	; 3
    240c:	cd bf       	out	0x3d, r28	; 61
    240e:	de bf       	out	0x3e, r29	; 62
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:353
   else                           Tick.BUZZ_INTERVAL(50);               //short prees   
}
}
    2410:	df 91       	pop	r29
    2412:	cf 91       	pop	r28
    2414:	1f 91       	pop	r17
    2416:	0f 91       	pop	r16
    2418:	ff 90       	pop	r15
    241a:	ef 90       	pop	r14
    241c:	df 90       	pop	r13
    241e:	cf 90       	pop	r12
    2420:	bf 90       	pop	r11
    2422:	af 90       	pop	r10
    2424:	9f 90       	pop	r9
    2426:	8f 90       	pop	r8
    2428:	7f 90       	pop	r7
    242a:	6f 90       	pop	r6
    242c:	5f 90       	pop	r5
    242e:	4f 90       	pop	r4
    2430:	3f 90       	pop	r3
    2432:	2f 90       	pop	r2
    2434:	08 95       	ret
    2436:	8f 5f       	subi	r24, 0xFF	; 255
    2438:	ac cf       	rjmp	.-168    	; 0x2392 <MODE_CLICK()+0x6c>
    243a:	00 91 09 28 	lds	r16, 0x2809	; 0x802809 <SELECTION_PARAMETER>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:155
    else if(DEGREE_VALUE_SET && !ENTER_BUT)                             //-----------------------at home page and selection of parameter in fah  
    {
//       MIN_SET_FAH =   TEMP_FAH + 15 ; //12                           //-----------------------Level sensing start minimu limit of temp
       ENTER_BUT = 2;
    }
    else   ENTER_BUT++;                                                 //-----------------------single press increment variable for homepage
    243e:	10 91 0a 28 	lds	r17, 0x280A	; 0x80280a <SELECTION_PARAMETER+0x1>
    2442:	80 91 bf 28 	lds	r24, 0x28BF	; 0x8028bf <Mode_Button_Single_Press_In_Settings>
    2446:	81 11       	cpse	r24, r1
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:160
       
  }
  else                                                                  //-----------------------in settings         
  {
    if (!Mode_Button_Single_Press_In_Settings)                          //-----------------------not press mode button (while scrolling Parameter Passed to Array)
    2448:	09 c1       	rjmp	.+530    	; 0x265c <MODE_CLICK()+0x336>
    244a:	80 91 a6 28 	lds	r24, 0x28A6	; 0x8028a6 <STIR_VALUE_SET>
    244e:	90 e0       	ldi	r25, 0x00	; 0
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:162
    {
      SET_LONG_VALUE[Stir_ON_OFF] = STIR_VALUE_SET; 
    2450:	80 93 1d 29 	sts	0x291D, r24	; 0x80291d <SET_LONG_VALUE>
    2454:	90 93 1e 29 	sts	0x291E, r25	; 0x80291e <SET_LONG_VALUE+0x1>
    2458:	20 91 4f 29 	lds	r18, 0x294F	; 0x80294f <DEGREE_VALUE_SET>
    245c:	2b 83       	std	Y+3, r18	; 0x03
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:163
      SET_LONG_VALUE[Unit_C_F]    = DEGREE_VALUE_SET;
    245e:	82 2f       	mov	r24, r18
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	80 93 1f 29 	sts	0x291F, r24	; 0x80291f <SET_LONG_VALUE+0x2>
    2466:	90 93 20 29 	sts	0x2920, r25	; 0x802920 <SET_LONG_VALUE+0x3>
    246a:	80 91 a0 28 	lds	r24, 0x28A0	; 0x8028a0 <Proceess_Resume_Enable_Flag>
    246e:	90 e0       	ldi	r25, 0x00	; 0
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:164
      SET_LONG_VALUE[Auto_Resume_Enable]    = Proceess_Resume_Enable_Flag;
    2470:	80 93 25 29 	sts	0x2925, r24	; 0x802925 <SET_LONG_VALUE+0x8>
    2474:	90 93 26 29 	sts	0x2926, r25	; 0x802926 <SET_LONG_VALUE+0x9>
    2478:	80 91 ed 28 	lds	r24, 0x28ED	; 0x8028ed <select_heating_type>
    247c:	90 e0       	ldi	r25, 0x00	; 0
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:165
      SET_LONG_VALUE[Slow_Fast_Heating]    =  select_heating_type; 
    247e:	80 93 3d 29 	sts	0x293D, r24	; 0x80293d <SET_LONG_VALUE+0x20>
    2482:	90 93 3e 29 	sts	0x293E, r25	; 0x80293e <SET_LONG_VALUE+0x21>
    2486:	80 91 0a 29 	lds	r24, 0x290A	; 0x80290a <select_product_type>
    248a:	90 e0       	ldi	r25, 0x00	; 0
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:166
      SET_LONG_VALUE[Product_Selection_Parameter]    = select_product_type; 
    248c:	80 93 27 29 	sts	0x2927, r24	; 0x802927 <SET_LONG_VALUE+0xa>
    2490:	90 93 28 29 	sts	0x2928, r25	; 0x802928 <SET_LONG_VALUE+0xb>
    2494:	21 11       	cpse	r18, r1
    2496:	99 c0       	rjmp	.+306    	; 0x25ca <MODE_CLICK()+0x2a4>
    2498:	80 91 0e 29 	lds	r24, 0x290E	; 0x80290e <SAFE_VALUE_SET_DEG>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:168
      
      if (!DEGREE_VALUE_SET)    SET_LONG_VALUE[Safe_Value] = SAFE_VALUE_SET_DEG;
    249c:	90 91 0f 29 	lds	r25, 0x290F	; 0x80290f <SAFE_VALUE_SET_DEG+0x1>
    24a0:	80 93 21 29 	sts	0x2921, r24	; 0x802921 <SET_LONG_VALUE+0x4>
    24a4:	90 93 22 29 	sts	0x2922, r25	; 0x802922 <SET_LONG_VALUE+0x5>
    24a8:	80 91 d4 28 	lds	r24, 0x28D4	; 0x8028d4 <CAL_SELECT_VALUE>
    24ac:	90 91 d5 28 	lds	r25, 0x28D5	; 0x8028d5 <CAL_SELECT_VALUE+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:171
      else                      SET_LONG_VALUE[Safe_In_Fah] = SAFE_VALUE_SET_FAH;
      
      SET_LONG_VALUE[Calibration_Selection] = CAL_SELECT_VALUE;
    24b0:	80 93 29 29 	sts	0x2929, r24	; 0x802929 <SET_LONG_VALUE+0xc>
    24b4:	90 93 2a 29 	sts	0x292A, r25	; 0x80292a <SET_LONG_VALUE+0xd>
    24b8:	c0 90 ee 28 	lds	r12, 0x28EE	; 0x8028ee <TEMP_DEG_RAW>
    24bc:	d0 90 ef 28 	lds	r13, 0x28EF	; 0x8028ef <TEMP_DEG_RAW+0x1>
    24c0:	e0 90 f0 28 	lds	r14, 0x28F0	; 0x8028f0 <TEMP_DEG_RAW+0x2>
    24c4:	f0 90 f1 28 	lds	r15, 0x28F1	; 0x8028f1 <TEMP_DEG_RAW+0x3>
    24c8:	c7 01       	movw	r24, r14
    24ca:	b6 01       	movw	r22, r12
    24cc:	0e 94 d1 38 	call	0x71a2	; 0x71a2 <__fixsfsi>
    24d0:	4b 01       	movw	r8, r22
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	40 e2       	ldi	r20, 0x20	; 32
    24d8:	51 e4       	ldi	r21, 0x41	; 65
    24da:	c7 01       	movw	r24, r14
    24dc:	b6 01       	movw	r22, r12
    24de:	0e 94 b8 39 	call	0x7370	; 0x7370 <__mulsf3>
    24e2:	0e 94 d1 38 	call	0x71a2	; 0x71a2 <__fixsfsi>
    24e6:	2b 01       	movw	r4, r22
    24e8:	cb 01       	movw	r24, r22
    24ea:	6a e0       	ldi	r22, 0x0A	; 10
    24ec:	70 e0       	ldi	r23, 0x00	; 0
    24ee:	0e 94 1b 3a 	call	0x7436	; 0x7436 <__divmodhi4>
    24f2:	1c 01       	movw	r2, r24
    24f4:	8b 81       	ldd	r24, Y+3	; 0x03
    24f6:	81 11       	cpse	r24, r1
    24f8:	7e c0       	rjmp	.+252    	; 0x25f6 <MODE_CLICK()+0x2d0>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:172
      if (!DEGREE_VALUE_SET)
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	48 ec       	ldi	r20, 0xC8	; 200
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:174
      {
        if(TEMP_DEG_RAW<100)
    2500:	52 e4       	ldi	r21, 0x42	; 66
    2502:	c7 01       	movw	r24, r14
    2504:	b6 01       	movw	r22, r12
    2506:	0e 94 65 38 	call	0x70ca	; 0x70ca <__cmpsf2>
    250a:	87 ff       	sbrs	r24, 7
    250c:	67 c0       	rjmp	.+206    	; 0x25dc <MODE_CLICK()+0x2b6>
    250e:	80 92 2b 29 	sts	0x292B, r8	; 0x80292b <SET_LONG_VALUE+0xe>
    2512:	90 92 2c 29 	sts	0x292C, r9	; 0x80292c <SET_LONG_VALUE+0xf>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:176
        {
          SET_LONG_VALUE[Cal1_Decimal] = TEMP_DEG_RAW; 
    2516:	40 92 26 28 	sts	0x2826, r4	; 0x802826 <TEMPERARY_SAVED_VARIABLE_FOR_CAL1_DEG>
    251a:	50 92 27 28 	sts	0x2827, r5	; 0x802827 <TEMPERARY_SAVED_VARIABLE_FOR_CAL1_DEG+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:177
          TEMPERARY_SAVED_VARIABLE_FOR_CAL1_DEG =  TEMP_DEG_RAW * 10;
    251e:	20 92 2d 29 	sts	0x292D, r2	; 0x80292d <SET_LONG_VALUE+0x10>
    2522:	30 92 2e 29 	sts	0x292E, r3	; 0x80292e <SET_LONG_VALUE+0x11>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:179
          int CONV_TEMP = (TEMP_DEG_RAW * 10);
          SET_LONG_VALUE[Cal1_Point] = ( CONV_TEMP  % 10) ;      
    2526:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <LOW_CAL_VALUE_SET>
    252a:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <LOW_CAL_VALUE_SET+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:192
      else
      {
        SET_LONG_VALUE[Cal1_In_Fah] =  TEMP_FAH_RAW ;  
        TEMPERARY_SAVED_VARIABLE_FOR_CAL1_FAH = TEMP_FAH_RAW;
      }
      SET_LONG_VALUE[Cal2LowTemp_Set_Display]  = LOW_CAL_VALUE_SET ;
    252e:	80 93 2f 29 	sts	0x292F, r24	; 0x80292f <SET_LONG_VALUE+0x12>
    2532:	90 93 30 29 	sts	0x2930, r25	; 0x802930 <SET_LONG_VALUE+0x13>
    2536:	80 92 33 29 	sts	0x2933, r8	; 0x802933 <SET_LONG_VALUE+0x16>
    253a:	90 92 34 29 	sts	0x2934, r9	; 0x802934 <SET_LONG_VALUE+0x17>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:193
      SET_LONG_VALUE[Cal2LowDecimalTemp_Enter_Heat]  =  TEMP_DEG_RAW; 
    253e:	20 92 35 29 	sts	0x2935, r2	; 0x802935 <SET_LONG_VALUE+0x18>
    2542:	30 92 36 29 	sts	0x2936, r3	; 0x802936 <SET_LONG_VALUE+0x19>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:196
      
      int CONV = (TEMP_DEG_RAW * 10);
      SET_LONG_VALUE[Cal2LowPointTemp_Enter_Maintain]  =  CONV % 10 ;
    2546:	0c 30       	cpi	r16, 0x0C	; 12
    2548:	11 05       	cpc	r17, r1
    254a:	09 f0       	breq	.+2      	; 0x254e <MODE_CLICK()+0x228>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:198
      
      if(SELECTION_PARAMETER == Cal2LowPointTemp_Enter_Maintain )      TEMP_CAL2_RAW_LOW_VALUE = TEMP_DEG_RAW;
    254c:	6d c0       	rjmp	.+218    	; 0x2628 <MODE_CLICK()+0x302>
    254e:	c0 92 1e 28 	sts	0x281E, r12	; 0x80281e <TEMP_CAL2_RAW_LOW_VALUE>
    2552:	d0 92 1f 28 	sts	0x281F, r13	; 0x80281f <TEMP_CAL2_RAW_LOW_VALUE+0x1>
    2556:	e0 92 20 28 	sts	0x2820, r14	; 0x802820 <TEMP_CAL2_RAW_LOW_VALUE+0x2>
    255a:	f0 92 21 28 	sts	0x2821, r15	; 0x802821 <TEMP_CAL2_RAW_LOW_VALUE+0x3>
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	48 ec       	ldi	r20, 0xC8	; 200
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:201
      if(SELECTION_PARAMETER == Cal2HighPointTemp_Enter_Maintain)      TEMP_CAL2_RAW_HIGH_VALUE = TEMP_DEG_RAW;

      if(TEMP_DEG_RAW<100)
    2564:	52 e4       	ldi	r21, 0x42	; 66
    2566:	c7 01       	movw	r24, r14
    2568:	b6 01       	movw	r22, r12
    256a:	0e 94 65 38 	call	0x70ca	; 0x70ca <__cmpsf2>
    256e:	87 ff       	sbrs	r24, 7
    2570:	68 c0       	rjmp	.+208    	; 0x2642 <MODE_CLICK()+0x31c>
    2572:	80 92 37 29 	sts	0x2937, r8	; 0x802937 <SET_LONG_VALUE+0x1a>
    2576:	90 92 38 29 	sts	0x2938, r9	; 0x802938 <SET_LONG_VALUE+0x1b>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:203
      {
        SET_LONG_VALUE[Cal2HighDecimalTemp_Enter_Heat] = TEMP_DEG_RAW; 
    257a:	20 92 39 29 	sts	0x2939, r2	; 0x802939 <SET_LONG_VALUE+0x1c>
    257e:	30 92 3a 29 	sts	0x293A, r3	; 0x80293a <SET_LONG_VALUE+0x1d>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:205
        int CONV2 = (TEMP_DEG_RAW * 10);
        SET_LONG_VALUE[Cal2HighPointTemp_Enter_Maintain]  = ( CONV2 % 10 ) ;
    2582:	80 91 a5 28 	lds	r24, 0x28A5	; 0x8028a5 <TIME_SOCK_OR_TOTAL>
    2586:	90 e0       	ldi	r25, 0x00	; 0
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:213
      {
          SET_LONG_VALUE[Cal2HighDecimalTemp_Enter_Heat]  = 99; 
          SET_LONG_VALUE[Cal2HighPointTemp_Enter_Maintain] = 9;
      }            
    
      SET_LONG_VALUE[Time_Mode] = TIME_SOCK_OR_TOTAL; //13
    2588:	80 93 23 29 	sts	0x2923, r24	; 0x802923 <SET_LONG_VALUE+0x6>
    258c:	90 93 24 29 	sts	0x2924, r25	; 0x802924 <SET_LONG_VALUE+0x7>
    2590:	02 31       	cpi	r16, 0x12	; 18
    2592:	11 05       	cpc	r17, r1
    2594:	21 f4       	brne	.+8      	; 0x259e <MODE_CLICK()+0x278>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:214
      if(SELECTION_PARAMETER == FactoryAndSure_Reset )  currentMillis=0;
    2596:	10 92 a7 28 	sts	0x28A7, r1	; 0x8028a7 <currentMillis>
    259a:	10 92 a8 28 	sts	0x28A8, r1	; 0x8028a8 <currentMillis+0x1>
    259e:	2b 81       	ldd	r18, Y+3	; 0x03
    25a0:	21 11       	cpse	r18, r1
    25a2:	09 c0       	rjmp	.+18     	; 0x25b6 <MODE_CLICK()+0x290>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:216
      
      if (!DEGREE_VALUE_SET && SELECTION_PARAMETER == Cal1_Point)   SELECTION_PARAMETER--;
    25a4:	08 30       	cpi	r16, 0x08	; 8
    25a6:	11 05       	cpc	r17, r1
    25a8:	31 f4       	brne	.+12     	; 0x25b6 <MODE_CLICK()+0x290>
    25aa:	87 e0       	ldi	r24, 0x07	; 7
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <SELECTION_PARAMETER>
    25b2:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <SELECTION_PARAMETER+0x1>
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	80 93 bf 28 	sts	0x28BF, r24	; 0x8028bf <Mode_Button_Single_Press_In_Settings>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:218
      
      Mode_Button_Single_Press_In_Settings = 1;
    25bc:	8a e1       	ldi	r24, 0x1A	; 26
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	80 93 ba 28 	sts	0x28BA, r24	; 0x8028ba <i>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:340
        SELECTION_PARAMETER++;
      }
      else        Mode_Button_Single_Press_In_Settings = 0;

    }
    i =VALUE_FOR_BLINK +1;
    25c4:	90 93 bb 28 	sts	0x28BB, r25	; 0x8028bb <i+0x1>
    25c8:	e6 ce       	rjmp	.-564    	; 0x2396 <MODE_CLICK()+0x70>
    25ca:	80 91 0c 29 	lds	r24, 0x290C	; 0x80290c <SAFE_VALUE_SET_FAH>
    25ce:	90 91 0d 29 	lds	r25, 0x290D	; 0x80290d <SAFE_VALUE_SET_FAH+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:169
      SET_LONG_VALUE[Auto_Resume_Enable]    = Proceess_Resume_Enable_Flag;
      SET_LONG_VALUE[Slow_Fast_Heating]    =  select_heating_type; 
      SET_LONG_VALUE[Product_Selection_Parameter]    = select_product_type; 
      
      if (!DEGREE_VALUE_SET)    SET_LONG_VALUE[Safe_Value] = SAFE_VALUE_SET_DEG;
      else                      SET_LONG_VALUE[Safe_In_Fah] = SAFE_VALUE_SET_FAH;
    25d2:	80 93 45 29 	sts	0x2945, r24	; 0x802945 <SET_LONG_VALUE+0x28>
    25d6:	90 93 46 29 	sts	0x2946, r25	; 0x802946 <SET_LONG_VALUE+0x29>
    25da:	66 cf       	rjmp	.-308    	; 0x24a8 <MODE_CLICK()+0x182>
    25dc:	83 e6       	ldi	r24, 0x63	; 99
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	80 93 2b 29 	sts	0x292B, r24	; 0x80292b <SET_LONG_VALUE+0xe>
I:\Siddhesh Hadawale\PRODUCTION CODE\WLC_WLS_Common_Code\Final_WLC_020_V4.03/Final_WLC_020_V4.03.ino:183
          int CONV_TEMP = (TEMP_DEG_RAW * 10);
          SET_LONG_VALUE[Cal1_Point] = ( CONV_TEMP  % 10) ;      
        }
        else
        {
          SET_LONG_VALUE[Cal1_Decimal]=99; 
    25e4:	90 93 2c 29 	sts	0x292C, r25	; 0x80292c <SET_LONG_VALUE+0xf>
    25e8:	89 e0       	ldi	r24, 0x09	; 9
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	80 93 2d 29 	sts	0x292D, r24	; 0x80292d <SET_LONG_VALUE+0x10>
    25f0:	90 93 2e 29 	sts	0x292E, r25	; 0x80292e <SET_LONG_VALUE+0x11>
    25f4:	98 cf       	rjmp	.-208    	; 0x2526 <MODE_CLICK()+0x200>
    25f6:	40 90 da 28 	lds	r4, 0x28DA	; 0x8028da <TEMP_FAH_RAW>
    25fa:	50 90 db 28 	lds	r5, 0x28DB	; 0x8028db <TEMP_FAH_RAW+0x1>
    25fe:	60 90 dc 28 	lds	r6, 0x28DC	; 0x8028dc <TEMP_FAH_RAW+0x2>
    2602:	70 90 dd 28 	lds	r7, 0x28DD	; 0x8028dd <TEMP_FAH_RAW+0x3>
    2606:	c3 01       	movw	r24, r6
    2608:	b2 01       	movw	r22, r4
    260a:	0e 94 d1 38 	call	0x71a2	; 0x71a2 <__fixsfsi>
    260e:	60 93 47 29 	sts	0x2947, r22	; 0x802947 <SET_LONG_VALUE+0x2a>
    2612:	70 93 48 29 	sts	0x2948, r23	; 0x802948 <SET_LONG_VALUE+0x2b>
    2616:	40 92 22 28 	sts	0x2822, r4	; 0x802822 <TEMPERARY_SAVED_VARIABLE_FOR_CAL1_FAH>
    261a:	50 92 23 28 	sts	0x2823, r5	; 0x802823 <TEMPERARY_SAVED_VARIABLE_FOR_CAL1_FAH+0x1>
    261e:	60 92 24 28 	sts	0x2824, r6	; 0x802824 <TEMPERARY_SAVED_VARIABLE_FOR_CAL1_FAH+0x2>
    2622:	70 92 25 28 	sts	0x2825, r7	; 0x802825 <TEMPERARY_SAVED_VARIABLE_FOR_CAL1_FAH+0x3>
    2626:	7f cf       	rjmp	.-258    	; 0x2526 <MODE_CLICK()+0x200>
    2628:	0e 30       	cpi	r16, 0x0E	; 14
    262a:	11 05       	cpc	r17, r1
    262c:	09 f0       	breq	.+2      	; 0x2630 <MODE_CLICK()+0x30a>
    262e:	97 cf       	rjmp	.-210    	; 0x255e <MODE_CLICK()+0x238>
    2630:	c0 92 1a 28 	sts	0x281A, r12	; 0x80281a <TEMP_CAL2_RAW_HIGH_VALUE>
    2634:	d0 92 1b 28 	sts	0x281B, r13	; 0x80281b <TEMP_CAL2_RAW_HIGH_VALUE+0x1>
    2638:	e0 92 1c 28 	sts	0x281C, r14	; 0x80281c <TEMP_CAL2_RAW_HIGH_VALUE+0x2>
    263c:	f0 92 1d 28 	sts	0x281D, r15	; 0x80281d <TEMP_CAL2_RAW_HIGH_VALUE+0x3>
    2640:	8e cf       	rjmp	.-228    	; 0x255e <MODE_CLICK()+0x238>
    2642:	83 e6       	ldi	r24, 0x63	; 99
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	80 93 37 29 	sts	0x2937, r24	; 0x802937 <SET_LONG_VALUE+0x1a>
    264a:	90 93 38 29 	sts	0x2938, r25	; 0x802938 <SET_LONG_VALUE+0x1b>
    264e:	89 e0       	ldi	r24, 0x09	; 9
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	80 93 39 29 	sts	0x2939, r24	; 0x802939 <SET_LONG_VALUE+0x1c>
    2656:	90 93 3a 29 	sts	0x293A, r25	; 0x80293a <SET_LONG_VALUE+0x1d>
    265a:	93 cf       	rjmp	.-218    	; 0x2582 <MODE_CLICK()+0x25c>
    265c:	01 31       	cpi	r16, 0x11	; 17
    265e:	11 05       	cpc	r17, r1
    2660:	18 f5       	brcc	.+70     	; 0x26a8 <MODE_CLICK()+0x382>
    2662:	f8 01       	movw	r30, r16
    2664:	ea 5c       	subi	r30, 0xCA	; 202
    2666:	fc 4e       	sbci	r31, 0xEC	; 236
    2668:	0c 94 6c 3a 	jmp	0x74d8	; 0x74d8 <__tablejump2__>
    266c:	47 13       	cpse	r20, r23
    266e:	74 13       	cpse	r23, r20
    2670:	81 13       	cpse	r24, r17
    2672:	2d 15       	cp	r18, r13
    2674:	9e 13       	cpse	r25, r30
    2676:	ab 13       	cpse	r26, r27
    2678:	c5 13       	cpse	r28, r21
    267a:	54 13       	cpse	r21, r20
    267c:	d0 13       	cpse	r29, r16
    267e:	80 14       	cp	r8, r0
    2680:	8e 14       	cp	r8, r14
    2682:	54 13       	cpse	r21, r20
    2684:	a7 14       	cp	r10, r7
    2686:	54 13       	cpse	r21, r20
    2688:	b8 14       	cp	r11, r8
    268a:	54 13       	cpse	r21, r20
    268c:	b8 13       	cpse	r27, r24
    268e:	61 e0       	ldi	r22, 0x01	; 1
    2690:	80 91 1d 29 	lds	r24, 0x291D	; 0x80291d <SET_LONG_VALUE>
    2694:	90 91 1e 29 	lds	r25, 0x291E	; 0x80291e <SET_LONG_VALUE+0x1>
    2698:	89 2b       	or	r24, r25
    269a:	09 f4       	brne	.+2      	; 0x269e <MODE_CLICK()+0x378>
    269c:	60 e0       	ldi	r22, 0x00	; 0
    269e:	60 93 a6 28 	sts	0x28A6, r22	; 0x8028a6 <STIR_VALUE_SET>
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	af dd       	rcall	.-1186   	; 0x2206 <EEPROMClass::write(int, unsigned char) [clone .isra.0]>
    26a8:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <SELECTION_PARAMETER>
    26ac:	90 91 0a 28 	lds	r25, 0x280A	; 0x80280a <SELECTION_PARAMETER+0x1>
    26b0:	20 91 4f 29 	lds	r18, 0x294F	; 0x80294f <DEGREE_VALUE_SET>
    26b4:	21 11       	cpse	r18, r1
    26b6:	03 c0       	rjmp	.+6      	; 0x26be <MODE_CLICK()+0x398>
    26b8:	87 30       	cpi	r24, 0x07	; 7
    26ba:	91 05       	cpc	r25, r1
    26bc:	61 f0       	breq	.+24     	; 0x26d6 <MODE_CLICK()+0x3b0>
    26be:	9c 01       	movw	r18, r24
    26c0:	2d 7f       	andi	r18, 0xFD	; 253
    26c2:	29 30       	cpi	r18, 0x09	; 9
    26c4:	31 05       	cpc	r19, r1
    26c6:	39 f0       	breq	.+14     	; 0x26d6 <MODE_CLICK()+0x3b0>
    26c8:	8d 30       	cpi	r24, 0x0D	; 13
    26ca:	91 05       	cpc	r25, r1
    26cc:	21 f0       	breq	.+8      	; 0x26d6 <MODE_CLICK()+0x3b0>
    26ce:	82 31       	cpi	r24, 0x12	; 18
    26d0:	91 05       	cpc	r25, r1
    26d2:	09 f0       	breq	.+2      	; 0x26d6 <MODE_CLICK()+0x3b0>
    26d4:	d4 c1       	rjmp	.+936    	; 0x2a7e <MODE_CLICK()+0x758>
    26d6:	21 e0       	ldi	r18, 0x01	; 1
    26d8:	20 93 bf 28 	sts	0x28BF, r18	; 0x8028bf <Mode_Button_Single_Press_In_Settings>
    26dc:	01 96       	adiw	r24, 0x01	; 1
    26de:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <SELECTION_PARAMETER>
    26e2:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <SELECTION_PARAMETER+0x1>
    26e6:	6a cf       	rjmp	.-300    	; 0x25bc <MODE_CLICK()+0x296>
    26e8:	61 e0       	ldi	r22, 0x01	; 1
    26ea:	80 91 1f 29 	lds	r24, 0x291F	; 0x80291f <SET_LONG_VALUE+0x2>
    26ee:	90 91 20 29 	lds	r25, 0x2920	; 0x802920 <SET_LONG_VALUE+0x3>
    26f2:	89 2b       	or	r24, r25
    26f4:	09 f4       	brne	.+2      	; 0x26f8 <MODE_CLICK()+0x3d2>
    26f6:	60 e0       	ldi	r22, 0x00	; 0
    26f8:	60 93 4f 29 	sts	0x294F, r22	; 0x80294f <DEGREE_VALUE_SET>
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	d2 cf       	rjmp	.-92     	; 0x26a6 <MODE_CLICK()+0x380>
    2702:	80 91 4f 29 	lds	r24, 0x294F	; 0x80294f <DEGREE_VALUE_SET>
    2706:	81 11       	cpse	r24, r1
    2708:	0b c0       	rjmp	.+22     	; 0x2720 <MODE_CLICK()+0x3fa>
    270a:	60 91 21 29 	lds	r22, 0x2921	; 0x802921 <SET_LONG_VALUE+0x4>
    270e:	80 91 22 29 	lds	r24, 0x2922	; 0x802922 <SET_LONG_VALUE+0x5>
    2712:	60 93 0e 29 	sts	0x290E, r22	; 0x80290e <SAFE_VALUE_SET_DEG>
    2716:	80 93 0f 29 	sts	0x290F, r24	; 0x80290f <SAFE_VALUE_SET_DEG+0x1>
    271a:	82 e0       	ldi	r24, 0x02	; 2
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	c3 cf       	rjmp	.-122    	; 0x26a6 <MODE_CLICK()+0x380>
    2720:	80 91 45 29 	lds	r24, 0x2945	; 0x802945 <SET_LONG_VALUE+0x28>
    2724:	90 91 46 29 	lds	r25, 0x2946	; 0x802946 <SET_LONG_VALUE+0x29>
    2728:	80 93 0c 29 	sts	0x290C, r24	; 0x80290c <SAFE_VALUE_SET_FAH>
    272c:	90 93 0d 29 	sts	0x290D, r25	; 0x80290d <SAFE_VALUE_SET_FAH+0x1>
    2730:	6c e0       	ldi	r22, 0x0C	; 12
    2732:	79 e2       	ldi	r23, 0x29	; 41
    2734:	83 e0       	ldi	r24, 0x03	; 3
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	9f dd       	rcall	.-1218   	; 0x2278 <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.9] [clone .lto_priv.88]>
    273a:	b6 cf       	rjmp	.-148    	; 0x26a8 <MODE_CLICK()+0x382>
    273c:	61 e0       	ldi	r22, 0x01	; 1
    273e:	80 91 25 29 	lds	r24, 0x2925	; 0x802925 <SET_LONG_VALUE+0x8>
    2742:	90 91 26 29 	lds	r25, 0x2926	; 0x802926 <SET_LONG_VALUE+0x9>
    2746:	89 2b       	or	r24, r25
    2748:	09 f4       	brne	.+2      	; 0x274c <MODE_CLICK()+0x426>
    274a:	60 e0       	ldi	r22, 0x00	; 0
    274c:	60 93 a0 28 	sts	0x28A0, r22	; 0x8028a0 <Proceess_Resume_Enable_Flag>
    2750:	8f e0       	ldi	r24, 0x0F	; 15
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	58 dd       	rcall	.-1360   	; 0x2206 <EEPROMClass::write(int, unsigned char) [clone .isra.0]>
    2756:	61 e0       	ldi	r22, 0x01	; 1
    2758:	80 91 27 29 	lds	r24, 0x2927	; 0x802927 <SET_LONG_VALUE+0xa>
    275c:	90 91 28 29 	lds	r25, 0x2928	; 0x802928 <SET_LONG_VALUE+0xb>
    2760:	89 2b       	or	r24, r25
    2762:	09 f4       	brne	.+2      	; 0x2766 <MODE_CLICK()+0x440>
    2764:	60 e0       	ldi	r22, 0x00	; 0
    2766:	60 93 0a 29 	sts	0x290A, r22	; 0x80290a <select_product_type>
    276a:	86 e9       	ldi	r24, 0x96	; 150
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	9b cf       	rjmp	.-202    	; 0x26a6 <MODE_CLICK()+0x380>
    2770:	61 e0       	ldi	r22, 0x01	; 1
    2772:	80 91 3d 29 	lds	r24, 0x293D	; 0x80293d <SET_LONG_VALUE+0x20>
    2776:	90 91 3e 29 	lds	r25, 0x293E	; 0x80293e <SET_LONG_VALUE+0x21>
    277a:	89 2b       	or	r24, r25
    277c:	09 f4       	brne	.+2      	; 0x2780 <MODE_CLICK()+0x45a>
    277e:	60 e0       	ldi	r22, 0x00	; 0
    2780:	60 93 ed 28 	sts	0x28ED, r22	; 0x8028ed <select_heating_type>
    2784:	84 e8       	ldi	r24, 0x84	; 132
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	8e cf       	rjmp	.-228    	; 0x26a6 <MODE_CLICK()+0x380>
    278a:	60 91 29 29 	lds	r22, 0x2929	; 0x802929 <SET_LONG_VALUE+0xc>
    278e:	80 91 2a 29 	lds	r24, 0x292A	; 0x80292a <SET_LONG_VALUE+0xd>
    2792:	60 93 d4 28 	sts	0x28D4, r22	; 0x8028d4 <CAL_SELECT_VALUE>
    2796:	80 93 d5 28 	sts	0x28D5, r24	; 0x8028d5 <CAL_SELECT_VALUE+0x1>
    279a:	85 e0       	ldi	r24, 0x05	; 5
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	83 cf       	rjmp	.-250    	; 0x26a6 <MODE_CLICK()+0x380>
    27a0:	80 91 4f 29 	lds	r24, 0x294F	; 0x80294f <DEGREE_VALUE_SET>
    27a4:	81 11       	cpse	r24, r1
    27a6:	87 c0       	rjmp	.+270    	; 0x28b6 <MODE_CLICK()+0x590>
    27a8:	60 91 2d 29 	lds	r22, 0x292D	; 0x80292d <SET_LONG_VALUE+0x10>
    27ac:	70 91 2e 29 	lds	r23, 0x292E	; 0x80292e <SET_LONG_VALUE+0x11>
    27b0:	07 2e       	mov	r0, r23
    27b2:	00 0c       	add	r0, r0
    27b4:	88 0b       	sbc	r24, r24
    27b6:	99 0b       	sbc	r25, r25
    27b8:	0e 94 04 39 	call	0x7208	; 0x7208 <__floatsisf>
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	40 e2       	ldi	r20, 0x20	; 32
    27c2:	51 e4       	ldi	r21, 0x41	; 65
    27c4:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__divsf3>
    27c8:	6b 01       	movw	r12, r22
    27ca:	7c 01       	movw	r14, r24
    27cc:	60 91 2b 29 	lds	r22, 0x292B	; 0x80292b <SET_LONG_VALUE+0xe>
    27d0:	70 91 2c 29 	lds	r23, 0x292C	; 0x80292c <SET_LONG_VALUE+0xf>
    27d4:	07 2e       	mov	r0, r23
    27d6:	00 0c       	add	r0, r0
    27d8:	88 0b       	sbc	r24, r24
    27da:	99 0b       	sbc	r25, r25
    27dc:	0e 94 04 39 	call	0x7208	; 0x7208 <__floatsisf>
    27e0:	9b 01       	movw	r18, r22
    27e2:	ac 01       	movw	r20, r24
    27e4:	c7 01       	movw	r24, r14
    27e6:	b6 01       	movw	r22, r12
    27e8:	0e 94 01 38 	call	0x7002	; 0x7002 <__addsf3>
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	40 e2       	ldi	r20, 0x20	; 32
    27f2:	51 e4       	ldi	r21, 0x41	; 65
    27f4:	0e 94 b8 39 	call	0x7370	; 0x7370 <__mulsf3>
    27f8:	6b 01       	movw	r12, r22
    27fa:	7c 01       	movw	r14, r24
    27fc:	60 91 26 28 	lds	r22, 0x2826	; 0x802826 <TEMPERARY_SAVED_VARIABLE_FOR_CAL1_DEG>
    2800:	70 91 27 28 	lds	r23, 0x2827	; 0x802827 <TEMPERARY_SAVED_VARIABLE_FOR_CAL1_DEG+0x1>
    2804:	07 2e       	mov	r0, r23
    2806:	00 0c       	add	r0, r0
    2808:	88 0b       	sbc	r24, r24
    280a:	99 0b       	sbc	r25, r25
    280c:	0e 94 04 39 	call	0x7208	; 0x7208 <__floatsisf>
    2810:	9b 01       	movw	r18, r22
    2812:	ac 01       	movw	r20, r24
    2814:	c7 01       	movw	r24, r14
    2816:	b6 01       	movw	r22, r12
    2818:	0e 94 00 38 	call	0x7000	; 0x7000 <__subsf3>
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	40 e2       	ldi	r20, 0x20	; 32
    2822:	51 e4       	ldi	r21, 0x41	; 65
    2824:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__divsf3>
    2828:	60 93 e4 28 	sts	0x28E4, r22	; 0x8028e4 <ERROR_CAL>
    282c:	70 93 e5 28 	sts	0x28E5, r23	; 0x8028e5 <ERROR_CAL+0x1>
    2830:	80 93 e6 28 	sts	0x28E6, r24	; 0x8028e6 <ERROR_CAL+0x2>
    2834:	90 93 e7 28 	sts	0x28E7, r25	; 0x8028e7 <ERROR_CAL+0x3>
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	80 93 e3 28 	sts	0x28E3, r24	; 0x8028e3 <ERROR_SET_IN_DEG_FLAG>
    283e:	10 92 de 28 	sts	0x28DE, r1	; 0x8028de <ERROR_SET_IN_FAH_FLAG>
    2842:	80 90 e4 28 	lds	r8, 0x28E4	; 0x8028e4 <ERROR_CAL>
    2846:	90 90 e5 28 	lds	r9, 0x28E5	; 0x8028e5 <ERROR_CAL+0x1>
    284a:	a0 90 e6 28 	lds	r10, 0x28E6	; 0x8028e6 <ERROR_CAL+0x2>
    284e:	b0 90 e7 28 	lds	r11, 0x28E7	; 0x8028e7 <ERROR_CAL+0x3>
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e2       	ldi	r20, 0x20	; 32
    2858:	51 e4       	ldi	r21, 0x41	; 65
    285a:	c5 01       	movw	r24, r10
    285c:	b4 01       	movw	r22, r8
    285e:	0e 94 b8 39 	call	0x7370	; 0x7370 <__mulsf3>
    2862:	6b 01       	movw	r12, r22
    2864:	7c 01       	movw	r14, r24
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	a9 01       	movw	r20, r18
    286c:	c5 01       	movw	r24, r10
    286e:	b4 01       	movw	r22, r8
    2870:	0e 94 65 38 	call	0x70ca	; 0x70ca <__cmpsf2>
    2874:	87 ff       	sbrs	r24, 7
    2876:	41 c0       	rjmp	.+130    	; 0x28fa <MODE_CLICK()+0x5d4>
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	80 93 e8 28 	sts	0x28E8, r24	; 0x8028e8 <SIGN>
    287e:	f7 fa       	bst	r15, 7
    2880:	f0 94       	com	r15
    2882:	f7 f8       	bld	r15, 7
    2884:	f0 94       	com	r15
    2886:	c0 92 06 29 	sts	0x2906, r12	; 0x802906 <ERROR_CAL1>
    288a:	d0 92 07 29 	sts	0x2907, r13	; 0x802907 <ERROR_CAL1+0x1>
    288e:	e0 92 08 29 	sts	0x2908, r14	; 0x802908 <ERROR_CAL1+0x2>
    2892:	f0 92 09 29 	sts	0x2909, r15	; 0x802909 <ERROR_CAL1+0x3>
    2896:	c9 dc       	rcall	.-1646   	; 0x222a <double const& EEPROMClass::put<double>(int, double const&) [clone .isra.10] [clone .constprop.65]>
    2898:	60 91 e8 28 	lds	r22, 0x28E8	; 0x8028e8 <SIGN>
    289c:	87 e0       	ldi	r24, 0x07	; 7
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	b2 dc       	rcall	.-1692   	; 0x2206 <EEPROMClass::write(int, unsigned char) [clone .isra.0]>
    28a2:	60 91 e3 28 	lds	r22, 0x28E3	; 0x8028e3 <ERROR_SET_IN_DEG_FLAG>
    28a6:	88 e0       	ldi	r24, 0x08	; 8
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	ad dc       	rcall	.-1702   	; 0x2206 <EEPROMClass::write(int, unsigned char) [clone .isra.0]>
    28ac:	60 91 de 28 	lds	r22, 0x28DE	; 0x8028de <ERROR_SET_IN_FAH_FLAG>
    28b0:	89 e0       	ldi	r24, 0x09	; 9
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	f8 ce       	rjmp	.-528    	; 0x26a6 <MODE_CLICK()+0x380>
    28b6:	60 91 45 29 	lds	r22, 0x2945	; 0x802945 <SET_LONG_VALUE+0x28>
    28ba:	70 91 46 29 	lds	r23, 0x2946	; 0x802946 <SET_LONG_VALUE+0x29>
    28be:	07 2e       	mov	r0, r23
    28c0:	00 0c       	add	r0, r0
    28c2:	88 0b       	sbc	r24, r24
    28c4:	99 0b       	sbc	r25, r25
    28c6:	0e 94 04 39 	call	0x7208	; 0x7208 <__floatsisf>
    28ca:	20 91 22 28 	lds	r18, 0x2822	; 0x802822 <TEMPERARY_SAVED_VARIABLE_FOR_CAL1_FAH>
    28ce:	30 91 23 28 	lds	r19, 0x2823	; 0x802823 <TEMPERARY_SAVED_VARIABLE_FOR_CAL1_FAH+0x1>
    28d2:	40 91 24 28 	lds	r20, 0x2824	; 0x802824 <TEMPERARY_SAVED_VARIABLE_FOR_CAL1_FAH+0x2>
    28d6:	50 91 25 28 	lds	r21, 0x2825	; 0x802825 <TEMPERARY_SAVED_VARIABLE_FOR_CAL1_FAH+0x3>
    28da:	0e 94 00 38 	call	0x7000	; 0x7000 <__subsf3>
    28de:	60 93 e4 28 	sts	0x28E4, r22	; 0x8028e4 <ERROR_CAL>
    28e2:	70 93 e5 28 	sts	0x28E5, r23	; 0x8028e5 <ERROR_CAL+0x1>
    28e6:	80 93 e6 28 	sts	0x28E6, r24	; 0x8028e6 <ERROR_CAL+0x2>
    28ea:	90 93 e7 28 	sts	0x28E7, r25	; 0x8028e7 <ERROR_CAL+0x3>
    28ee:	10 92 e3 28 	sts	0x28E3, r1	; 0x8028e3 <ERROR_SET_IN_DEG_FLAG>
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <ERROR_SET_IN_FAH_FLAG>
    28f8:	a4 cf       	rjmp	.-184    	; 0x2842 <MODE_CLICK()+0x51c>
    28fa:	10 92 e8 28 	sts	0x28E8, r1	; 0x8028e8 <SIGN>
    28fe:	c3 cf       	rjmp	.-122    	; 0x2886 <MODE_CLICK()+0x560>
    2900:	80 91 2f 29 	lds	r24, 0x292F	; 0x80292f <SET_LONG_VALUE+0x12>
    2904:	90 91 30 29 	lds	r25, 0x2930	; 0x802930 <SET_LONG_VALUE+0x13>
    2908:	80 93 07 28 	sts	0x2807, r24	; 0x802807 <LOW_CAL_VALUE_SET>
    290c:	90 93 08 28 	sts	0x2808, r25	; 0x802808 <LOW_CAL_VALUE_SET+0x1>
    2910:	0a 96       	adiw	r24, 0x0a	; 10
    2912:	80 93 31 29 	sts	0x2931, r24	; 0x802931 <SET_LONG_VALUE+0x14>
    2916:	90 93 32 29 	sts	0x2932, r25	; 0x802932 <SET_LONG_VALUE+0x15>
    291a:	c6 ce       	rjmp	.-628    	; 0x26a8 <MODE_CLICK()+0x382>
    291c:	80 91 31 29 	lds	r24, 0x2931	; 0x802931 <SET_LONG_VALUE+0x14>
    2920:	90 91 32 29 	lds	r25, 0x2932	; 0x802932 <SET_LONG_VALUE+0x15>
    2924:	80 93 b2 28 	sts	0x28B2, r24	; 0x8028b2 <HIGH_CAL_VALUE_SET>
    2928:	90 93 b3 28 	sts	0x28B3, r25	; 0x8028b3 <HIGH_CAL_VALUE_SET+0x1>
    292c:	80 91 ee 28 	lds	r24, 0x28EE	; 0x8028ee <TEMP_DEG_RAW>
    2930:	90 91 ef 28 	lds	r25, 0x28EF	; 0x8028ef <TEMP_DEG_RAW+0x1>
    2934:	a0 91 f0 28 	lds	r26, 0x28F0	; 0x8028f0 <TEMP_DEG_RAW+0x2>
    2938:	b0 91 f1 28 	lds	r27, 0x28F1	; 0x8028f1 <TEMP_DEG_RAW+0x3>
    293c:	80 93 1e 28 	sts	0x281E, r24	; 0x80281e <TEMP_CAL2_RAW_LOW_VALUE>
    2940:	90 93 1f 28 	sts	0x281F, r25	; 0x80281f <TEMP_CAL2_RAW_LOW_VALUE+0x1>
    2944:	a0 93 20 28 	sts	0x2820, r26	; 0x802820 <TEMP_CAL2_RAW_LOW_VALUE+0x2>
    2948:	b0 93 21 28 	sts	0x2821, r27	; 0x802821 <TEMP_CAL2_RAW_LOW_VALUE+0x3>
    294c:	ad ce       	rjmp	.-678    	; 0x26a8 <MODE_CLICK()+0x382>
    294e:	80 91 ee 28 	lds	r24, 0x28EE	; 0x8028ee <TEMP_DEG_RAW>
    2952:	90 91 ef 28 	lds	r25, 0x28EF	; 0x8028ef <TEMP_DEG_RAW+0x1>
    2956:	a0 91 f0 28 	lds	r26, 0x28F0	; 0x8028f0 <TEMP_DEG_RAW+0x2>
    295a:	b0 91 f1 28 	lds	r27, 0x28F1	; 0x8028f1 <TEMP_DEG_RAW+0x3>
    295e:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <TEMP_CAL2_RAW_HIGH_VALUE>
    2962:	90 93 1b 28 	sts	0x281B, r25	; 0x80281b <TEMP_CAL2_RAW_HIGH_VALUE+0x1>
    2966:	a0 93 1c 28 	sts	0x281C, r26	; 0x80281c <TEMP_CAL2_RAW_HIGH_VALUE+0x2>
    296a:	b0 93 1d 28 	sts	0x281D, r27	; 0x80281d <TEMP_CAL2_RAW_HIGH_VALUE+0x3>
    296e:	9c ce       	rjmp	.-712    	; 0x26a8 <MODE_CLICK()+0x382>
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	40 e2       	ldi	r20, 0x20	; 32
    2976:	51 e4       	ldi	r21, 0x41	; 65
    2978:	60 91 1e 28 	lds	r22, 0x281E	; 0x80281e <TEMP_CAL2_RAW_LOW_VALUE>
    297c:	70 91 1f 28 	lds	r23, 0x281F	; 0x80281f <TEMP_CAL2_RAW_LOW_VALUE+0x1>
    2980:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <TEMP_CAL2_RAW_LOW_VALUE+0x2>
    2984:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <TEMP_CAL2_RAW_LOW_VALUE+0x3>
    2988:	0e 94 b8 39 	call	0x7370	; 0x7370 <__mulsf3>
    298c:	0e 94 d1 38 	call	0x71a2	; 0x71a2 <__fixsfsi>
    2990:	60 93 cc 28 	sts	0x28CC, r22	; 0x8028cc <CAL2_RAW_LOW_VALUE_CONV>
    2994:	70 93 cd 28 	sts	0x28CD, r23	; 0x8028cd <CAL2_RAW_LOW_VALUE_CONV+0x1>
    2998:	80 93 ce 28 	sts	0x28CE, r24	; 0x8028ce <CAL2_RAW_LOW_VALUE_CONV+0x2>
    299c:	90 93 cf 28 	sts	0x28CF, r25	; 0x8028cf <CAL2_RAW_LOW_VALUE_CONV+0x3>
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	40 e2       	ldi	r20, 0x20	; 32
    29a6:	51 e4       	ldi	r21, 0x41	; 65
    29a8:	60 91 1a 28 	lds	r22, 0x281A	; 0x80281a <TEMP_CAL2_RAW_HIGH_VALUE>
    29ac:	70 91 1b 28 	lds	r23, 0x281B	; 0x80281b <TEMP_CAL2_RAW_HIGH_VALUE+0x1>
    29b0:	80 91 1c 28 	lds	r24, 0x281C	; 0x80281c <TEMP_CAL2_RAW_HIGH_VALUE+0x2>
    29b4:	90 91 1d 28 	lds	r25, 0x281D	; 0x80281d <TEMP_CAL2_RAW_HIGH_VALUE+0x3>
    29b8:	0e 94 b8 39 	call	0x7370	; 0x7370 <__mulsf3>
    29bc:	0e 94 d1 38 	call	0x71a2	; 0x71a2 <__fixsfsi>
    29c0:	60 93 c8 28 	sts	0x28C8, r22	; 0x8028c8 <CAL2_RAW_HIGH_VALUE_CONV>
    29c4:	70 93 c9 28 	sts	0x28C9, r23	; 0x8028c9 <CAL2_RAW_HIGH_VALUE_CONV+0x1>
    29c8:	80 93 ca 28 	sts	0x28CA, r24	; 0x8028ca <CAL2_RAW_HIGH_VALUE_CONV+0x2>
    29cc:	90 93 cb 28 	sts	0x28CB, r25	; 0x8028cb <CAL2_RAW_HIGH_VALUE_CONV+0x3>
    29d0:	6c ec       	ldi	r22, 0xCC	; 204
    29d2:	78 e2       	ldi	r23, 0x28	; 40
    29d4:	80 e5       	ldi	r24, 0x50	; 80
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	74 dc       	rcall	.-1816   	; 0x22c2 <long const& EEPROMClass::put<long>(int, long const&) [clone .isra.11] [clone .lto_priv.90]>
    29da:	68 ec       	ldi	r22, 0xC8	; 200
    29dc:	78 e2       	ldi	r23, 0x28	; 40
    29de:	8a e5       	ldi	r24, 0x5A	; 90
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	6f dc       	rcall	.-1826   	; 0x22c2 <long const& EEPROMClass::put<long>(int, long const&) [clone .isra.11] [clone .lto_priv.90]>
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	40 e2       	ldi	r20, 0x20	; 32
    29ea:	51 e4       	ldi	r21, 0x41	; 65
    29ec:	60 91 b4 28 	lds	r22, 0x28B4	; 0x8028b4 <CAL2_CALCULATED_LOW_CAL_VALUE>
    29f0:	70 91 b5 28 	lds	r23, 0x28B5	; 0x8028b5 <CAL2_CALCULATED_LOW_CAL_VALUE+0x1>
    29f4:	80 91 b6 28 	lds	r24, 0x28B6	; 0x8028b6 <CAL2_CALCULATED_LOW_CAL_VALUE+0x2>
    29f8:	90 91 b7 28 	lds	r25, 0x28B7	; 0x8028b7 <CAL2_CALCULATED_LOW_CAL_VALUE+0x3>
    29fc:	0e 94 b8 39 	call	0x7370	; 0x7370 <__mulsf3>
    2a00:	0e 94 d1 38 	call	0x71a2	; 0x71a2 <__fixsfsi>
    2a04:	60 93 c4 28 	sts	0x28C4, r22	; 0x8028c4 <MASTER_LOW_CONV>
    2a08:	70 93 c5 28 	sts	0x28C5, r23	; 0x8028c5 <MASTER_LOW_CONV+0x1>
    2a0c:	80 93 c6 28 	sts	0x28C6, r24	; 0x8028c6 <MASTER_LOW_CONV+0x2>
    2a10:	90 93 c7 28 	sts	0x28C7, r25	; 0x8028c7 <MASTER_LOW_CONV+0x3>
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	40 e2       	ldi	r20, 0x20	; 32
    2a1a:	51 e4       	ldi	r21, 0x41	; 65
    2a1c:	60 91 ae 28 	lds	r22, 0x28AE	; 0x8028ae <CAL2_CALCULATED_HIGH_CAL_VALUE>
    2a20:	70 91 af 28 	lds	r23, 0x28AF	; 0x8028af <CAL2_CALCULATED_HIGH_CAL_VALUE+0x1>
    2a24:	80 91 b0 28 	lds	r24, 0x28B0	; 0x8028b0 <CAL2_CALCULATED_HIGH_CAL_VALUE+0x2>
    2a28:	90 91 b1 28 	lds	r25, 0x28B1	; 0x8028b1 <CAL2_CALCULATED_HIGH_CAL_VALUE+0x3>
    2a2c:	0e 94 b8 39 	call	0x7370	; 0x7370 <__mulsf3>
    2a30:	0e 94 d1 38 	call	0x71a2	; 0x71a2 <__fixsfsi>
    2a34:	60 93 c0 28 	sts	0x28C0, r22	; 0x8028c0 <MASTER_HIGH_CONV>
    2a38:	70 93 c1 28 	sts	0x28C1, r23	; 0x8028c1 <MASTER_HIGH_CONV+0x1>
    2a3c:	80 93 c2 28 	sts	0x28C2, r24	; 0x8028c2 <MASTER_HIGH_CONV+0x2>
    2a40:	90 93 c3 28 	sts	0x28C3, r25	; 0x8028c3 <MASTER_HIGH_CONV+0x3>
    2a44:	64 ec       	ldi	r22, 0xC4	; 196
    2a46:	78 e2       	ldi	r23, 0x28	; 40
    2a48:	84 e6       	ldi	r24, 0x64	; 100
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	3a dc       	rcall	.-1932   	; 0x22c2 <long const& EEPROMClass::put<long>(int, long const&) [clone .isra.11] [clone .lto_priv.90]>
    2a4e:	60 ec       	ldi	r22, 0xC0	; 192
    2a50:	78 e2       	ldi	r23, 0x28	; 40
    2a52:	8e e6       	ldi	r24, 0x6E	; 110
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	35 dc       	rcall	.-1942   	; 0x22c2 <long const& EEPROMClass::put<long>(int, long const&) [clone .isra.11] [clone .lto_priv.90]>
    2a58:	27 ce       	rjmp	.-946    	; 0x26a8 <MODE_CLICK()+0x382>
    2a5a:	61 e0       	ldi	r22, 0x01	; 1
    2a5c:	80 91 23 29 	lds	r24, 0x2923	; 0x802923 <SET_LONG_VALUE+0x6>
    2a60:	90 91 24 29 	lds	r25, 0x2924	; 0x802924 <SET_LONG_VALUE+0x7>
    2a64:	89 2b       	or	r24, r25
    2a66:	09 f4       	brne	.+2      	; 0x2a6a <MODE_CLICK()+0x744>
    2a68:	60 e0       	ldi	r22, 0x00	; 0
    2a6a:	60 93 a5 28 	sts	0x28A5, r22	; 0x8028a5 <TIME_SOCK_OR_TOTAL>
_ZN11EEPROMClass3putIbEERKT_iS3_.isra.12():
    2a6e:	81 e4       	ldi	r24, 0x41	; 65
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	89 83       	std	Y+1, r24	; 0x01
    2a74:	9a 83       	std	Y+2, r25	; 0x02
    2a76:	ce 01       	movw	r24, r28
    2a78:	01 96       	adiw	r24, 0x01	; 1
    2a7a:	c6 db       	rcall	.-2164   	; 0x2208 <EERef::update(unsigned char)>
    2a7c:	15 ce       	rjmp	.-982    	; 0x26a8 <MODE_CLICK()+0x382>
MODE_CLICK():
    2a7e:	9c 01       	movw	r18, r24
    2a80:	2b 7f       	andi	r18, 0xFB	; 251
    2a82:	10 92 bf 28 	sts	0x28BF, r1	; 0x8028bf <Mode_Button_Single_Press_In_Settings>
    2a86:	2a 30       	cpi	r18, 0x0A	; 10
    2a88:	31 05       	cpc	r19, r1
    2a8a:	09 f4       	brne	.+2      	; 0x2a8e <MODE_CLICK()+0x768>
    2a8c:	27 ce       	rjmp	.-946    	; 0x26dc <MODE_CLICK()+0x3b6>
    2a8e:	8c 30       	cpi	r24, 0x0C	; 12
    2a90:	91 05       	cpc	r25, r1
    2a92:	09 f0       	breq	.+2      	; 0x2a96 <MODE_CLICK()+0x770>
    2a94:	93 cd       	rjmp	.-1242   	; 0x25bc <MODE_CLICK()+0x296>
    2a96:	22 ce       	rjmp	.-956    	; 0x26dc <MODE_CLICK()+0x3b6>
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	80 93 0b 29 	sts	0x290B, r24	; 0x80290b <PUMP_FLAG>
    2a9e:	8e cc       	rjmp	.-1764   	; 0x23bc <MODE_CLICK()+0x96>
    2aa0:	82 e3       	ldi	r24, 0x32	; 50
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	0e 94 2a 0b 	call	0x1654	; 0x1654 <Tclass::BUZZ_INTERVAL(int) [clone .constprop.56]>
    2aa8:	b0 cc       	rjmp	.-1696   	; 0x240a <MODE_CLICK()+0xe4>

00002aaa <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]>:
SET_LONG_PRESS_FUNCTION():
    2aaa:	4f 92       	push	r4
    2aac:	5f 92       	push	r5
    2aae:	6f 92       	push	r6
    2ab0:	7f 92       	push	r7
    2ab2:	8f 92       	push	r8
    2ab4:	9f 92       	push	r9
    2ab6:	af 92       	push	r10
    2ab8:	bf 92       	push	r11
    2aba:	cf 92       	push	r12
    2abc:	df 92       	push	r13
    2abe:	ef 92       	push	r14
    2ac0:	ff 92       	push	r15
    2ac2:	0f 93       	push	r16
    2ac4:	1f 93       	push	r17
    2ac6:	cf 93       	push	r28
    2ac8:	df 93       	push	r29
    2aca:	00 d0       	rcall	.+0      	; 0x2acc <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x22>
    2acc:	cd b7       	in	r28, 0x3d	; 61
    2ace:	de b7       	in	r29, 0x3e	; 62
digitalWrite():
    2ad0:	60 e0       	ldi	r22, 0x00	; 0
    2ad2:	8c e0       	ldi	r24, 0x0C	; 12
    2ad4:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
    2ad8:	e0 91 09 28 	lds	r30, 0x2809	; 0x802809 <SELECTION_PARAMETER>
    2adc:	f0 91 0a 28 	lds	r31, 0x280A	; 0x80280a <SELECTION_PARAMETER+0x1>
SET_LONG_PRESS_FUNCTION():
    2ae0:	80 91 bf 28 	lds	r24, 0x28BF	; 0x8028bf <Mode_Button_Single_Press_In_Settings>
    2ae4:	88 23       	and	r24, r24
    2ae6:	09 f4       	brne	.+2      	; 0x2aea <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x40>
    2ae8:	73 c7       	rjmp	.+3814   	; 0x39d0 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xf26>
    2aea:	e4 31       	cpi	r30, 0x14	; 20
    2aec:	f1 05       	cpc	r31, r1
    2aee:	08 f0       	brcs	.+2      	; 0x2af2 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x48>
    2af0:	6e c0       	rjmp	.+220    	; 0x2bce <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x124>
    2af2:	e3 58       	subi	r30, 0x83	; 131
    2af4:	fa 4e       	sbci	r31, 0xEA	; 234
    2af6:	0c 94 6c 3a 	jmp	0x74d8	; 0x74d8 <__tablejump2__>
    2afa:	91 15       	cp	r25, r1
    2afc:	07 16       	cp	r0, r23
    2afe:	45 16       	cp	r4, r21
    2b00:	b1 16       	cp	r11, r17
    2b02:	22 17       	cp	r18, r18
    2b04:	7d 17       	cp	r23, r29
    2b06:	cc 17       	cp	r28, r28
    2b08:	0f 18       	sub	r0, r15
    2b0a:	40 18       	sub	r4, r0
    2b0c:	98 18       	sub	r9, r8
    2b0e:	e8 18       	sub	r14, r8
    2b10:	31 19       	sub	r19, r1
    2b12:	70 19       	sub	r23, r0
    2b14:	f0 19       	sub	r31, r0
    2b16:	26 1a       	sub	r2, r22
    2b18:	a8 1a       	sub	r10, r24
    2b1a:	ad 1a       	sub	r10, r29
    2b1c:	ff 1a       	sub	r15, r31
    2b1e:	2e 1b       	sub	r18, r30
    2b20:	61 1b       	sub	r22, r17
    2b22:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    2b26:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <DOT2_1>
    2b2a:	10 92 bc 28 	sts	0x28BC, r1	; 0x8028bc <DOT1_0>
    2b2e:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
DISPLAY_DIGIT2():
    2b32:	8c e0       	ldi	r24, 0x0C	; 12
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    2b3a:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    2b3e:	80 e1       	ldi	r24, 0x10	; 16
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    2b46:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    2b4a:	89 e1       	ldi	r24, 0x19	; 25
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <digits2+0x4>
    2b52:	90 93 03 29 	sts	0x2903, r25	; 0x802903 <digits2+0x5>
    2b56:	81 e1       	ldi	r24, 0x11	; 17
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    2b5e:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    2b62:	80 91 ba 28 	lds	r24, 0x28BA	; 0x8028ba <i>
    2b66:	90 91 bb 28 	lds	r25, 0x28BB	; 0x8028bb <i+0x1>
    2b6a:	89 31       	cpi	r24, 0x19	; 25
    2b6c:	91 05       	cpc	r25, r1
    2b6e:	7c f4       	brge	.+30     	; 0x2b8e <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xe4>
DISPLAY_DIGIT1():
    2b70:	88 e1       	ldi	r24, 0x18	; 24
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <digits1>
    2b78:	90 93 f7 28 	sts	0x28F7, r25	; 0x8028f7 <digits1+0x1>
    2b7c:	80 93 f8 28 	sts	0x28F8, r24	; 0x8028f8 <digits1+0x2>
    2b80:	90 93 f9 28 	sts	0x28F9, r25	; 0x8028f9 <digits1+0x3>
    2b84:	80 93 fa 28 	sts	0x28FA, r24	; 0x8028fa <digits1+0x4>
    2b88:	90 93 fb 28 	sts	0x28FB, r25	; 0x8028fb <digits1+0x5>
    2b8c:	70 c7       	rjmp	.+3808   	; 0x3a6e <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xfc4>
SET_LONG_PRESS_FUNCTION():
    2b8e:	20 91 1d 29 	lds	r18, 0x291D	; 0x80291d <SET_LONG_VALUE>
    2b92:	30 91 1e 29 	lds	r19, 0x291E	; 0x80291e <SET_LONG_VALUE+0x1>
DISPLAY_DIGIT1():
    2b96:	10 92 f6 28 	sts	0x28F6, r1	; 0x8028f6 <digits1>
    2b9a:	10 92 f7 28 	sts	0x28F7, r1	; 0x8028f7 <digits1+0x1>
SET_LONG_PRESS_FUNCTION():
    2b9e:	23 2b       	or	r18, r19
    2ba0:	49 f5       	brne	.+82     	; 0x2bf4 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x14a>
DISPLAY_DIGIT1():
    2ba2:	25 e1       	ldi	r18, 0x15	; 21
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	20 93 f8 28 	sts	0x28F8, r18	; 0x8028f8 <digits1+0x2>
    2baa:	30 93 f9 28 	sts	0x28F9, r19	; 0x8028f9 <digits1+0x3>
    2bae:	20 93 fa 28 	sts	0x28FA, r18	; 0x8028fa <digits1+0x4>
    2bb2:	30 93 fb 28 	sts	0x28FB, r19	; 0x8028fb <digits1+0x5>
    2bb6:	28 e1       	ldi	r18, 0x18	; 24
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	20 93 fc 28 	sts	0x28FC, r18	; 0x8028fc <digits1+0x6>
    2bbe:	30 93 fd 28 	sts	0x28FD, r19	; 0x8028fd <digits1+0x7>
SET_LONG_PRESS_FUNCTION():
    2bc2:	c3 97       	sbiw	r24, 0x33	; 51
    2bc4:	24 f0       	brlt	.+8      	; 0x2bce <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x124>
    2bc6:	10 92 ba 28 	sts	0x28BA, r1	; 0x8028ba <i>
    2bca:	10 92 bb 28 	sts	0x28BB, r1	; 0x8028bb <i+0x1>
    2bce:	0f 90       	pop	r0
    2bd0:	0f 90       	pop	r0
    2bd2:	df 91       	pop	r29
    2bd4:	cf 91       	pop	r28
    2bd6:	1f 91       	pop	r17
    2bd8:	0f 91       	pop	r16
    2bda:	ff 90       	pop	r15
    2bdc:	ef 90       	pop	r14
    2bde:	df 90       	pop	r13
    2be0:	cf 90       	pop	r12
    2be2:	bf 90       	pop	r11
    2be4:	af 90       	pop	r10
    2be6:	9f 90       	pop	r9
    2be8:	8f 90       	pop	r8
    2bea:	7f 90       	pop	r7
    2bec:	6f 90       	pop	r6
    2bee:	5f 90       	pop	r5
    2bf0:	4f 90       	pop	r4
    2bf2:	08 95       	ret
DISPLAY_DIGIT1():
    2bf4:	24 e1       	ldi	r18, 0x14	; 20
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	20 93 f8 28 	sts	0x28F8, r18	; 0x8028f8 <digits1+0x2>
    2bfc:	30 93 f9 28 	sts	0x28F9, r19	; 0x8028f9 <digits1+0x3>
    2c00:	28 e1       	ldi	r18, 0x18	; 24
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	20 93 fa 28 	sts	0x28FA, r18	; 0x8028fa <digits1+0x4>
    2c08:	30 93 fb 28 	sts	0x28FB, r19	; 0x8028fb <digits1+0x5>
    2c0c:	d6 cf       	rjmp	.-84     	; 0x2bba <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x110>
SET_LONG_PRESS_FUNCTION():
    2c0e:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
    2c12:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    2c16:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <DOT2_1>
DISPLAY_DIGIT2():
    2c1a:	8c e1       	ldi	r24, 0x1C	; 28
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    2c22:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    2c26:	84 e1       	ldi	r24, 0x14	; 20
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    2c2e:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    2c32:	89 e1       	ldi	r24, 0x19	; 25
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <digits2+0x4>
    2c3a:	90 93 03 29 	sts	0x2903, r25	; 0x802903 <digits2+0x5>
    2c3e:	80 e1       	ldi	r24, 0x10	; 16
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    2c46:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    2c4a:	80 91 ba 28 	lds	r24, 0x28BA	; 0x8028ba <i>
    2c4e:	90 91 bb 28 	lds	r25, 0x28BB	; 0x8028bb <i+0x1>
    2c52:	89 31       	cpi	r24, 0x19	; 25
    2c54:	91 05       	cpc	r25, r1
    2c56:	0c f4       	brge	.+2      	; 0x2c5a <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x1b0>
    2c58:	8b cf       	rjmp	.-234    	; 0x2b70 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xc6>
    2c5a:	20 91 1f 29 	lds	r18, 0x291F	; 0x80291f <SET_LONG_VALUE+0x2>
    2c5e:	30 91 20 29 	lds	r19, 0x2920	; 0x802920 <SET_LONG_VALUE+0x3>
    2c62:	23 2b       	or	r18, r19
    2c64:	49 f4       	brne	.+18     	; 0x2c78 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x1ce>
DISPLAY_DIGIT1():
    2c66:	2d e1       	ldi	r18, 0x1D	; 29
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	20 93 f6 28 	sts	0x28F6, r18	; 0x8028f6 <digits1>
    2c6e:	30 93 f7 28 	sts	0x28F7, r19	; 0x8028f7 <digits1+0x1>
    2c72:	2a e0       	ldi	r18, 0x0A	; 10
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	c0 cf       	rjmp	.-128    	; 0x2bf8 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x14e>
    2c78:	2d e1       	ldi	r18, 0x1D	; 29
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	20 93 f6 28 	sts	0x28F6, r18	; 0x8028f6 <digits1>
    2c80:	30 93 f7 28 	sts	0x28F7, r19	; 0x8028f7 <digits1+0x1>
    2c84:	25 e1       	ldi	r18, 0x15	; 21
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	b7 cf       	rjmp	.-146    	; 0x2bf8 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x14e>
SET_LONG_PRESS_FUNCTION():
    2c8a:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
    2c8e:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
DISPLAY_DIGIT2():
    2c92:	8c e0       	ldi	r24, 0x0C	; 12
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    2c9a:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    2c9e:	8d e0       	ldi	r24, 0x0D	; 13
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    2ca6:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    2caa:	85 e1       	ldi	r24, 0x15	; 21
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <digits2+0x4>
    2cb2:	90 93 03 29 	sts	0x2903, r25	; 0x802903 <digits2+0x5>
    2cb6:	8f e0       	ldi	r24, 0x0F	; 15
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    2cbe:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
    2cc2:	20 91 4f 29 	lds	r18, 0x294F	; 0x80294f <DEGREE_VALUE_SET>
SET_LONG_PRESS_FUNCTION():
    2cc6:	80 91 ba 28 	lds	r24, 0x28BA	; 0x8028ba <i>
    2cca:	90 91 bb 28 	lds	r25, 0x28BB	; 0x8028bb <i+0x1>
    2cce:	49 97       	sbiw	r24, 0x19	; 25
    2cd0:	f4 f4       	brge	.+60     	; 0x2d0e <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x264>
    2cd2:	80 91 b9 28 	lds	r24, 0x28B9	; 0x8028b9 <BLINK_STATS>
    2cd6:	81 11       	cpse	r24, r1
    2cd8:	13 c0       	rjmp	.+38     	; 0x2d00 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x256>
DISPLAY_DIGIT1():
    2cda:	88 e1       	ldi	r24, 0x18	; 24
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <digits1>
    2ce2:	90 93 f7 28 	sts	0x28F7, r25	; 0x8028f7 <digits1+0x1>
    2ce6:	80 93 f8 28 	sts	0x28F8, r24	; 0x8028f8 <digits1+0x2>
    2cea:	90 93 f9 28 	sts	0x28F9, r25	; 0x8028f9 <digits1+0x3>
    2cee:	80 93 fa 28 	sts	0x28FA, r24	; 0x8028fa <digits1+0x4>
    2cf2:	90 93 fb 28 	sts	0x28FB, r25	; 0x8028fb <digits1+0x5>
SET_LONG_PRESS_FUNCTION():
    2cf6:	21 11       	cpse	r18, r1
    2cf8:	0c c2       	rjmp	.+1048   	; 0x3112 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x668>
    2cfa:	8a e0       	ldi	r24, 0x0A	; 10
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	8a c0       	rjmp	.+276    	; 0x2e14 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x36a>
    2d00:	89 e1       	ldi	r24, 0x19	; 25
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	80 93 ba 28 	sts	0x28BA, r24	; 0x8028ba <i>
    2d08:	90 93 bb 28 	sts	0x28BB, r25	; 0x8028bb <i+0x1>
    2d0c:	f4 cf       	rjmp	.-24     	; 0x2cf6 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x24c>
    2d0e:	21 11       	cpse	r18, r1
    2d10:	17 c0       	rjmp	.+46     	; 0x2d40 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x296>
    2d12:	80 91 21 29 	lds	r24, 0x2921	; 0x802921 <SET_LONG_VALUE+0x4>
    2d16:	90 91 22 29 	lds	r25, 0x2922	; 0x802922 <SET_LONG_VALUE+0x5>
    2d1a:	2a e0       	ldi	r18, 0x0A	; 10
    2d1c:	28 9f       	mul	r18, r24
    2d1e:	b0 01       	movw	r22, r0
    2d20:	29 9f       	mul	r18, r25
    2d22:	70 0d       	add	r23, r0
    2d24:	11 24       	eor	r1, r1
    2d26:	07 2e       	mov	r0, r23
    2d28:	00 0c       	add	r0, r0
    2d2a:	88 0b       	sbc	r24, r24
    2d2c:	99 0b       	sbc	r25, r25
    2d2e:	0e 94 a0 03 	call	0x740	; 0x740 <Eclass::BREAK_NUMBER1(long) [clone .constprop.46]>
    2d32:	88 e1       	ldi	r24, 0x18	; 24
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <digits1>
    2d3a:	90 93 f7 28 	sts	0x28F7, r25	; 0x8028f7 <digits1+0x1>
    2d3e:	dd cf       	rjmp	.-70     	; 0x2cfa <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x250>
    2d40:	80 91 45 29 	lds	r24, 0x2945	; 0x802945 <SET_LONG_VALUE+0x28>
    2d44:	90 91 46 29 	lds	r25, 0x2946	; 0x802946 <SET_LONG_VALUE+0x29>
    2d48:	2a e0       	ldi	r18, 0x0A	; 10
    2d4a:	28 9f       	mul	r18, r24
    2d4c:	b0 01       	movw	r22, r0
    2d4e:	29 9f       	mul	r18, r25
    2d50:	70 0d       	add	r23, r0
    2d52:	11 24       	eor	r1, r1
    2d54:	07 2e       	mov	r0, r23
    2d56:	00 0c       	add	r0, r0
    2d58:	88 0b       	sbc	r24, r24
    2d5a:	99 0b       	sbc	r25, r25
    2d5c:	0e 94 a0 03 	call	0x740	; 0x740 <Eclass::BREAK_NUMBER1(long) [clone .constprop.46]>
    2d60:	d8 c1       	rjmp	.+944    	; 0x3112 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x668>
    2d62:	10 92 bc 28 	sts	0x28BC, r1	; 0x8028bc <DOT1_0>
    2d66:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    2d6a:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <DOT2_1>
    2d6e:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
DISPLAY_DIGIT2():
    2d72:	80 e1       	ldi	r24, 0x10	; 16
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    2d7a:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    2d7e:	29 e1       	ldi	r18, 0x19	; 25
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	20 93 00 29 	sts	0x2900, r18	; 0x802900 <digits2+0x2>
    2d86:	30 93 01 29 	sts	0x2901, r19	; 0x802901 <digits2+0x3>
    2d8a:	42 e1       	ldi	r20, 0x12	; 18
    2d8c:	50 e0       	ldi	r21, 0x00	; 0
    2d8e:	40 93 02 29 	sts	0x2902, r20	; 0x802902 <digits2+0x4>
    2d92:	50 93 03 29 	sts	0x2903, r21	; 0x802903 <digits2+0x5>
    2d96:	4f e0       	ldi	r20, 0x0F	; 15
    2d98:	50 e0       	ldi	r21, 0x00	; 0
    2d9a:	40 93 04 29 	sts	0x2904, r20	; 0x802904 <digits2+0x6>
    2d9e:	50 93 05 29 	sts	0x2905, r21	; 0x802905 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    2da2:	40 91 ba 28 	lds	r20, 0x28BA	; 0x8028ba <i>
    2da6:	50 91 bb 28 	lds	r21, 0x28BB	; 0x8028bb <i+0x1>
    2daa:	49 31       	cpi	r20, 0x19	; 25
    2dac:	51 05       	cpc	r21, r1
    2dae:	e4 f4       	brge	.+56     	; 0x2de8 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x33e>
    2db0:	80 91 b9 28 	lds	r24, 0x28B9	; 0x8028b9 <BLINK_STATS>
    2db4:	81 11       	cpse	r24, r1
    2db6:	0f c0       	rjmp	.+30     	; 0x2dd6 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x32c>
DISPLAY_DIGIT1():
    2db8:	88 e1       	ldi	r24, 0x18	; 24
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <digits1>
    2dc0:	90 93 f7 28 	sts	0x28F7, r25	; 0x8028f7 <digits1+0x1>
    2dc4:	80 93 f8 28 	sts	0x28F8, r24	; 0x8028f8 <digits1+0x2>
    2dc8:	90 93 f9 28 	sts	0x28F9, r25	; 0x8028f9 <digits1+0x3>
    2dcc:	80 93 fa 28 	sts	0x28FA, r24	; 0x8028fa <digits1+0x4>
    2dd0:	90 93 fb 28 	sts	0x28FB, r25	; 0x8028fb <digits1+0x5>
    2dd4:	1f c0       	rjmp	.+62     	; 0x2e14 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x36a>
SET_LONG_PRESS_FUNCTION():
    2dd6:	20 93 ba 28 	sts	0x28BA, r18	; 0x8028ba <i>
    2dda:	30 93 bb 28 	sts	0x28BB, r19	; 0x8028bb <i+0x1>
    2dde:	80 91 ba 28 	lds	r24, 0x28BA	; 0x8028ba <i>
    2de2:	90 91 bb 28 	lds	r25, 0x28BB	; 0x8028bb <i+0x1>
    2de6:	ed ce       	rjmp	.-550    	; 0x2bc2 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x118>
    2de8:	20 91 23 29 	lds	r18, 0x2923	; 0x802923 <SET_LONG_VALUE+0x6>
    2dec:	30 91 24 29 	lds	r19, 0x2924	; 0x802924 <SET_LONG_VALUE+0x7>
    2df0:	23 2b       	or	r18, r19
    2df2:	a9 f4       	brne	.+42     	; 0x2e1e <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x374>
DISPLAY_DIGIT1():
    2df4:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <digits1>
    2df8:	90 93 f7 28 	sts	0x28F7, r25	; 0x8028f7 <digits1+0x1>
    2dfc:	27 e1       	ldi	r18, 0x17	; 23
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	20 93 f8 28 	sts	0x28F8, r18	; 0x8028f8 <digits1+0x2>
    2e04:	30 93 f9 28 	sts	0x28F9, r19	; 0x8028f9 <digits1+0x3>
    2e08:	80 93 fa 28 	sts	0x28FA, r24	; 0x8028fa <digits1+0x4>
    2e0c:	90 93 fb 28 	sts	0x28FB, r25	; 0x8028fb <digits1+0x5>
    2e10:	8f e1       	ldi	r24, 0x1F	; 31
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	80 93 fc 28 	sts	0x28FC, r24	; 0x8028fc <digits1+0x6>
    2e18:	90 93 fd 28 	sts	0x28FD, r25	; 0x8028fd <digits1+0x7>
    2e1c:	e0 cf       	rjmp	.-64     	; 0x2dde <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x334>
    2e1e:	8c e0       	ldi	r24, 0x0C	; 12
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <digits1>
    2e26:	90 93 f7 28 	sts	0x28F7, r25	; 0x8028f7 <digits1+0x1>
    2e2a:	87 e1       	ldi	r24, 0x17	; 23
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	80 93 f8 28 	sts	0x28F8, r24	; 0x8028f8 <digits1+0x2>
    2e32:	90 93 f9 28 	sts	0x28F9, r25	; 0x8028f9 <digits1+0x3>
    2e36:	8d e0       	ldi	r24, 0x0D	; 13
    2e38:	90 e0       	ldi	r25, 0x00	; 0
SET_LONG_PRESS_FUNCTION():
    2e3a:	80 93 fa 28 	sts	0x28FA, r24	; 0x8028fa <digits1+0x4>
    2e3e:	90 93 fb 28 	sts	0x28FB, r25	; 0x8028fb <digits1+0x5>
    2e42:	5b cf       	rjmp	.-330    	; 0x2cfa <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x250>
    2e44:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
DISPLAY_DIGIT2():
    2e48:	8b e0       	ldi	r24, 0x0B	; 11
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    2e50:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    2e54:	81 e1       	ldi	r24, 0x11	; 17
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    2e5c:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    2e60:	87 e1       	ldi	r24, 0x17	; 23
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <digits2+0x4>
    2e68:	90 93 03 29 	sts	0x2903, r25	; 0x802903 <digits2+0x5>
    2e6c:	8c e0       	ldi	r24, 0x0C	; 12
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    2e74:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    2e78:	20 91 ba 28 	lds	r18, 0x28BA	; 0x8028ba <i>
    2e7c:	30 91 bb 28 	lds	r19, 0x28BB	; 0x8028bb <i+0x1>
    2e80:	29 31       	cpi	r18, 0x19	; 25
    2e82:	31 05       	cpc	r19, r1
    2e84:	64 f4       	brge	.+24     	; 0x2e9e <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x3f4>
    2e86:	80 91 b9 28 	lds	r24, 0x28B9	; 0x8028b9 <BLINK_STATS>
    2e8a:	88 23       	and	r24, r24
    2e8c:	09 f4       	brne	.+2      	; 0x2e90 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x3e6>
    2e8e:	94 cf       	rjmp	.-216    	; 0x2db8 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x30e>
    2e90:	89 e1       	ldi	r24, 0x19	; 25
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	80 93 ba 28 	sts	0x28BA, r24	; 0x8028ba <i>
    2e98:	90 93 bb 28 	sts	0x28BB, r25	; 0x8028bb <i+0x1>
    2e9c:	a0 cf       	rjmp	.-192    	; 0x2dde <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x334>
    2e9e:	20 91 25 29 	lds	r18, 0x2925	; 0x802925 <SET_LONG_VALUE+0x8>
    2ea2:	30 91 26 29 	lds	r19, 0x2926	; 0x802926 <SET_LONG_VALUE+0x9>
    2ea6:	23 2b       	or	r18, r19
    2ea8:	99 f4       	brne	.+38     	; 0x2ed0 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x426>
DISPLAY_DIGIT1():
    2eaa:	20 e2       	ldi	r18, 0x20	; 32
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	20 93 f6 28 	sts	0x28F6, r18	; 0x8028f6 <digits1>
    2eb2:	30 93 f7 28 	sts	0x28F7, r19	; 0x8028f7 <digits1+0x1>
    2eb6:	29 e1       	ldi	r18, 0x19	; 25
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	20 93 f8 28 	sts	0x28F8, r18	; 0x8028f8 <digits1+0x2>
    2ebe:	30 93 f9 28 	sts	0x28F9, r19	; 0x8028f9 <digits1+0x3>
    2ec2:	80 93 fa 28 	sts	0x28FA, r24	; 0x8028fa <digits1+0x4>
    2ec6:	90 93 fb 28 	sts	0x28FB, r25	; 0x8028fb <digits1+0x5>
    2eca:	8e e0       	ldi	r24, 0x0E	; 14
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	a2 cf       	rjmp	.-188    	; 0x2e14 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x36a>
    2ed0:	8f e0       	ldi	r24, 0x0F	; 15
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <digits1>
    2ed8:	90 93 f7 28 	sts	0x28F7, r25	; 0x8028f7 <digits1+0x1>
    2edc:	84 e1       	ldi	r24, 0x14	; 20
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	80 93 f8 28 	sts	0x28F8, r24	; 0x8028f8 <digits1+0x2>
    2ee4:	90 93 f9 28 	sts	0x28F9, r25	; 0x8028f9 <digits1+0x3>
    2ee8:	8e e0       	ldi	r24, 0x0E	; 14
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	80 93 fa 28 	sts	0x28FA, r24	; 0x8028fa <digits1+0x4>
    2ef0:	90 93 fb 28 	sts	0x28FB, r25	; 0x8028fb <digits1+0x5>
    2ef4:	8a e1       	ldi	r24, 0x1A	; 26
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	8d cf       	rjmp	.-230    	; 0x2e14 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x36a>
SET_LONG_PRESS_FUNCTION():
    2efa:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    2efe:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <DOT2_1>
    2f02:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
DISPLAY_DIGIT2():
    2f06:	8b e0       	ldi	r24, 0x0B	; 11
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    2f0e:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    2f12:	81 e1       	ldi	r24, 0x11	; 17
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    2f1a:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    2f1e:	80 e2       	ldi	r24, 0x20	; 32
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <digits2+0x4>
    2f26:	90 93 03 29 	sts	0x2903, r25	; 0x802903 <digits2+0x5>
    2f2a:	80 e1       	ldi	r24, 0x10	; 16
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    2f32:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    2f36:	80 91 ba 28 	lds	r24, 0x28BA	; 0x8028ba <i>
    2f3a:	90 91 bb 28 	lds	r25, 0x28BB	; 0x8028bb <i+0x1>
    2f3e:	49 97       	sbiw	r24, 0x19	; 25
    2f40:	0c f4       	brge	.+2      	; 0x2f44 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x49a>
    2f42:	a1 cf       	rjmp	.-190    	; 0x2e86 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x3dc>
    2f44:	80 91 27 29 	lds	r24, 0x2927	; 0x802927 <SET_LONG_VALUE+0xa>
    2f48:	90 91 28 29 	lds	r25, 0x2928	; 0x802928 <SET_LONG_VALUE+0xb>
    2f4c:	89 2b       	or	r24, r25
    2f4e:	a9 f0       	breq	.+42     	; 0x2f7a <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x4d0>
DISPLAY_DIGIT1():
    2f50:	84 e2       	ldi	r24, 0x24	; 36
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <digits1>
    2f58:	90 93 f7 28 	sts	0x28F7, r25	; 0x8028f7 <digits1+0x1>
    2f5c:	8a e1       	ldi	r24, 0x1A	; 26
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	80 93 f8 28 	sts	0x28F8, r24	; 0x8028f8 <digits1+0x2>
    2f64:	90 93 f9 28 	sts	0x28F9, r25	; 0x8028f9 <digits1+0x3>
    2f68:	8c e0       	ldi	r24, 0x0C	; 12
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	80 93 fa 28 	sts	0x28FA, r24	; 0x8028fa <digits1+0x4>
    2f70:	90 93 fb 28 	sts	0x28FB, r25	; 0x8028fb <digits1+0x5>
    2f74:	88 e1       	ldi	r24, 0x18	; 24
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	4d cf       	rjmp	.-358    	; 0x2e14 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x36a>
    2f7a:	84 e2       	ldi	r24, 0x24	; 36
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <digits1>
    2f82:	90 93 f7 28 	sts	0x28F7, r25	; 0x8028f7 <digits1+0x1>
    2f86:	8a e1       	ldi	r24, 0x1A	; 26
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	80 93 f8 28 	sts	0x28F8, r24	; 0x8028f8 <digits1+0x2>
    2f8e:	90 93 f9 28 	sts	0x28F9, r25	; 0x8028f9 <digits1+0x3>
    2f92:	8a e0       	ldi	r24, 0x0A	; 10
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	ea cf       	rjmp	.-44     	; 0x2f6c <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x4c2>
SET_LONG_PRESS_FUNCTION():
    2f98:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    2f9c:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
DISPLAY_DIGIT2():
    2fa0:	4a e0       	ldi	r20, 0x0A	; 10
    2fa2:	50 e0       	ldi	r21, 0x00	; 0
    2fa4:	40 93 fe 28 	sts	0x28FE, r20	; 0x8028fe <digits2>
    2fa8:	50 93 ff 28 	sts	0x28FF, r21	; 0x8028ff <digits2+0x1>
    2fac:	2d e0       	ldi	r18, 0x0D	; 13
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	20 93 00 29 	sts	0x2900, r18	; 0x802900 <digits2+0x2>
    2fb4:	30 93 01 29 	sts	0x2901, r19	; 0x802901 <digits2+0x3>
    2fb8:	8a e1       	ldi	r24, 0x1A	; 26
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <digits2+0x4>
    2fc0:	90 93 03 29 	sts	0x2903, r25	; 0x802903 <digits2+0x5>
    2fc4:	6e e0       	ldi	r22, 0x0E	; 14
    2fc6:	70 e0       	ldi	r23, 0x00	; 0
    2fc8:	60 93 04 29 	sts	0x2904, r22	; 0x802904 <digits2+0x6>
    2fcc:	70 93 05 29 	sts	0x2905, r23	; 0x802905 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    2fd0:	60 91 ba 28 	lds	r22, 0x28BA	; 0x8028ba <i>
    2fd4:	70 91 bb 28 	lds	r23, 0x28BB	; 0x8028bb <i+0x1>
    2fd8:	69 31       	cpi	r22, 0x19	; 25
    2fda:	71 05       	cpc	r23, r1
    2fdc:	0c f4       	brge	.+2      	; 0x2fe0 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x536>
    2fde:	c8 cd       	rjmp	.-1136   	; 0x2b70 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xc6>
    2fe0:	e0 91 29 29 	lds	r30, 0x2929	; 0x802929 <SET_LONG_VALUE+0xc>
    2fe4:	f0 91 2a 29 	lds	r31, 0x292A	; 0x80292a <SET_LONG_VALUE+0xd>
DISPLAY_DIGIT1():
    2fe8:	40 93 f6 28 	sts	0x28F6, r20	; 0x8028f6 <digits1>
    2fec:	50 93 f7 28 	sts	0x28F7, r21	; 0x8028f7 <digits1+0x1>
    2ff0:	20 93 f8 28 	sts	0x28F8, r18	; 0x8028f8 <digits1+0x2>
    2ff4:	30 93 f9 28 	sts	0x28F9, r19	; 0x8028f9 <digits1+0x3>
    2ff8:	80 93 fa 28 	sts	0x28FA, r24	; 0x8028fa <digits1+0x4>
    2ffc:	90 93 fb 28 	sts	0x28FB, r25	; 0x8028fb <digits1+0x5>
    3000:	82 e0       	ldi	r24, 0x02	; 2
    3002:	90 e0       	ldi	r25, 0x00	; 0
SET_LONG_PRESS_FUNCTION():
    3004:	ef 2b       	or	r30, r31
    3006:	11 f4       	brne	.+4      	; 0x300c <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x562>
DISPLAY_DIGIT1():
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	80 93 fc 28 	sts	0x28FC, r24	; 0x8028fc <digits1+0x6>
    3010:	90 93 fd 28 	sts	0x28FD, r25	; 0x8028fd <digits1+0x7>
SET_LONG_PRESS_FUNCTION():
    3014:	63 33       	cpi	r22, 0x33	; 51
    3016:	71 05       	cpc	r23, r1
    3018:	0c f0       	brlt	.+2      	; 0x301c <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x572>
    301a:	d5 cd       	rjmp	.-1110   	; 0x2bc6 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x11c>
    301c:	d8 cd       	rjmp	.-1104   	; 0x2bce <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x124>
    301e:	10 92 bc 28 	sts	0x28BC, r1	; 0x8028bc <DOT1_0>
    3022:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
DISPLAY_DIGIT2():
    3026:	8a e0       	ldi	r24, 0x0A	; 10
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    302e:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    3032:	8d e0       	ldi	r24, 0x0D	; 13
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    303a:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    303e:	8a e1       	ldi	r24, 0x1A	; 26
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <digits2+0x4>
    3046:	90 93 03 29 	sts	0x2903, r25	; 0x802903 <digits2+0x5>
    304a:	81 e0       	ldi	r24, 0x01	; 1
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    3052:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    3056:	80 91 ba 28 	lds	r24, 0x28BA	; 0x8028ba <i>
    305a:	90 91 bb 28 	lds	r25, 0x28BB	; 0x8028bb <i+0x1>
    305e:	49 97       	sbiw	r24, 0x19	; 25
    3060:	3c f5       	brge	.+78     	; 0x30b0 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x606>
    3062:	80 91 b9 28 	lds	r24, 0x28B9	; 0x8028b9 <BLINK_STATS>
    3066:	81 11       	cpse	r24, r1
    3068:	1c c0       	rjmp	.+56     	; 0x30a2 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x5f8>
    306a:	88 e1       	ldi	r24, 0x18	; 24
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <digits1>
    3072:	90 93 f7 28 	sts	0x28F7, r25	; 0x8028f7 <digits1+0x1>
    3076:	80 93 f8 28 	sts	0x28F8, r24	; 0x8028f8 <digits1+0x2>
    307a:	90 93 f9 28 	sts	0x28F9, r25	; 0x8028f9 <digits1+0x3>
    307e:	3d ce       	rjmp	.-902    	; 0x2cfa <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x250>
    3080:	80 91 ba 28 	lds	r24, 0x28BA	; 0x8028ba <i>
    3084:	90 91 bb 28 	lds	r25, 0x28BB	; 0x8028bb <i+0x1>
    3088:	20 91 4f 29 	lds	r18, 0x294F	; 0x80294f <DEGREE_VALUE_SET>
    308c:	21 11       	cpse	r18, r1
    308e:	2d c0       	rjmp	.+90     	; 0x30ea <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x640>
    3090:	49 97       	sbiw	r24, 0x19	; 25
    3092:	74 f4       	brge	.+28     	; 0x30b0 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x606>
    3094:	80 91 b9 28 	lds	r24, 0x28B9	; 0x8028b9 <BLINK_STATS>
    3098:	81 11       	cpse	r24, r1
    309a:	03 c0       	rjmp	.+6      	; 0x30a2 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x5f8>
    309c:	88 e1       	ldi	r24, 0x18	; 24
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	cc ce       	rjmp	.-616    	; 0x2e3a <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x390>
    30a2:	89 e1       	ldi	r24, 0x19	; 25
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	80 93 ba 28 	sts	0x28BA, r24	; 0x8028ba <i>
    30aa:	90 93 bb 28 	sts	0x28BB, r25	; 0x8028bb <i+0x1>
    30ae:	25 ce       	rjmp	.-950    	; 0x2cfa <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x250>
    30b0:	80 91 2b 29 	lds	r24, 0x292B	; 0x80292b <SET_LONG_VALUE+0xe>
    30b4:	90 91 2c 29 	lds	r25, 0x292C	; 0x80292c <SET_LONG_VALUE+0xf>
    30b8:	24 e6       	ldi	r18, 0x64	; 100
    30ba:	28 9f       	mul	r18, r24
    30bc:	b0 01       	movw	r22, r0
    30be:	29 9f       	mul	r18, r25
    30c0:	70 0d       	add	r23, r0
    30c2:	11 24       	eor	r1, r1
    30c4:	20 91 2d 29 	lds	r18, 0x292D	; 0x80292d <SET_LONG_VALUE+0x10>
    30c8:	30 91 2e 29 	lds	r19, 0x292E	; 0x80292e <SET_LONG_VALUE+0x11>
    30cc:	4a e0       	ldi	r20, 0x0A	; 10
    30ce:	42 9f       	mul	r20, r18
    30d0:	c0 01       	movw	r24, r0
    30d2:	43 9f       	mul	r20, r19
    30d4:	90 0d       	add	r25, r0
    30d6:	11 24       	eor	r1, r1
    30d8:	68 0f       	add	r22, r24
    30da:	79 1f       	adc	r23, r25
    30dc:	07 2e       	mov	r0, r23
    30de:	00 0c       	add	r0, r0
    30e0:	88 0b       	sbc	r24, r24
    30e2:	99 0b       	sbc	r25, r25
    30e4:	0e 94 a0 03 	call	0x740	; 0x740 <Eclass::BREAK_NUMBER1(long) [clone .constprop.46]>
    30e8:	08 ce       	rjmp	.-1008   	; 0x2cfa <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x250>
    30ea:	49 97       	sbiw	r24, 0x19	; 25
    30ec:	e4 f4       	brge	.+56     	; 0x3126 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x67c>
    30ee:	80 91 b9 28 	lds	r24, 0x28B9	; 0x8028b9 <BLINK_STATS>
    30f2:	81 11       	cpse	r24, r1
    30f4:	11 c0       	rjmp	.+34     	; 0x3118 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x66e>
DISPLAY_DIGIT1():
    30f6:	88 e1       	ldi	r24, 0x18	; 24
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <digits1>
    30fe:	90 93 f7 28 	sts	0x28F7, r25	; 0x8028f7 <digits1+0x1>
    3102:	80 93 f8 28 	sts	0x28F8, r24	; 0x8028f8 <digits1+0x2>
    3106:	90 93 f9 28 	sts	0x28F9, r25	; 0x8028f9 <digits1+0x3>
    310a:	80 93 fa 28 	sts	0x28FA, r24	; 0x8028fa <digits1+0x4>
    310e:	90 93 fb 28 	sts	0x28FB, r25	; 0x8028fb <digits1+0x5>
SET_LONG_PRESS_FUNCTION():
    3112:	85 e1       	ldi	r24, 0x15	; 21
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	7e ce       	rjmp	.-772    	; 0x2e14 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x36a>
    3118:	89 e1       	ldi	r24, 0x19	; 25
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	80 93 ba 28 	sts	0x28BA, r24	; 0x8028ba <i>
    3120:	90 93 bb 28 	sts	0x28BB, r25	; 0x8028bb <i+0x1>
    3124:	f6 cf       	rjmp	.-20     	; 0x3112 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x668>
    3126:	80 91 47 29 	lds	r24, 0x2947	; 0x802947 <SET_LONG_VALUE+0x2a>
    312a:	90 91 48 29 	lds	r25, 0x2948	; 0x802948 <SET_LONG_VALUE+0x2b>
    312e:	0c ce       	rjmp	.-1000   	; 0x2d48 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x29e>
    3130:	11 e0       	ldi	r17, 0x01	; 1
    3132:	10 93 bc 28 	sts	0x28BC, r17	; 0x8028bc <DOT1_0>
    3136:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    313a:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
    313e:	10 93 b8 28 	sts	0x28B8, r17	; 0x8028b8 <CAL2_START>
DISPLAY_DIGIT2():
    3142:	8a e0       	ldi	r24, 0x0A	; 10
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    314a:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    314e:	8d e0       	ldi	r24, 0x0D	; 13
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    3156:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    315a:	8a e1       	ldi	r24, 0x1A	; 26
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <digits2+0x4>
    3162:	90 93 03 29 	sts	0x2903, r25	; 0x802903 <digits2+0x5>
    3166:	82 e0       	ldi	r24, 0x02	; 2
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    316e:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    3172:	80 91 ba 28 	lds	r24, 0x28BA	; 0x8028ba <i>
    3176:	90 91 bb 28 	lds	r25, 0x28BB	; 0x8028bb <i+0x1>
    317a:	49 97       	sbiw	r24, 0x19	; 25
    317c:	c4 f4       	brge	.+48     	; 0x31ae <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x704>
    317e:	80 91 b9 28 	lds	r24, 0x28B9	; 0x8028b9 <BLINK_STATS>
    3182:	81 11       	cpse	r24, r1
    3184:	0d c0       	rjmp	.+26     	; 0x31a0 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x6f6>
DISPLAY_DIGIT1():
    3186:	88 e1       	ldi	r24, 0x18	; 24
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	80 93 f8 28 	sts	0x28F8, r24	; 0x8028f8 <digits1+0x2>
    318e:	90 93 f9 28 	sts	0x28F9, r25	; 0x8028f9 <digits1+0x3>
    3192:	80 93 fa 28 	sts	0x28FA, r24	; 0x8028fa <digits1+0x4>
    3196:	90 93 fb 28 	sts	0x28FB, r25	; 0x8028fb <digits1+0x5>
SET_LONG_PRESS_FUNCTION():
    319a:	8a e1       	ldi	r24, 0x1A	; 26
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	cb cd       	rjmp	.-1130   	; 0x2d36 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x28c>
    31a0:	89 e1       	ldi	r24, 0x19	; 25
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	80 93 ba 28 	sts	0x28BA, r24	; 0x8028ba <i>
    31a8:	90 93 bb 28 	sts	0x28BB, r25	; 0x8028bb <i+0x1>
    31ac:	f6 cf       	rjmp	.-20     	; 0x319a <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x6f0>
    31ae:	80 91 2f 29 	lds	r24, 0x292F	; 0x80292f <SET_LONG_VALUE+0x12>
    31b2:	90 91 30 29 	lds	r25, 0x2930	; 0x802930 <SET_LONG_VALUE+0x13>
    31b6:	2a e0       	ldi	r18, 0x0A	; 10
    31b8:	28 9f       	mul	r18, r24
    31ba:	b0 01       	movw	r22, r0
    31bc:	29 9f       	mul	r18, r25
    31be:	70 0d       	add	r23, r0
    31c0:	11 24       	eor	r1, r1
    31c2:	07 2e       	mov	r0, r23
    31c4:	00 0c       	add	r0, r0
    31c6:	88 0b       	sbc	r24, r24
    31c8:	99 0b       	sbc	r25, r25
    31ca:	0e 94 a0 03 	call	0x740	; 0x740 <Eclass::BREAK_NUMBER1(long) [clone .constprop.46]>
    31ce:	e5 cf       	rjmp	.-54     	; 0x319a <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x6f0>
    31d0:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
DISPLAY_DIGIT2():
    31d4:	8a e0       	ldi	r24, 0x0A	; 10
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    31dc:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    31e0:	8d e0       	ldi	r24, 0x0D	; 13
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    31e8:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    31ec:	8a e1       	ldi	r24, 0x1A	; 26
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <digits2+0x4>
    31f4:	90 93 03 29 	sts	0x2903, r25	; 0x802903 <digits2+0x5>
    31f8:	82 e0       	ldi	r24, 0x02	; 2
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    3200:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    3204:	80 91 ba 28 	lds	r24, 0x28BA	; 0x8028ba <i>
    3208:	90 91 bb 28 	lds	r25, 0x28BB	; 0x8028bb <i+0x1>
    320c:	49 97       	sbiw	r24, 0x19	; 25
    320e:	c4 f4       	brge	.+48     	; 0x3240 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x796>
    3210:	80 91 b9 28 	lds	r24, 0x28B9	; 0x8028b9 <BLINK_STATS>
    3214:	81 11       	cpse	r24, r1
    3216:	0d c0       	rjmp	.+26     	; 0x3232 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x788>
DISPLAY_DIGIT1():
    3218:	88 e1       	ldi	r24, 0x18	; 24
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	80 93 f8 28 	sts	0x28F8, r24	; 0x8028f8 <digits1+0x2>
    3220:	90 93 f9 28 	sts	0x28F9, r25	; 0x8028f9 <digits1+0x3>
    3224:	80 93 fa 28 	sts	0x28FA, r24	; 0x8028fa <digits1+0x4>
    3228:	90 93 fb 28 	sts	0x28FB, r25	; 0x8028fb <digits1+0x5>
SET_LONG_PRESS_FUNCTION():
    322c:	8e e1       	ldi	r24, 0x1E	; 30
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	82 cd       	rjmp	.-1276   	; 0x2d36 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x28c>
    3232:	89 e1       	ldi	r24, 0x19	; 25
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	80 93 ba 28 	sts	0x28BA, r24	; 0x8028ba <i>
    323a:	90 93 bb 28 	sts	0x28BB, r25	; 0x8028bb <i+0x1>
    323e:	f6 cf       	rjmp	.-20     	; 0x322c <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x782>
    3240:	80 91 31 29 	lds	r24, 0x2931	; 0x802931 <SET_LONG_VALUE+0x14>
    3244:	90 91 32 29 	lds	r25, 0x2932	; 0x802932 <SET_LONG_VALUE+0x15>
    3248:	2a e0       	ldi	r18, 0x0A	; 10
    324a:	28 9f       	mul	r18, r24
    324c:	b0 01       	movw	r22, r0
    324e:	29 9f       	mul	r18, r25
    3250:	70 0d       	add	r23, r0
    3252:	11 24       	eor	r1, r1
    3254:	07 2e       	mov	r0, r23
    3256:	00 0c       	add	r0, r0
    3258:	88 0b       	sbc	r24, r24
    325a:	99 0b       	sbc	r25, r25
    325c:	0e 94 a0 03 	call	0x740	; 0x740 <Eclass::BREAK_NUMBER1(long) [clone .constprop.46]>
    3260:	e5 cf       	rjmp	.-54     	; 0x322c <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x782>
    3262:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
    3266:	81 e0       	ldi	r24, 0x01	; 1
    3268:	80 93 be 28 	sts	0x28BE, r24	; 0x8028be <DOT1_1>
    326c:	60 91 07 28 	lds	r22, 0x2807	; 0x802807 <LOW_CAL_VALUE_SET>
    3270:	70 91 08 28 	lds	r23, 0x2808	; 0x802808 <LOW_CAL_VALUE_SET+0x1>
    3274:	07 2e       	mov	r0, r23
    3276:	00 0c       	add	r0, r0
    3278:	88 0b       	sbc	r24, r24
    327a:	99 0b       	sbc	r25, r25
    327c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Eclass::BREAK_NUMBER2(long) [clone .constprop.47]>
    3280:	8a e1       	ldi	r24, 0x1A	; 26
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    3288:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    328c:	87 e1       	ldi	r24, 0x17	; 23
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    3294:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    3298:	80 91 ba 28 	lds	r24, 0x28BA	; 0x8028ba <i>
    329c:	90 91 bb 28 	lds	r25, 0x28BB	; 0x8028bb <i+0x1>
    32a0:	49 97       	sbiw	r24, 0x19	; 25
    32a2:	7c f4       	brge	.+30     	; 0x32c2 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x818>
    32a4:	80 91 b9 28 	lds	r24, 0x28B9	; 0x8028b9 <BLINK_STATS>
    32a8:	81 11       	cpse	r24, r1
    32aa:	f2 cd       	rjmp	.-1052   	; 0x2e90 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x3e6>
    32ac:	88 e1       	ldi	r24, 0x18	; 24
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <digits1>
    32b4:	90 93 f7 28 	sts	0x28F7, r25	; 0x8028f7 <digits1+0x1>
    32b8:	80 93 f8 28 	sts	0x28F8, r24	; 0x8028f8 <digits1+0x2>
    32bc:	90 93 f9 28 	sts	0x28F9, r25	; 0x8028f9 <digits1+0x3>
    32c0:	8e cd       	rjmp	.-1252   	; 0x2dde <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x334>
    32c2:	80 91 33 29 	lds	r24, 0x2933	; 0x802933 <SET_LONG_VALUE+0x16>
    32c6:	90 91 34 29 	lds	r25, 0x2934	; 0x802934 <SET_LONG_VALUE+0x17>
    32ca:	24 e6       	ldi	r18, 0x64	; 100
    32cc:	28 9f       	mul	r18, r24
    32ce:	b0 01       	movw	r22, r0
    32d0:	29 9f       	mul	r18, r25
    32d2:	70 0d       	add	r23, r0
    32d4:	11 24       	eor	r1, r1
    32d6:	20 91 35 29 	lds	r18, 0x2935	; 0x802935 <SET_LONG_VALUE+0x18>
    32da:	30 91 36 29 	lds	r19, 0x2936	; 0x802936 <SET_LONG_VALUE+0x19>
    32de:	f6 ce       	rjmp	.-532    	; 0x30cc <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x622>
    32e0:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
    32e4:	60 91 07 28 	lds	r22, 0x2807	; 0x802807 <LOW_CAL_VALUE_SET>
    32e8:	70 91 08 28 	lds	r23, 0x2808	; 0x802808 <LOW_CAL_VALUE_SET+0x1>
    32ec:	07 2e       	mov	r0, r23
    32ee:	00 0c       	add	r0, r0
    32f0:	88 0b       	sbc	r24, r24
    32f2:	99 0b       	sbc	r25, r25
    32f4:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Eclass::BREAK_NUMBER2(long) [clone .constprop.47]>
    32f8:	8a e1       	ldi	r24, 0x1A	; 26
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    3300:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    3304:	87 e1       	ldi	r24, 0x17	; 23
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    330c:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    3310:	00 91 33 29 	lds	r16, 0x2933	; 0x802933 <SET_LONG_VALUE+0x16>
    3314:	10 91 34 29 	lds	r17, 0x2934	; 0x802934 <SET_LONG_VALUE+0x17>
    3318:	e0 90 35 29 	lds	r14, 0x2935	; 0x802935 <SET_LONG_VALUE+0x18>
    331c:	f0 90 36 29 	lds	r15, 0x2936	; 0x802936 <SET_LONG_VALUE+0x19>
    3320:	80 91 ba 28 	lds	r24, 0x28BA	; 0x8028ba <i>
    3324:	90 91 bb 28 	lds	r25, 0x28BB	; 0x8028bb <i+0x1>
    3328:	49 97       	sbiw	r24, 0x19	; 25
    332a:	0c f0       	brlt	.+2      	; 0x332e <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x884>
    332c:	44 c0       	rjmp	.+136    	; 0x33b6 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x90c>
    332e:	80 91 b9 28 	lds	r24, 0x28B9	; 0x8028b9 <BLINK_STATS>
    3332:	81 11       	cpse	r24, r1
    3334:	39 c0       	rjmp	.+114    	; 0x33a8 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x8fe>
    3336:	88 e1       	ldi	r24, 0x18	; 24
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	80 93 fa 28 	sts	0x28FA, r24	; 0x8028fa <digits1+0x4>
    333e:	90 93 fb 28 	sts	0x28FB, r25	; 0x8028fb <digits1+0x5>
    3342:	8a e0       	ldi	r24, 0x0A	; 10
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	80 93 fc 28 	sts	0x28FC, r24	; 0x8028fc <digits1+0x6>
    334a:	90 93 fd 28 	sts	0x28FD, r25	; 0x8028fd <digits1+0x7>
    334e:	80 91 ba 28 	lds	r24, 0x28BA	; 0x8028ba <i>
    3352:	90 91 bb 28 	lds	r25, 0x28BB	; 0x8028bb <i+0x1>
    3356:	c3 97       	sbiw	r24, 0x33	; 51
    3358:	24 f0       	brlt	.+8      	; 0x3362 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x8b8>
    335a:	10 92 ba 28 	sts	0x28BA, r1	; 0x8028ba <i>
    335e:	10 92 bb 28 	sts	0x28BB, r1	; 0x8028bb <i+0x1>
    3362:	b7 01       	movw	r22, r14
    3364:	ff 0c       	add	r15, r15
    3366:	88 0b       	sbc	r24, r24
    3368:	99 0b       	sbc	r25, r25
    336a:	0e 94 04 39 	call	0x7208	; 0x7208 <__floatsisf>
    336e:	20 e0       	ldi	r18, 0x00	; 0
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	40 e2       	ldi	r20, 0x20	; 32
    3374:	51 e4       	ldi	r21, 0x41	; 65
    3376:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__divsf3>
    337a:	6b 01       	movw	r12, r22
    337c:	7c 01       	movw	r14, r24
    337e:	b8 01       	movw	r22, r16
    3380:	11 0f       	add	r17, r17
    3382:	88 0b       	sbc	r24, r24
    3384:	99 0b       	sbc	r25, r25
    3386:	0e 94 04 39 	call	0x7208	; 0x7208 <__floatsisf>
    338a:	9b 01       	movw	r18, r22
    338c:	ac 01       	movw	r20, r24
    338e:	c7 01       	movw	r24, r14
    3390:	b6 01       	movw	r22, r12
    3392:	0e 94 01 38 	call	0x7002	; 0x7002 <__addsf3>
    3396:	60 93 b4 28 	sts	0x28B4, r22	; 0x8028b4 <CAL2_CALCULATED_LOW_CAL_VALUE>
    339a:	70 93 b5 28 	sts	0x28B5, r23	; 0x8028b5 <CAL2_CALCULATED_LOW_CAL_VALUE+0x1>
    339e:	80 93 b6 28 	sts	0x28B6, r24	; 0x8028b6 <CAL2_CALCULATED_LOW_CAL_VALUE+0x2>
    33a2:	90 93 b7 28 	sts	0x28B7, r25	; 0x8028b7 <CAL2_CALCULATED_LOW_CAL_VALUE+0x3>
    33a6:	13 cc       	rjmp	.-2010   	; 0x2bce <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x124>
    33a8:	89 e1       	ldi	r24, 0x19	; 25
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	80 93 ba 28 	sts	0x28BA, r24	; 0x8028ba <i>
    33b0:	90 93 bb 28 	sts	0x28BB, r25	; 0x8028bb <i+0x1>
    33b4:	c6 cf       	rjmp	.-116    	; 0x3342 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x898>
    33b6:	84 e6       	ldi	r24, 0x64	; 100
    33b8:	80 9f       	mul	r24, r16
    33ba:	b0 01       	movw	r22, r0
    33bc:	81 9f       	mul	r24, r17
    33be:	70 0d       	add	r23, r0
    33c0:	11 24       	eor	r1, r1
    33c2:	2a e0       	ldi	r18, 0x0A	; 10
    33c4:	2e 9d       	mul	r18, r14
    33c6:	c0 01       	movw	r24, r0
    33c8:	2f 9d       	mul	r18, r15
    33ca:	90 0d       	add	r25, r0
    33cc:	11 24       	eor	r1, r1
    33ce:	68 0f       	add	r22, r24
    33d0:	79 1f       	adc	r23, r25
    33d2:	07 2e       	mov	r0, r23
    33d4:	00 0c       	add	r0, r0
    33d6:	88 0b       	sbc	r24, r24
    33d8:	99 0b       	sbc	r25, r25
    33da:	0e 94 a0 03 	call	0x740	; 0x740 <Eclass::BREAK_NUMBER1(long) [clone .constprop.46]>
    33de:	b1 cf       	rjmp	.-158    	; 0x3342 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x898>
    33e0:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
    33e4:	60 91 b2 28 	lds	r22, 0x28B2	; 0x8028b2 <HIGH_CAL_VALUE_SET>
    33e8:	70 91 b3 28 	lds	r23, 0x28B3	; 0x8028b3 <HIGH_CAL_VALUE_SET+0x1>
    33ec:	07 2e       	mov	r0, r23
    33ee:	00 0c       	add	r0, r0
    33f0:	88 0b       	sbc	r24, r24
    33f2:	99 0b       	sbc	r25, r25
    33f4:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Eclass::BREAK_NUMBER2(long) [clone .constprop.47]>
    33f8:	8e e1       	ldi	r24, 0x1E	; 30
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    3400:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    3404:	89 e1       	ldi	r24, 0x19	; 25
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    340c:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    3410:	21 e0       	ldi	r18, 0x01	; 1
    3412:	20 93 be 28 	sts	0x28BE, r18	; 0x8028be <DOT1_1>
    3416:	20 91 ba 28 	lds	r18, 0x28BA	; 0x8028ba <i>
    341a:	30 91 bb 28 	lds	r19, 0x28BB	; 0x8028bb <i+0x1>
    341e:	29 31       	cpi	r18, 0x19	; 25
    3420:	31 05       	cpc	r19, r1
    3422:	2c f4       	brge	.+10     	; 0x342e <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x984>
    3424:	20 91 b9 28 	lds	r18, 0x28B9	; 0x8028b9 <BLINK_STATS>
    3428:	21 11       	cpse	r18, r1
    342a:	3d ce       	rjmp	.-902    	; 0x30a6 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x5fc>
    342c:	1e ce       	rjmp	.-964    	; 0x306a <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x5c0>
    342e:	80 91 37 29 	lds	r24, 0x2937	; 0x802937 <SET_LONG_VALUE+0x1a>
    3432:	90 91 38 29 	lds	r25, 0x2938	; 0x802938 <SET_LONG_VALUE+0x1b>
    3436:	24 e6       	ldi	r18, 0x64	; 100
    3438:	28 9f       	mul	r18, r24
    343a:	b0 01       	movw	r22, r0
    343c:	29 9f       	mul	r18, r25
    343e:	70 0d       	add	r23, r0
    3440:	11 24       	eor	r1, r1
    3442:	20 91 39 29 	lds	r18, 0x2939	; 0x802939 <SET_LONG_VALUE+0x1c>
    3446:	30 91 3a 29 	lds	r19, 0x293A	; 0x80293a <SET_LONG_VALUE+0x1d>
    344a:	40 ce       	rjmp	.-896    	; 0x30cc <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x622>
    344c:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
    3450:	60 91 b2 28 	lds	r22, 0x28B2	; 0x8028b2 <HIGH_CAL_VALUE_SET>
    3454:	70 91 b3 28 	lds	r23, 0x28B3	; 0x8028b3 <HIGH_CAL_VALUE_SET+0x1>
    3458:	07 2e       	mov	r0, r23
    345a:	00 0c       	add	r0, r0
    345c:	88 0b       	sbc	r24, r24
    345e:	99 0b       	sbc	r25, r25
    3460:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Eclass::BREAK_NUMBER2(long) [clone .constprop.47]>
    3464:	8e e1       	ldi	r24, 0x1E	; 30
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    346c:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    3470:	89 e1       	ldi	r24, 0x19	; 25
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    3478:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    347c:	21 e0       	ldi	r18, 0x01	; 1
    347e:	20 93 be 28 	sts	0x28BE, r18	; 0x8028be <DOT1_1>
    3482:	00 91 37 29 	lds	r16, 0x2937	; 0x802937 <SET_LONG_VALUE+0x1a>
    3486:	10 91 38 29 	lds	r17, 0x2938	; 0x802938 <SET_LONG_VALUE+0x1b>
    348a:	e0 90 39 29 	lds	r14, 0x2939	; 0x802939 <SET_LONG_VALUE+0x1c>
    348e:	f0 90 3a 29 	lds	r15, 0x293A	; 0x80293a <SET_LONG_VALUE+0x1d>
    3492:	20 91 ba 28 	lds	r18, 0x28BA	; 0x8028ba <i>
    3496:	30 91 bb 28 	lds	r19, 0x28BB	; 0x8028bb <i+0x1>
    349a:	29 31       	cpi	r18, 0x19	; 25
    349c:	31 05       	cpc	r19, r1
    349e:	0c f0       	brlt	.+2      	; 0x34a2 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x9f8>
    34a0:	42 c0       	rjmp	.+132    	; 0x3526 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xa7c>
    34a2:	20 91 b9 28 	lds	r18, 0x28B9	; 0x8028b9 <BLINK_STATS>
    34a6:	21 11       	cpse	r18, r1
    34a8:	39 c0       	rjmp	.+114    	; 0x351c <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xa72>
    34aa:	88 e1       	ldi	r24, 0x18	; 24
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	80 93 fa 28 	sts	0x28FA, r24	; 0x8028fa <digits1+0x4>
    34b2:	90 93 fb 28 	sts	0x28FB, r25	; 0x8028fb <digits1+0x5>
    34b6:	8a e0       	ldi	r24, 0x0A	; 10
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	80 93 fc 28 	sts	0x28FC, r24	; 0x8028fc <digits1+0x6>
    34be:	90 93 fd 28 	sts	0x28FD, r25	; 0x8028fd <digits1+0x7>
    34c2:	80 91 ba 28 	lds	r24, 0x28BA	; 0x8028ba <i>
    34c6:	90 91 bb 28 	lds	r25, 0x28BB	; 0x8028bb <i+0x1>
    34ca:	c3 97       	sbiw	r24, 0x33	; 51
    34cc:	24 f0       	brlt	.+8      	; 0x34d6 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xa2c>
    34ce:	10 92 ba 28 	sts	0x28BA, r1	; 0x8028ba <i>
    34d2:	10 92 bb 28 	sts	0x28BB, r1	; 0x8028bb <i+0x1>
    34d6:	b7 01       	movw	r22, r14
    34d8:	ff 0c       	add	r15, r15
    34da:	88 0b       	sbc	r24, r24
    34dc:	99 0b       	sbc	r25, r25
    34de:	0e 94 04 39 	call	0x7208	; 0x7208 <__floatsisf>
    34e2:	20 e0       	ldi	r18, 0x00	; 0
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	40 e2       	ldi	r20, 0x20	; 32
    34e8:	51 e4       	ldi	r21, 0x41	; 65
    34ea:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__divsf3>
    34ee:	6b 01       	movw	r12, r22
    34f0:	7c 01       	movw	r14, r24
    34f2:	b8 01       	movw	r22, r16
    34f4:	11 0f       	add	r17, r17
    34f6:	88 0b       	sbc	r24, r24
    34f8:	99 0b       	sbc	r25, r25
    34fa:	0e 94 04 39 	call	0x7208	; 0x7208 <__floatsisf>
    34fe:	9b 01       	movw	r18, r22
    3500:	ac 01       	movw	r20, r24
    3502:	c7 01       	movw	r24, r14
    3504:	b6 01       	movw	r22, r12
    3506:	0e 94 01 38 	call	0x7002	; 0x7002 <__addsf3>
    350a:	60 93 ae 28 	sts	0x28AE, r22	; 0x8028ae <CAL2_CALCULATED_HIGH_CAL_VALUE>
    350e:	70 93 af 28 	sts	0x28AF, r23	; 0x8028af <CAL2_CALCULATED_HIGH_CAL_VALUE+0x1>
    3512:	80 93 b0 28 	sts	0x28B0, r24	; 0x8028b0 <CAL2_CALCULATED_HIGH_CAL_VALUE+0x2>
    3516:	90 93 b1 28 	sts	0x28B1, r25	; 0x8028b1 <CAL2_CALCULATED_HIGH_CAL_VALUE+0x3>
    351a:	59 cb       	rjmp	.-2382   	; 0x2bce <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x124>
    351c:	80 93 ba 28 	sts	0x28BA, r24	; 0x8028ba <i>
    3520:	90 93 bb 28 	sts	0x28BB, r25	; 0x8028bb <i+0x1>
    3524:	c8 cf       	rjmp	.-112    	; 0x34b6 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xa0c>
    3526:	84 e6       	ldi	r24, 0x64	; 100
    3528:	80 9f       	mul	r24, r16
    352a:	b0 01       	movw	r22, r0
    352c:	81 9f       	mul	r24, r17
    352e:	70 0d       	add	r23, r0
    3530:	11 24       	eor	r1, r1
    3532:	2a e0       	ldi	r18, 0x0A	; 10
    3534:	2e 9d       	mul	r18, r14
    3536:	c0 01       	movw	r24, r0
    3538:	2f 9d       	mul	r18, r15
    353a:	90 0d       	add	r25, r0
    353c:	11 24       	eor	r1, r1
    353e:	68 0f       	add	r22, r24
    3540:	79 1f       	adc	r23, r25
    3542:	07 2e       	mov	r0, r23
    3544:	00 0c       	add	r0, r0
    3546:	88 0b       	sbc	r24, r24
    3548:	99 0b       	sbc	r25, r25
    354a:	0e 94 a0 03 	call	0x740	; 0x740 <Eclass::BREAK_NUMBER1(long) [clone .constprop.46]>
    354e:	b3 cf       	rjmp	.-154    	; 0x34b6 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xa0c>
    3550:	10 92 ad 28 	sts	0x28AD, r1	; 0x8028ad <Service_Menu>
    3554:	10 92 50 29 	sts	0x2950, r1	; 0x802950 <LONG_PRESS>
    3558:	3a cb       	rjmp	.-2444   	; 0x2bce <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x124>
    355a:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    355e:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <DOT2_1>
    3562:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
DISPLAY_DIGIT2():
    3566:	8e e1       	ldi	r24, 0x1E	; 30
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    356e:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    3572:	8f e0       	ldi	r24, 0x0F	; 15
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    357a:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    357e:	2d e0       	ldi	r18, 0x0D	; 13
    3580:	30 e0       	ldi	r19, 0x00	; 0
    3582:	20 93 02 29 	sts	0x2902, r18	; 0x802902 <digits2+0x4>
    3586:	30 93 03 29 	sts	0x2903, r19	; 0x802903 <digits2+0x5>
    358a:	80 e1       	ldi	r24, 0x10	; 16
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    3592:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    3596:	40 91 ba 28 	lds	r20, 0x28BA	; 0x8028ba <i>
    359a:	50 91 bb 28 	lds	r21, 0x28BB	; 0x8028bb <i+0x1>
    359e:	49 31       	cpi	r20, 0x19	; 25
    35a0:	51 05       	cpc	r21, r1
    35a2:	0c f4       	brge	.+2      	; 0x35a6 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xafc>
    35a4:	70 cc       	rjmp	.-1824   	; 0x2e86 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x3dc>
    35a6:	40 91 3d 29 	lds	r20, 0x293D	; 0x80293d <SET_LONG_VALUE+0x20>
    35aa:	50 91 3e 29 	lds	r21, 0x293E	; 0x80293e <SET_LONG_VALUE+0x21>
    35ae:	45 2b       	or	r20, r21
    35b0:	a9 f4       	brne	.+42     	; 0x35dc <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xb32>
DISPLAY_DIGIT1():
    35b2:	8c e0       	ldi	r24, 0x0C	; 12
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <digits1>
    35ba:	90 93 f7 28 	sts	0x28F7, r25	; 0x8028f7 <digits1+0x1>
    35be:	8a e1       	ldi	r24, 0x1A	; 26
    35c0:	90 e0       	ldi	r25, 0x00	; 0
    35c2:	80 93 f8 28 	sts	0x28F8, r24	; 0x8028f8 <digits1+0x2>
    35c6:	90 93 f9 28 	sts	0x28F9, r25	; 0x8028f9 <digits1+0x3>
    35ca:	87 e1       	ldi	r24, 0x17	; 23
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	80 93 fa 28 	sts	0x28FA, r24	; 0x8028fa <digits1+0x4>
    35d2:	90 93 fb 28 	sts	0x28FB, r25	; 0x8028fb <digits1+0x5>
    35d6:	84 e2       	ldi	r24, 0x24	; 36
    35d8:	90 e0       	ldi	r25, 0x00	; 0
    35da:	1c cc       	rjmp	.-1992   	; 0x2e14 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x36a>
    35dc:	45 e1       	ldi	r20, 0x15	; 21
    35de:	50 e0       	ldi	r21, 0x00	; 0
    35e0:	40 93 f6 28 	sts	0x28F6, r20	; 0x8028f6 <digits1>
    35e4:	50 93 f7 28 	sts	0x28F7, r21	; 0x8028f7 <digits1+0x1>
    35e8:	20 93 f8 28 	sts	0x28F8, r18	; 0x8028f8 <digits1+0x2>
    35ec:	30 93 f9 28 	sts	0x28F9, r19	; 0x8028f9 <digits1+0x3>
    35f0:	2c e0       	ldi	r18, 0x0C	; 12
    35f2:	30 e0       	ldi	r19, 0x00	; 0
    35f4:	20 93 fa 28 	sts	0x28FA, r18	; 0x8028fa <digits1+0x4>
    35f8:	30 93 fb 28 	sts	0x28FB, r19	; 0x8028fb <digits1+0x5>
    35fc:	0b cc       	rjmp	.-2026   	; 0x2e14 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x36a>
SET_LONG_PRESS_FUNCTION():
    35fe:	10 92 bc 28 	sts	0x28BC, r1	; 0x8028bc <DOT1_0>
    3602:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    3606:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <DOT2_1>
    360a:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
    360e:	80 91 ab 28 	lds	r24, 0x28AB	; 0x8028ab <processLog>
    3612:	90 91 ac 28 	lds	r25, 0x28AC	; 0x8028ac <processLog+0x1>
    3616:	2a e0       	ldi	r18, 0x0A	; 10
    3618:	28 9f       	mul	r18, r24
    361a:	b0 01       	movw	r22, r0
    361c:	29 9f       	mul	r18, r25
    361e:	70 0d       	add	r23, r0
    3620:	11 24       	eor	r1, r1
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	80 e0       	ldi	r24, 0x00	; 0
    3626:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Eclass::BREAK_NUMBER2(long) [clone .constprop.47]>
    362a:	8e e1       	ldi	r24, 0x1E	; 30
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    3632:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
    3636:	60 91 a9 28 	lds	r22, 0x28A9	; 0x8028a9 <processLogNumberOfTimes>
    363a:	70 91 aa 28 	lds	r23, 0x28AA	; 0x8028aa <processLogNumberOfTimes+0x1>
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	80 e0       	ldi	r24, 0x00	; 0
    3642:	0e 94 a0 03 	call	0x740	; 0x740 <Eclass::BREAK_NUMBER1(long) [clone .constprop.46]>
    3646:	8d e0       	ldi	r24, 0x0D	; 13
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <digits1>
    364e:	90 93 f7 28 	sts	0x28F7, r25	; 0x8028f7 <digits1+0x1>
    3652:	10 92 a7 28 	sts	0x28A7, r1	; 0x8028a7 <currentMillis>
    3656:	10 92 a8 28 	sts	0x28A8, r1	; 0x8028a8 <currentMillis+0x1>
    365a:	b9 ca       	rjmp	.-2702   	; 0x2bce <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x124>
    365c:	10 92 bc 28 	sts	0x28BC, r1	; 0x8028bc <DOT1_0>
    3660:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    3664:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <DOT2_1>
    3668:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
DISPLAY_DIGIT2():
    366c:	8c e0       	ldi	r24, 0x0C	; 12
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    3674:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    3678:	2c e1       	ldi	r18, 0x1C	; 28
    367a:	30 e0       	ldi	r19, 0x00	; 0
    367c:	20 93 00 29 	sts	0x2900, r18	; 0x802900 <digits2+0x2>
    3680:	30 93 01 29 	sts	0x2901, r19	; 0x802901 <digits2+0x3>
    3684:	41 e1       	ldi	r20, 0x11	; 17
    3686:	50 e0       	ldi	r21, 0x00	; 0
    3688:	40 93 02 29 	sts	0x2902, r20	; 0x802902 <digits2+0x4>
    368c:	50 93 03 29 	sts	0x2903, r21	; 0x802903 <digits2+0x5>
    3690:	2f e0       	ldi	r18, 0x0F	; 15
    3692:	30 e0       	ldi	r19, 0x00	; 0
    3694:	20 93 04 29 	sts	0x2904, r18	; 0x802904 <digits2+0x6>
    3698:	30 93 05 29 	sts	0x2905, r19	; 0x802905 <digits2+0x7>
DISPLAY_DIGIT1():
    369c:	40 93 f6 28 	sts	0x28F6, r20	; 0x8028f6 <digits1>
    36a0:	50 93 f7 28 	sts	0x28F7, r21	; 0x8028f7 <digits1+0x1>
    36a4:	20 93 f8 28 	sts	0x28F8, r18	; 0x8028f8 <digits1+0x2>
    36a8:	30 93 f9 28 	sts	0x28F9, r19	; 0x8028f9 <digits1+0x3>
    36ac:	80 93 fa 28 	sts	0x28FA, r24	; 0x8028fa <digits1+0x4>
    36b0:	90 93 fb 28 	sts	0x28FB, r25	; 0x8028fb <digits1+0x5>
    36b4:	80 e1       	ldi	r24, 0x10	; 16
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	80 93 fc 28 	sts	0x28FC, r24	; 0x8028fc <digits1+0x6>
    36bc:	90 93 fd 28 	sts	0x28FD, r25	; 0x8028fd <digits1+0x7>
    36c0:	c8 cf       	rjmp	.-112    	; 0x3652 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xba8>
SET_LONG_PRESS_FUNCTION():
    36c2:	10 92 bc 28 	sts	0x28BC, r1	; 0x8028bc <DOT1_0>
    36c6:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    36ca:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <DOT2_1>
    36ce:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
    36d2:	80 91 a7 28 	lds	r24, 0x28A7	; 0x8028a7 <currentMillis>
    36d6:	90 91 a8 28 	lds	r25, 0x28A8	; 0x8028a8 <currentMillis+0x1>
    36da:	8f 31       	cpi	r24, 0x1F	; 31
    36dc:	91 05       	cpc	r25, r1
    36de:	b8 f4       	brcc	.+46     	; 0x370e <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xc64>
digitalWrite():
    36e0:	61 e0       	ldi	r22, 0x01	; 1
    36e2:	85 e1       	ldi	r24, 0x15	; 21
    36e4:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
DISPLAY_DIGIT2():
    36e8:	86 e1       	ldi	r24, 0x16	; 22
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    36f0:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    36f4:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    36f8:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    36fc:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <digits2+0x4>
    3700:	90 93 03 29 	sts	0x2903, r25	; 0x802903 <digits2+0x5>
    3704:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    3708:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
    370c:	33 ca       	rjmp	.-2970   	; 0x2b74 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xca>
SET_LONG_PRESS_FUNCTION():
    370e:	9c 01       	movw	r18, r24
    3710:	29 52       	subi	r18, 0x29	; 41
    3712:	31 09       	sbc	r19, r1
    3714:	22 38       	cpi	r18, 0x82	; 130
    3716:	31 05       	cpc	r19, r1
    3718:	78 f5       	brcc	.+94     	; 0x3778 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xcce>
digitalWrite():
    371a:	60 e0       	ldi	r22, 0x00	; 0
    371c:	85 e1       	ldi	r24, 0x15	; 21
    371e:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
DISPLAY_DIGIT2():
    3722:	81 e1       	ldi	r24, 0x11	; 17
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    372a:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    372e:	8f e0       	ldi	r24, 0x0F	; 15
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    3736:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    373a:	2c e0       	ldi	r18, 0x0C	; 12
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	20 93 02 29 	sts	0x2902, r18	; 0x802902 <digits2+0x4>
    3742:	30 93 03 29 	sts	0x2903, r19	; 0x802903 <digits2+0x5>
    3746:	20 e1       	ldi	r18, 0x10	; 16
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	20 93 04 29 	sts	0x2904, r18	; 0x802904 <digits2+0x6>
    374e:	30 93 05 29 	sts	0x2905, r19	; 0x802905 <digits2+0x7>
DISPLAY_DIGIT1():
    3752:	20 e2       	ldi	r18, 0x20	; 32
    3754:	30 e0       	ldi	r19, 0x00	; 0
    3756:	20 93 f6 28 	sts	0x28F6, r18	; 0x8028f6 <digits1>
    375a:	30 93 f7 28 	sts	0x28F7, r19	; 0x8028f7 <digits1+0x1>
    375e:	27 e1       	ldi	r18, 0x17	; 23
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	20 93 f8 28 	sts	0x28F8, r18	; 0x8028f8 <digits1+0x2>
    3766:	30 93 f9 28 	sts	0x28F9, r19	; 0x8028f9 <digits1+0x3>
    376a:	24 e1       	ldi	r18, 0x14	; 20
    376c:	30 e0       	ldi	r19, 0x00	; 0
    376e:	20 93 fa 28 	sts	0x28FA, r18	; 0x8028fa <digits1+0x4>
    3772:	30 93 fb 28 	sts	0x28FB, r19	; 0x8028fb <digits1+0x5>
    3776:	7b c1       	rjmp	.+758    	; 0x3a6e <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xfc4>
SET_LONG_PRESS_FUNCTION():
    3778:	8b 3a       	cpi	r24, 0xAB	; 171
    377a:	91 05       	cpc	r25, r1
    377c:	0c f4       	brge	.+2      	; 0x3780 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xcd6>
    377e:	27 ca       	rjmp	.-2994   	; 0x2bce <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x124>
EEPROM_CLEAR():
    3780:	10 92 a6 28 	sts	0x28A6, r1	; 0x8028a6 <STIR_VALUE_SET>
    3784:	10 92 4f 29 	sts	0x294F, r1	; 0x80294f <DEGREE_VALUE_SET>
    3788:	23 e6       	ldi	r18, 0x63	; 99
    378a:	30 e0       	ldi	r19, 0x00	; 0
    378c:	20 93 0e 29 	sts	0x290E, r18	; 0x80290e <SAFE_VALUE_SET_DEG>
    3790:	30 93 0f 29 	sts	0x290F, r19	; 0x80290f <SAFE_VALUE_SET_DEG+0x1>
    3794:	84 ed       	ldi	r24, 0xD4	; 212
    3796:	90 e0       	ldi	r25, 0x00	; 0
    3798:	80 93 0c 29 	sts	0x290C, r24	; 0x80290c <SAFE_VALUE_SET_FAH>
    379c:	90 93 0d 29 	sts	0x290D, r25	; 0x80290d <SAFE_VALUE_SET_FAH+0x1>
    37a0:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <CAL_SELECT_VALUE>
    37a4:	10 92 d5 28 	sts	0x28D5, r1	; 0x8028d5 <CAL_SELECT_VALUE+0x1>
    37a8:	10 92 06 29 	sts	0x2906, r1	; 0x802906 <ERROR_CAL1>
    37ac:	10 92 07 29 	sts	0x2907, r1	; 0x802907 <ERROR_CAL1+0x1>
    37b0:	10 92 08 29 	sts	0x2908, r1	; 0x802908 <ERROR_CAL1+0x2>
    37b4:	10 92 09 29 	sts	0x2909, r1	; 0x802909 <ERROR_CAL1+0x3>
    37b8:	10 92 e8 28 	sts	0x28E8, r1	; 0x8028e8 <SIGN>
    37bc:	41 e0       	ldi	r20, 0x01	; 1
    37be:	40 93 e3 28 	sts	0x28E3, r20	; 0x8028e3 <ERROR_SET_IN_DEG_FLAG>
    37c2:	10 92 de 28 	sts	0x28DE, r1	; 0x8028de <ERROR_SET_IN_FAH_FLAG>
    37c6:	4e e1       	ldi	r20, 0x1E	; 30
    37c8:	50 e0       	ldi	r21, 0x00	; 0
    37ca:	60 e0       	ldi	r22, 0x00	; 0
    37cc:	70 e0       	ldi	r23, 0x00	; 0
    37ce:	40 93 cc 28 	sts	0x28CC, r20	; 0x8028cc <CAL2_RAW_LOW_VALUE_CONV>
    37d2:	50 93 cd 28 	sts	0x28CD, r21	; 0x8028cd <CAL2_RAW_LOW_VALUE_CONV+0x1>
    37d6:	60 93 ce 28 	sts	0x28CE, r22	; 0x8028ce <CAL2_RAW_LOW_VALUE_CONV+0x2>
    37da:	70 93 cf 28 	sts	0x28CF, r23	; 0x8028cf <CAL2_RAW_LOW_VALUE_CONV+0x3>
    37de:	44 e5       	ldi	r20, 0x54	; 84
    37e0:	50 e0       	ldi	r21, 0x00	; 0
    37e2:	60 e0       	ldi	r22, 0x00	; 0
    37e4:	70 e0       	ldi	r23, 0x00	; 0
    37e6:	40 93 c8 28 	sts	0x28C8, r20	; 0x8028c8 <CAL2_RAW_HIGH_VALUE_CONV>
    37ea:	50 93 c9 28 	sts	0x28C9, r21	; 0x8028c9 <CAL2_RAW_HIGH_VALUE_CONV+0x1>
    37ee:	60 93 ca 28 	sts	0x28CA, r22	; 0x8028ca <CAL2_RAW_HIGH_VALUE_CONV+0x2>
    37f2:	70 93 cb 28 	sts	0x28CB, r23	; 0x8028cb <CAL2_RAW_HIGH_VALUE_CONV+0x3>
    37f6:	4c e1       	ldi	r20, 0x1C	; 28
    37f8:	50 e0       	ldi	r21, 0x00	; 0
    37fa:	60 e0       	ldi	r22, 0x00	; 0
    37fc:	70 e0       	ldi	r23, 0x00	; 0
    37fe:	40 93 c4 28 	sts	0x28C4, r20	; 0x8028c4 <MASTER_LOW_CONV>
    3802:	50 93 c5 28 	sts	0x28C5, r21	; 0x8028c5 <MASTER_LOW_CONV+0x1>
    3806:	60 93 c6 28 	sts	0x28C6, r22	; 0x8028c6 <MASTER_LOW_CONV+0x2>
    380a:	70 93 c7 28 	sts	0x28C7, r23	; 0x8028c7 <MASTER_LOW_CONV+0x3>
    380e:	42 e5       	ldi	r20, 0x52	; 82
    3810:	50 e0       	ldi	r21, 0x00	; 0
    3812:	60 e0       	ldi	r22, 0x00	; 0
    3814:	70 e0       	ldi	r23, 0x00	; 0
    3816:	40 93 c0 28 	sts	0x28C0, r20	; 0x8028c0 <MASTER_HIGH_CONV>
    381a:	50 93 c1 28 	sts	0x28C1, r21	; 0x8028c1 <MASTER_HIGH_CONV+0x1>
    381e:	60 93 c2 28 	sts	0x28C2, r22	; 0x8028c2 <MASTER_HIGH_CONV+0x2>
    3822:	70 93 c3 28 	sts	0x28C3, r23	; 0x8028c3 <MASTER_HIGH_CONV+0x3>
    3826:	10 92 a5 28 	sts	0x28A5, r1	; 0x8028a5 <TIME_SOCK_OR_TOTAL>
    382a:	10 92 a0 28 	sts	0x28A0, r1	; 0x8028a0 <Proceess_Resume_Enable_Flag>
    382e:	10 92 0a 29 	sts	0x290A, r1	; 0x80290a <select_product_type>
    3832:	10 92 ed 28 	sts	0x28ED, r1	; 0x8028ed <select_heating_type>
    3836:	10 92 1d 29 	sts	0x291D, r1	; 0x80291d <SET_LONG_VALUE>
    383a:	10 92 1e 29 	sts	0x291E, r1	; 0x80291e <SET_LONG_VALUE+0x1>
    383e:	10 92 1f 29 	sts	0x291F, r1	; 0x80291f <SET_LONG_VALUE+0x2>
    3842:	10 92 20 29 	sts	0x2920, r1	; 0x802920 <SET_LONG_VALUE+0x3>
    3846:	20 93 21 29 	sts	0x2921, r18	; 0x802921 <SET_LONG_VALUE+0x4>
    384a:	30 93 22 29 	sts	0x2922, r19	; 0x802922 <SET_LONG_VALUE+0x5>
    384e:	80 93 45 29 	sts	0x2945, r24	; 0x802945 <SET_LONG_VALUE+0x28>
    3852:	90 93 46 29 	sts	0x2946, r25	; 0x802946 <SET_LONG_VALUE+0x29>
    3856:	10 92 29 29 	sts	0x2929, r1	; 0x802929 <SET_LONG_VALUE+0xc>
    385a:	10 92 2a 29 	sts	0x292A, r1	; 0x80292a <SET_LONG_VALUE+0xd>
    385e:	10 92 23 29 	sts	0x2923, r1	; 0x802923 <SET_LONG_VALUE+0x6>
    3862:	10 92 24 29 	sts	0x2924, r1	; 0x802924 <SET_LONG_VALUE+0x7>
    3866:	10 92 25 29 	sts	0x2925, r1	; 0x802925 <SET_LONG_VALUE+0x8>
    386a:	10 92 26 29 	sts	0x2926, r1	; 0x802926 <SET_LONG_VALUE+0x9>
    386e:	10 92 3d 29 	sts	0x293D, r1	; 0x80293d <SET_LONG_VALUE+0x20>
    3872:	10 92 3e 29 	sts	0x293E, r1	; 0x80293e <SET_LONG_VALUE+0x21>
    3876:	10 92 27 29 	sts	0x2927, r1	; 0x802927 <SET_LONG_VALUE+0xa>
    387a:	10 92 28 29 	sts	0x2928, r1	; 0x802928 <SET_LONG_VALUE+0xb>
    387e:	10 92 9e 28 	sts	0x289E, r1	; 0x80289e <SET_HOUR>
    3882:	10 92 9f 28 	sts	0x289F, r1	; 0x80289f <SET_HOUR+0x1>
    3886:	10 92 9c 28 	sts	0x289C, r1	; 0x80289c <SET_MINUTE>
    388a:	10 92 9d 28 	sts	0x289D, r1	; 0x80289d <SET_MINUTE+0x1>
    388e:	85 e2       	ldi	r24, 0x25	; 37
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	80 93 12 29 	sts	0x2912, r24	; 0x802912 <SET_VALUE+0x2>
    3896:	90 93 13 29 	sts	0x2913, r25	; 0x802913 <SET_VALUE+0x3>
    389a:	10 92 14 29 	sts	0x2914, r1	; 0x802914 <SET_VALUE+0x4>
    389e:	10 92 15 29 	sts	0x2915, r1	; 0x802915 <SET_VALUE+0x5>
    38a2:	80 e2       	ldi	r24, 0x20	; 32
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	80 93 3c 29 	sts	0x293C, r24	; 0x80293c <SET_LONG_VALUE+0x1f>
    38aa:	90 93 3d 29 	sts	0x293D, r25	; 0x80293d <SET_LONG_VALUE+0x20>
    38ae:	10 92 16 29 	sts	0x2916, r1	; 0x802916 <SET_VALUE+0x6>
    38b2:	10 92 17 29 	sts	0x2917, r1	; 0x802917 <SET_VALUE+0x7>
    38b6:	10 92 18 29 	sts	0x2918, r1	; 0x802918 <SET_VALUE+0x8>
    38ba:	10 92 19 29 	sts	0x2919, r1	; 0x802919 <SET_VALUE+0x9>
    38be:	10 92 9b 28 	sts	0x289B, r1	; 0x80289b <Process_Interrupt_flag>
    38c2:	60 e0       	ldi	r22, 0x00	; 0
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	0e 94 03 11 	call	0x2206	; 0x2206 <EEPROMClass::write(int, unsigned char) [clone .isra.0]>
    38cc:	63 e6       	ldi	r22, 0x63	; 99
    38ce:	82 e0       	ldi	r24, 0x02	; 2
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	0e 94 03 11 	call	0x2206	; 0x2206 <EEPROMClass::write(int, unsigned char) [clone .isra.0]>
    38d6:	6c e0       	ldi	r22, 0x0C	; 12
    38d8:	79 e2       	ldi	r23, 0x29	; 41
    38da:	83 e0       	ldi	r24, 0x03	; 3
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	0e 94 3c 11 	call	0x2278	; 0x2278 <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.9] [clone .lto_priv.88]>
    38e2:	60 e0       	ldi	r22, 0x00	; 0
    38e4:	85 e0       	ldi	r24, 0x05	; 5
    38e6:	90 e0       	ldi	r25, 0x00	; 0
    38e8:	0e 94 03 11 	call	0x2206	; 0x2206 <EEPROMClass::write(int, unsigned char) [clone .isra.0]>
    38ec:	60 e0       	ldi	r22, 0x00	; 0
    38ee:	8f e0       	ldi	r24, 0x0F	; 15
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	0e 94 03 11 	call	0x2206	; 0x2206 <EEPROMClass::write(int, unsigned char) [clone .isra.0]>
    38f6:	0e 94 15 11 	call	0x222a	; 0x222a <double const& EEPROMClass::put<double>(int, double const&) [clone .isra.10] [clone .constprop.65]>
    38fa:	60 e0       	ldi	r22, 0x00	; 0
    38fc:	87 e0       	ldi	r24, 0x07	; 7
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	0e 94 03 11 	call	0x2206	; 0x2206 <EEPROMClass::write(int, unsigned char) [clone .isra.0]>
    3904:	61 e0       	ldi	r22, 0x01	; 1
    3906:	88 e0       	ldi	r24, 0x08	; 8
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	0e 94 03 11 	call	0x2206	; 0x2206 <EEPROMClass::write(int, unsigned char) [clone .isra.0]>
    390e:	60 e0       	ldi	r22, 0x00	; 0
    3910:	89 e0       	ldi	r24, 0x09	; 9
    3912:	90 e0       	ldi	r25, 0x00	; 0
    3914:	0e 94 03 11 	call	0x2206	; 0x2206 <EEPROMClass::write(int, unsigned char) [clone .isra.0]>
    3918:	6c ec       	ldi	r22, 0xCC	; 204
    391a:	78 e2       	ldi	r23, 0x28	; 40
    391c:	80 e5       	ldi	r24, 0x50	; 80
    391e:	90 e0       	ldi	r25, 0x00	; 0
    3920:	0e 94 61 11 	call	0x22c2	; 0x22c2 <long const& EEPROMClass::put<long>(int, long const&) [clone .isra.11] [clone .lto_priv.90]>
    3924:	68 ec       	ldi	r22, 0xC8	; 200
    3926:	78 e2       	ldi	r23, 0x28	; 40
    3928:	8a e5       	ldi	r24, 0x5A	; 90
    392a:	90 e0       	ldi	r25, 0x00	; 0
    392c:	0e 94 61 11 	call	0x22c2	; 0x22c2 <long const& EEPROMClass::put<long>(int, long const&) [clone .isra.11] [clone .lto_priv.90]>
    3930:	64 ec       	ldi	r22, 0xC4	; 196
    3932:	78 e2       	ldi	r23, 0x28	; 40
    3934:	84 e6       	ldi	r24, 0x64	; 100
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	0e 94 61 11 	call	0x22c2	; 0x22c2 <long const& EEPROMClass::put<long>(int, long const&) [clone .isra.11] [clone .lto_priv.90]>
    393c:	60 ec       	ldi	r22, 0xC0	; 192
    393e:	78 e2       	ldi	r23, 0x28	; 40
    3940:	8e e6       	ldi	r24, 0x6E	; 110
    3942:	90 e0       	ldi	r25, 0x00	; 0
    3944:	0e 94 61 11 	call	0x22c2	; 0x22c2 <long const& EEPROMClass::put<long>(int, long const&) [clone .isra.11] [clone .lto_priv.90]>
_ZN11EEPROMClass3putIbEERKT_iS3_.isra.12():
    3948:	81 e4       	ldi	r24, 0x41	; 65
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	89 83       	std	Y+1, r24	; 0x01
    394e:	9a 83       	std	Y+2, r25	; 0x02
    3950:	60 91 a5 28 	lds	r22, 0x28A5	; 0x8028a5 <TIME_SOCK_OR_TOTAL>
    3954:	ce 01       	movw	r24, r28
    3956:	01 96       	adiw	r24, 0x01	; 1
    3958:	0e 94 04 11 	call	0x2208	; 0x2208 <EERef::update(unsigned char)>
EEPROM_CLEAR():
    395c:	60 91 12 29 	lds	r22, 0x2912	; 0x802912 <SET_VALUE+0x2>
    3960:	83 e7       	ldi	r24, 0x73	; 115
    3962:	90 e0       	ldi	r25, 0x00	; 0
    3964:	0e 94 03 11 	call	0x2206	; 0x2206 <EEPROMClass::write(int, unsigned char) [clone .isra.0]>
    3968:	60 91 14 29 	lds	r22, 0x2914	; 0x802914 <SET_VALUE+0x4>
    396c:	85 e7       	ldi	r24, 0x75	; 117
    396e:	90 e0       	ldi	r25, 0x00	; 0
    3970:	0e 94 03 11 	call	0x2206	; 0x2206 <EEPROMClass::write(int, unsigned char) [clone .isra.0]>
    3974:	6c e3       	ldi	r22, 0x3C	; 60
    3976:	79 e2       	ldi	r23, 0x29	; 41
    3978:	88 e7       	ldi	r24, 0x78	; 120
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	0e 94 3c 11 	call	0x2278	; 0x2278 <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.9] [clone .lto_priv.88]>
    3980:	60 e0       	ldi	r22, 0x00	; 0
    3982:	8d e7       	ldi	r24, 0x7D	; 125
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	0e 94 03 11 	call	0x2206	; 0x2206 <EEPROMClass::write(int, unsigned char) [clone .isra.0]>
    398a:	60 e0       	ldi	r22, 0x00	; 0
    398c:	82 e8       	ldi	r24, 0x82	; 130
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	0e 94 03 11 	call	0x2206	; 0x2206 <EEPROMClass::write(int, unsigned char) [clone .isra.0]>
    3994:	60 e0       	ldi	r22, 0x00	; 0
    3996:	87 e8       	ldi	r24, 0x87	; 135
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	0e 94 03 11 	call	0x2206	; 0x2206 <EEPROMClass::write(int, unsigned char) [clone .isra.0]>
    399e:	60 e0       	ldi	r22, 0x00	; 0
    39a0:	86 e9       	ldi	r24, 0x96	; 150
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	0e 94 03 11 	call	0x2206	; 0x2206 <EEPROMClass::write(int, unsigned char) [clone .isra.0]>
    39a8:	60 e0       	ldi	r22, 0x00	; 0
    39aa:	84 e8       	ldi	r24, 0x84	; 132
    39ac:	90 e0       	ldi	r25, 0x00	; 0
    39ae:	0e 94 03 11 	call	0x2206	; 0x2206 <EEPROMClass::write(int, unsigned char) [clone .isra.0]>
    39b2:	81 e0       	ldi	r24, 0x01	; 1
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <SELECTION_PARAMETER>
    39ba:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <SELECTION_PARAMETER+0x1>
    39be:	10 92 ad 28 	sts	0x28AD, r1	; 0x8028ad <Service_Menu>
    39c2:	10 92 a7 28 	sts	0x28A7, r1	; 0x8028a7 <currentMillis>
    39c6:	10 92 a8 28 	sts	0x28A8, r1	; 0x8028a8 <currentMillis+0x1>
SET_LONG_PRESS_FUNCTION():
    39ca:	10 92 bf 28 	sts	0x28BF, r1	; 0x8028bf <Mode_Button_Single_Press_In_Settings>
    39ce:	c2 cd       	rjmp	.-1148   	; 0x3554 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xaaa>
    39d0:	e3 31       	cpi	r30, 0x13	; 19
    39d2:	f1 05       	cpc	r31, r1
    39d4:	08 f0       	brcs	.+2      	; 0x39d8 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xf2e>
    39d6:	fb c8       	rjmp	.-3594   	; 0x2bce <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x124>
    39d8:	e0 51       	subi	r30, 0x10	; 16
    39da:	f3 4e       	sbci	r31, 0xE3	; 227
    39dc:	0c 94 6c 3a 	jmp	0x74d8	; 0x74d8 <__tablejump2__>
    39e0:	03 1d       	adc	r16, r3
    39e2:	45 1d       	adc	r20, r5
    39e4:	79 1d       	adc	r23, r9
    39e6:	cb 1d       	adc	r28, r11
    39e8:	15 1e       	adc	r1, r21
    39ea:	42 1e       	adc	r4, r18
    39ec:	71 1e       	adc	r7, r17
    39ee:	a7 1e       	adc	r10, r23
    39f0:	fe 1e       	adc	r15, r30
    39f2:	65 1f       	adc	r22, r21
    39f4:	9a 1f       	adc	r25, r26
    39f6:	cb 1f       	adc	r28, r27
    39f8:	7a 20       	and	r7, r10
    39fa:	3c 21       	and	r19, r12
    39fc:	fa 21       	and	r31, r10
    39fe:	c7 22       	and	r12, r23
    3a00:	fa 22       	and	r15, r26
    3a02:	2e 23       	and	r18, r30
    3a04:	4b 23       	and	r20, r27
    3a06:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    3a0a:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <DOT2_1>
    3a0e:	10 92 bc 28 	sts	0x28BC, r1	; 0x8028bc <DOT1_0>
    3a12:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
DISPLAY_DIGIT2():
    3a16:	8c e0       	ldi	r24, 0x0C	; 12
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    3a1e:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    3a22:	80 e1       	ldi	r24, 0x10	; 16
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    3a2a:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    3a2e:	89 e1       	ldi	r24, 0x19	; 25
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <digits2+0x4>
    3a36:	90 93 03 29 	sts	0x2903, r25	; 0x802903 <digits2+0x5>
    3a3a:	81 e1       	ldi	r24, 0x11	; 17
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    3a42:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    3a46:	80 91 a6 28 	lds	r24, 0x28A6	; 0x8028a6 <STIR_VALUE_SET>
DISPLAY_DIGIT1():
    3a4a:	10 92 f6 28 	sts	0x28F6, r1	; 0x8028f6 <digits1>
    3a4e:	10 92 f7 28 	sts	0x28F7, r1	; 0x8028f7 <digits1+0x1>
SET_LONG_PRESS_FUNCTION():
    3a52:	81 11       	cpse	r24, r1
    3a54:	11 c0       	rjmp	.+34     	; 0x3a78 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xfce>
DISPLAY_DIGIT1():
    3a56:	85 e1       	ldi	r24, 0x15	; 21
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    3a5a:	80 93 f8 28 	sts	0x28F8, r24	; 0x8028f8 <digits1+0x2>
    3a5e:	90 93 f9 28 	sts	0x28F9, r25	; 0x8028f9 <digits1+0x3>
    3a62:	80 93 fa 28 	sts	0x28FA, r24	; 0x8028fa <digits1+0x4>
    3a66:	90 93 fb 28 	sts	0x28FB, r25	; 0x8028fb <digits1+0x5>
    3a6a:	88 e1       	ldi	r24, 0x18	; 24
    3a6c:	90 e0       	ldi	r25, 0x00	; 0
    3a6e:	80 93 fc 28 	sts	0x28FC, r24	; 0x8028fc <digits1+0x6>
    3a72:	90 93 fd 28 	sts	0x28FD, r25	; 0x8028fd <digits1+0x7>
    3a76:	ab c8       	rjmp	.-3754   	; 0x2bce <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x124>
    3a78:	84 e1       	ldi	r24, 0x14	; 20
    3a7a:	90 e0       	ldi	r25, 0x00	; 0
    3a7c:	80 93 f8 28 	sts	0x28F8, r24	; 0x8028f8 <digits1+0x2>
    3a80:	90 93 f9 28 	sts	0x28F9, r25	; 0x8028f9 <digits1+0x3>
    3a84:	88 e1       	ldi	r24, 0x18	; 24
    3a86:	90 e0       	ldi	r25, 0x00	; 0
    3a88:	7d c8       	rjmp	.-3846   	; 0x2b84 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xda>
SET_LONG_PRESS_FUNCTION():
    3a8a:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
    3a8e:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    3a92:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <DOT2_1>
DISPLAY_DIGIT2():
    3a96:	8c e1       	ldi	r24, 0x1C	; 28
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    3a9e:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    3aa2:	84 e1       	ldi	r24, 0x14	; 20
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    3aaa:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    3aae:	89 e1       	ldi	r24, 0x19	; 25
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <digits2+0x4>
    3ab6:	90 93 03 29 	sts	0x2903, r25	; 0x802903 <digits2+0x5>
    3aba:	80 e1       	ldi	r24, 0x10	; 16
    3abc:	90 e0       	ldi	r25, 0x00	; 0
    3abe:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    3ac2:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    3ac6:	80 91 4f 29 	lds	r24, 0x294F	; 0x80294f <DEGREE_VALUE_SET>
    3aca:	81 11       	cpse	r24, r1
    3acc:	09 c0       	rjmp	.+18     	; 0x3ae0 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x1036>
DISPLAY_DIGIT1():
    3ace:	8d e1       	ldi	r24, 0x1D	; 29
    3ad0:	90 e0       	ldi	r25, 0x00	; 0
    3ad2:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <digits1>
    3ad6:	90 93 f7 28 	sts	0x28F7, r25	; 0x8028f7 <digits1+0x1>
    3ada:	8a e0       	ldi	r24, 0x0A	; 10
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	ce cf       	rjmp	.-100    	; 0x3a7c <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xfd2>
    3ae0:	8d e1       	ldi	r24, 0x1D	; 29
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
    3ae4:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <digits1>
    3ae8:	90 93 f7 28 	sts	0x28F7, r25	; 0x8028f7 <digits1+0x1>
    3aec:	85 e1       	ldi	r24, 0x15	; 21
    3aee:	90 e0       	ldi	r25, 0x00	; 0
    3af0:	c5 cf       	rjmp	.-118    	; 0x3a7c <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xfd2>
SET_LONG_PRESS_FUNCTION():
    3af2:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
DISPLAY_DIGIT2():
    3af6:	8c e0       	ldi	r24, 0x0C	; 12
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    3afe:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    3b02:	8d e0       	ldi	r24, 0x0D	; 13
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    3b0a:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    3b0e:	05 e1       	ldi	r16, 0x15	; 21
    3b10:	10 e0       	ldi	r17, 0x00	; 0
    3b12:	00 93 02 29 	sts	0x2902, r16	; 0x802902 <digits2+0x4>
    3b16:	10 93 03 29 	sts	0x2903, r17	; 0x802903 <digits2+0x5>
    3b1a:	8f e0       	ldi	r24, 0x0F	; 15
    3b1c:	90 e0       	ldi	r25, 0x00	; 0
    3b1e:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    3b22:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    3b26:	80 91 4f 29 	lds	r24, 0x294F	; 0x80294f <DEGREE_VALUE_SET>
    3b2a:	81 11       	cpse	r24, r1
    3b2c:	1d c0       	rjmp	.+58     	; 0x3b68 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x10be>
    3b2e:	80 91 0e 29 	lds	r24, 0x290E	; 0x80290e <SAFE_VALUE_SET_DEG>
    3b32:	90 91 0f 29 	lds	r25, 0x290F	; 0x80290f <SAFE_VALUE_SET_DEG+0x1>
    3b36:	2a e0       	ldi	r18, 0x0A	; 10
    3b38:	28 9f       	mul	r18, r24
    3b3a:	b0 01       	movw	r22, r0
    3b3c:	29 9f       	mul	r18, r25
    3b3e:	70 0d       	add	r23, r0
    3b40:	11 24       	eor	r1, r1
    3b42:	07 2e       	mov	r0, r23
    3b44:	00 0c       	add	r0, r0
    3b46:	88 0b       	sbc	r24, r24
    3b48:	99 0b       	sbc	r25, r25
    3b4a:	0e 94 a0 03 	call	0x740	; 0x740 <Eclass::BREAK_NUMBER1(long) [clone .constprop.46]>
    3b4e:	8a e0       	ldi	r24, 0x0A	; 10
    3b50:	90 e0       	ldi	r25, 0x00	; 0
    3b52:	80 93 fc 28 	sts	0x28FC, r24	; 0x8028fc <digits1+0x6>
    3b56:	90 93 fd 28 	sts	0x28FD, r25	; 0x8028fd <digits1+0x7>
    3b5a:	88 e1       	ldi	r24, 0x18	; 24
    3b5c:	90 e0       	ldi	r25, 0x00	; 0
    3b5e:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <digits1>
    3b62:	90 93 f7 28 	sts	0x28F7, r25	; 0x8028f7 <digits1+0x1>
    3b66:	33 c8       	rjmp	.-3994   	; 0x2bce <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x124>
    3b68:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    3b6c:	80 91 0c 29 	lds	r24, 0x290C	; 0x80290c <SAFE_VALUE_SET_FAH>
    3b70:	90 91 0d 29 	lds	r25, 0x290D	; 0x80290d <SAFE_VALUE_SET_FAH+0x1>
    3b74:	2a e0       	ldi	r18, 0x0A	; 10
    3b76:	28 9f       	mul	r18, r24
    3b78:	b0 01       	movw	r22, r0
    3b7a:	29 9f       	mul	r18, r25
    3b7c:	70 0d       	add	r23, r0
    3b7e:	11 24       	eor	r1, r1
    3b80:	07 2e       	mov	r0, r23
    3b82:	00 0c       	add	r0, r0
    3b84:	88 0b       	sbc	r24, r24
    3b86:	99 0b       	sbc	r25, r25
    3b88:	0e 94 a0 03 	call	0x740	; 0x740 <Eclass::BREAK_NUMBER1(long) [clone .constprop.46]>
    3b8c:	00 93 fc 28 	sts	0x28FC, r16	; 0x8028fc <digits1+0x6>
    3b90:	10 93 fd 28 	sts	0x28FD, r17	; 0x8028fd <digits1+0x7>
    3b94:	1c c8       	rjmp	.-4040   	; 0x2bce <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x124>
    3b96:	10 92 bc 28 	sts	0x28BC, r1	; 0x8028bc <DOT1_0>
    3b9a:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    3b9e:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <DOT2_1>
    3ba2:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
DISPLAY_DIGIT2():
    3ba6:	80 e1       	ldi	r24, 0x10	; 16
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    3bae:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    3bb2:	29 e1       	ldi	r18, 0x19	; 25
    3bb4:	30 e0       	ldi	r19, 0x00	; 0
    3bb6:	20 93 00 29 	sts	0x2900, r18	; 0x802900 <digits2+0x2>
    3bba:	30 93 01 29 	sts	0x2901, r19	; 0x802901 <digits2+0x3>
    3bbe:	22 e1       	ldi	r18, 0x12	; 18
    3bc0:	30 e0       	ldi	r19, 0x00	; 0
    3bc2:	20 93 02 29 	sts	0x2902, r18	; 0x802902 <digits2+0x4>
    3bc6:	30 93 03 29 	sts	0x2903, r19	; 0x802903 <digits2+0x5>
    3bca:	2f e0       	ldi	r18, 0x0F	; 15
    3bcc:	30 e0       	ldi	r19, 0x00	; 0
    3bce:	20 93 04 29 	sts	0x2904, r18	; 0x802904 <digits2+0x6>
    3bd2:	30 93 05 29 	sts	0x2905, r19	; 0x802905 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    3bd6:	20 91 a5 28 	lds	r18, 0x28A5	; 0x8028a5 <TIME_SOCK_OR_TOTAL>
    3bda:	21 11       	cpse	r18, r1
    3bdc:	11 c0       	rjmp	.+34     	; 0x3c00 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x1156>
DISPLAY_DIGIT1():
    3bde:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <digits1>
    3be2:	90 93 f7 28 	sts	0x28F7, r25	; 0x8028f7 <digits1+0x1>
    3be6:	27 e1       	ldi	r18, 0x17	; 23
    3be8:	30 e0       	ldi	r19, 0x00	; 0
    3bea:	20 93 f8 28 	sts	0x28F8, r18	; 0x8028f8 <digits1+0x2>
    3bee:	30 93 f9 28 	sts	0x28F9, r19	; 0x8028f9 <digits1+0x3>
    3bf2:	80 93 fa 28 	sts	0x28FA, r24	; 0x8028fa <digits1+0x4>
    3bf6:	90 93 fb 28 	sts	0x28FB, r25	; 0x8028fb <digits1+0x5>
    3bfa:	8f e1       	ldi	r24, 0x1F	; 31
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	37 cf       	rjmp	.-402    	; 0x3a6e <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xfc4>
    3c00:	8c e0       	ldi	r24, 0x0C	; 12
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <digits1>
    3c08:	90 93 f7 28 	sts	0x28F7, r25	; 0x8028f7 <digits1+0x1>
    3c0c:	87 e1       	ldi	r24, 0x17	; 23
    3c0e:	90 e0       	ldi	r25, 0x00	; 0
    3c10:	80 93 f8 28 	sts	0x28F8, r24	; 0x8028f8 <digits1+0x2>
    3c14:	90 93 f9 28 	sts	0x28F9, r25	; 0x8028f9 <digits1+0x3>
    3c18:	8d e0       	ldi	r24, 0x0D	; 13
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
    3c1c:	80 93 fa 28 	sts	0x28FA, r24	; 0x8028fa <digits1+0x4>
    3c20:	90 93 fb 28 	sts	0x28FB, r25	; 0x8028fb <digits1+0x5>
SET_LONG_PRESS_FUNCTION():
    3c24:	8a e0       	ldi	r24, 0x0A	; 10
    3c26:	90 e0       	ldi	r25, 0x00	; 0
    3c28:	22 cf       	rjmp	.-444    	; 0x3a6e <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xfc4>
    3c2a:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
DISPLAY_DIGIT2():
    3c2e:	8d e0       	ldi	r24, 0x0D	; 13
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    3c36:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    3c3a:	82 e2       	ldi	r24, 0x22	; 34
    3c3c:	90 e0       	ldi	r25, 0x00	; 0
    3c3e:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    3c42:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    3c46:	80 e1       	ldi	r24, 0x10	; 16
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <digits2+0x4>
    3c4e:	90 93 03 29 	sts	0x2903, r25	; 0x802903 <digits2+0x5>
    3c52:	87 e1       	ldi	r24, 0x17	; 23
    3c54:	90 e0       	ldi	r25, 0x00	; 0
    3c56:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    3c5a:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
DISPLAY_DIGIT1():
    3c5e:	2b e0       	ldi	r18, 0x0B	; 11
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	20 93 f6 28 	sts	0x28F6, r18	; 0x8028f6 <digits1>
    3c66:	30 93 f7 28 	sts	0x28F7, r19	; 0x8028f7 <digits1+0x1>
    3c6a:	21 e1       	ldi	r18, 0x11	; 17
    3c6c:	30 e0       	ldi	r19, 0x00	; 0
    3c6e:	20 93 f8 28 	sts	0x28F8, r18	; 0x8028f8 <digits1+0x2>
    3c72:	30 93 f9 28 	sts	0x28F9, r19	; 0x8028f9 <digits1+0x3>
    3c76:	80 93 fa 28 	sts	0x28FA, r24	; 0x8028fa <digits1+0x4>
    3c7a:	90 93 fb 28 	sts	0x28FB, r25	; 0x8028fb <digits1+0x5>
    3c7e:	8c e0       	ldi	r24, 0x0C	; 12
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	f5 ce       	rjmp	.-534    	; 0x3a6e <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xfc4>
SET_LONG_PRESS_FUNCTION():
    3c84:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    3c88:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <DOT2_1>
    3c8c:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
DISPLAY_DIGIT2():
    3c90:	8b e0       	ldi	r24, 0x0B	; 11
    3c92:	90 e0       	ldi	r25, 0x00	; 0
    3c94:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    3c98:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    3c9c:	21 e1       	ldi	r18, 0x11	; 17
    3c9e:	30 e0       	ldi	r19, 0x00	; 0
    3ca0:	20 93 00 29 	sts	0x2900, r18	; 0x802900 <digits2+0x2>
    3ca4:	30 93 01 29 	sts	0x2901, r19	; 0x802901 <digits2+0x3>
    3ca8:	20 e2       	ldi	r18, 0x20	; 32
    3caa:	30 e0       	ldi	r19, 0x00	; 0
    3cac:	20 93 02 29 	sts	0x2902, r18	; 0x802902 <digits2+0x4>
    3cb0:	30 93 03 29 	sts	0x2903, r19	; 0x802903 <digits2+0x5>
    3cb4:	20 e1       	ldi	r18, 0x10	; 16
    3cb6:	30 e0       	ldi	r19, 0x00	; 0
    3cb8:	20 93 04 29 	sts	0x2904, r18	; 0x802904 <digits2+0x6>
    3cbc:	30 93 05 29 	sts	0x2905, r19	; 0x802905 <digits2+0x7>
DISPLAY_DIGIT1():
    3cc0:	20 93 f6 28 	sts	0x28F6, r18	; 0x8028f6 <digits1>
    3cc4:	30 93 f7 28 	sts	0x28F7, r19	; 0x8028f7 <digits1+0x1>
    3cc8:	23 e2       	ldi	r18, 0x23	; 35
    3cca:	30 e0       	ldi	r19, 0x00	; 0
    3ccc:	20 93 f8 28 	sts	0x28F8, r18	; 0x8028f8 <digits1+0x2>
    3cd0:	30 93 f9 28 	sts	0x28F9, r19	; 0x8028f9 <digits1+0x3>
    3cd4:	80 93 fa 28 	sts	0x28FA, r24	; 0x8028fa <digits1+0x4>
    3cd8:	90 93 fb 28 	sts	0x28FB, r25	; 0x8028fb <digits1+0x5>
    3cdc:	8f e0       	ldi	r24, 0x0F	; 15
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	c6 ce       	rjmp	.-628    	; 0x3a6e <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xfc4>
SET_LONG_PRESS_FUNCTION():
    3ce2:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    3ce6:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <DOT2_1>
    3cea:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
DISPLAY_DIGIT2():
    3cee:	4a e0       	ldi	r20, 0x0A	; 10
    3cf0:	50 e0       	ldi	r21, 0x00	; 0
    3cf2:	40 93 fe 28 	sts	0x28FE, r20	; 0x8028fe <digits2>
    3cf6:	50 93 ff 28 	sts	0x28FF, r21	; 0x8028ff <digits2+0x1>
    3cfa:	2d e0       	ldi	r18, 0x0D	; 13
    3cfc:	30 e0       	ldi	r19, 0x00	; 0
    3cfe:	20 93 00 29 	sts	0x2900, r18	; 0x802900 <digits2+0x2>
    3d02:	30 93 01 29 	sts	0x2901, r19	; 0x802901 <digits2+0x3>
    3d06:	8a e1       	ldi	r24, 0x1A	; 26
    3d08:	90 e0       	ldi	r25, 0x00	; 0
    3d0a:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <digits2+0x4>
    3d0e:	90 93 03 29 	sts	0x2903, r25	; 0x802903 <digits2+0x5>
    3d12:	6e e0       	ldi	r22, 0x0E	; 14
    3d14:	70 e0       	ldi	r23, 0x00	; 0
    3d16:	60 93 04 29 	sts	0x2904, r22	; 0x802904 <digits2+0x6>
    3d1a:	70 93 05 29 	sts	0x2905, r23	; 0x802905 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    3d1e:	60 91 d4 28 	lds	r22, 0x28D4	; 0x8028d4 <CAL_SELECT_VALUE>
    3d22:	70 91 d5 28 	lds	r23, 0x28D5	; 0x8028d5 <CAL_SELECT_VALUE+0x1>
DISPLAY_DIGIT1():
    3d26:	40 93 f6 28 	sts	0x28F6, r20	; 0x8028f6 <digits1>
    3d2a:	50 93 f7 28 	sts	0x28F7, r21	; 0x8028f7 <digits1+0x1>
    3d2e:	20 93 f8 28 	sts	0x28F8, r18	; 0x8028f8 <digits1+0x2>
    3d32:	30 93 f9 28 	sts	0x28F9, r19	; 0x8028f9 <digits1+0x3>
    3d36:	80 93 fa 28 	sts	0x28FA, r24	; 0x8028fa <digits1+0x4>
    3d3a:	90 93 fb 28 	sts	0x28FB, r25	; 0x8028fb <digits1+0x5>
    3d3e:	82 e0       	ldi	r24, 0x02	; 2
    3d40:	90 e0       	ldi	r25, 0x00	; 0
SET_LONG_PRESS_FUNCTION():
    3d42:	67 2b       	or	r22, r23
    3d44:	09 f0       	breq	.+2      	; 0x3d48 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x129e>
    3d46:	93 ce       	rjmp	.-730    	; 0x3a6e <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xfc4>
DISPLAY_DIGIT1():
    3d48:	81 e0       	ldi	r24, 0x01	; 1
    3d4a:	90 e0       	ldi	r25, 0x00	; 0
    3d4c:	90 ce       	rjmp	.-736    	; 0x3a6e <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xfc4>
SET_LONG_PRESS_FUNCTION():
    3d4e:	10 92 bc 28 	sts	0x28BC, r1	; 0x8028bc <DOT1_0>
    3d52:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
DISPLAY_DIGIT2():
    3d56:	8a e0       	ldi	r24, 0x0A	; 10
    3d58:	90 e0       	ldi	r25, 0x00	; 0
    3d5a:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    3d5e:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    3d62:	8d e0       	ldi	r24, 0x0D	; 13
    3d64:	90 e0       	ldi	r25, 0x00	; 0
    3d66:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    3d6a:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    3d6e:	8a e1       	ldi	r24, 0x1A	; 26
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <digits2+0x4>
    3d76:	90 93 03 29 	sts	0x2903, r25	; 0x802903 <digits2+0x5>
    3d7a:	81 e0       	ldi	r24, 0x01	; 1
    3d7c:	90 e0       	ldi	r25, 0x00	; 0
    3d7e:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    3d82:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    3d86:	80 91 4f 29 	lds	r24, 0x294F	; 0x80294f <DEGREE_VALUE_SET>
    3d8a:	81 11       	cpse	r24, r1
    3d8c:	87 c0       	rjmp	.+270    	; 0x3e9c <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x13f2>
    3d8e:	c0 90 ee 28 	lds	r12, 0x28EE	; 0x8028ee <TEMP_DEG_RAW>
    3d92:	d0 90 ef 28 	lds	r13, 0x28EF	; 0x8028ef <TEMP_DEG_RAW+0x1>
    3d96:	e0 90 f0 28 	lds	r14, 0x28F0	; 0x8028f0 <TEMP_DEG_RAW+0x2>
    3d9a:	f0 90 f1 28 	lds	r15, 0x28F1	; 0x8028f1 <TEMP_DEG_RAW+0x3>
    3d9e:	2d ec       	ldi	r18, 0xCD	; 205
    3da0:	3c ec       	ldi	r19, 0xCC	; 204
    3da2:	47 ec       	ldi	r20, 0xC7	; 199
    3da4:	52 e4       	ldi	r21, 0x42	; 66
    3da6:	60 91 f2 28 	lds	r22, 0x28F2	; 0x8028f2 <TEMP_DEG>
    3daa:	70 91 f3 28 	lds	r23, 0x28F3	; 0x8028f3 <TEMP_DEG+0x1>
    3dae:	80 91 f4 28 	lds	r24, 0x28F4	; 0x8028f4 <TEMP_DEG+0x2>
    3db2:	90 91 f5 28 	lds	r25, 0x28F5	; 0x8028f5 <TEMP_DEG+0x3>
    3db6:	0e 94 b4 39 	call	0x7368	; 0x7368 <__gesf2>
    3dba:	18 16       	cp	r1, r24
    3dbc:	7c f4       	brge	.+30     	; 0x3ddc <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x1332>
    3dbe:	20 e0       	ldi	r18, 0x00	; 0
    3dc0:	30 e0       	ldi	r19, 0x00	; 0
    3dc2:	40 e2       	ldi	r20, 0x20	; 32
    3dc4:	51 e4       	ldi	r21, 0x41	; 65
    3dc6:	c7 01       	movw	r24, r14
    3dc8:	b6 01       	movw	r22, r12
    3dca:	0e 94 b8 39 	call	0x7370	; 0x7370 <__mulsf3>
    3dce:	0e 94 d1 38 	call	0x71a2	; 0x71a2 <__fixsfsi>
    3dd2:	0e 94 a0 03 	call	0x740	; 0x740 <Eclass::BREAK_NUMBER1(long) [clone .constprop.46]>
    3dd6:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    3dda:	24 cf       	rjmp	.-440    	; 0x3c24 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x117a>
    3ddc:	20 e0       	ldi	r18, 0x00	; 0
    3dde:	30 e0       	ldi	r19, 0x00	; 0
    3de0:	48 ec       	ldi	r20, 0xC8	; 200
    3de2:	52 e4       	ldi	r21, 0x42	; 66
    3de4:	c7 01       	movw	r24, r14
    3de6:	b6 01       	movw	r22, r12
    3de8:	0e 94 b8 39 	call	0x7370	; 0x7370 <__mulsf3>
    3dec:	0e 94 d1 38 	call	0x71a2	; 0x71a2 <__fixsfsi>
    3df0:	0e 94 a0 03 	call	0x740	; 0x740 <Eclass::BREAK_NUMBER1(long) [clone .constprop.46]>
    3df4:	81 e0       	ldi	r24, 0x01	; 1
    3df6:	80 93 be 28 	sts	0x28BE, r24	; 0x8028be <DOT1_1>
    3dfa:	14 cf       	rjmp	.-472    	; 0x3c24 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x117a>
    3dfc:	10 92 bc 28 	sts	0x28BC, r1	; 0x8028bc <DOT1_0>
    3e00:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
DISPLAY_DIGIT2():
    3e04:	8a e0       	ldi	r24, 0x0A	; 10
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    3e0c:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    3e10:	8d e0       	ldi	r24, 0x0D	; 13
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    3e18:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    3e1c:	8a e1       	ldi	r24, 0x1A	; 26
    3e1e:	90 e0       	ldi	r25, 0x00	; 0
    3e20:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <digits2+0x4>
    3e24:	90 93 03 29 	sts	0x2903, r25	; 0x802903 <digits2+0x5>
    3e28:	81 e0       	ldi	r24, 0x01	; 1
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    3e30:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    3e34:	80 91 4f 29 	lds	r24, 0x294F	; 0x80294f <DEGREE_VALUE_SET>
    3e38:	81 11       	cpse	r24, r1
    3e3a:	30 c0       	rjmp	.+96     	; 0x3e9c <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x13f2>
    3e3c:	80 90 ee 28 	lds	r8, 0x28EE	; 0x8028ee <TEMP_DEG_RAW>
    3e40:	90 90 ef 28 	lds	r9, 0x28EF	; 0x8028ef <TEMP_DEG_RAW+0x1>
    3e44:	a0 90 f0 28 	lds	r10, 0x28F0	; 0x8028f0 <TEMP_DEG_RAW+0x2>
    3e48:	b0 90 f1 28 	lds	r11, 0x28F1	; 0x8028f1 <TEMP_DEG_RAW+0x3>
    3e4c:	20 e0       	ldi	r18, 0x00	; 0
    3e4e:	30 e0       	ldi	r19, 0x00	; 0
    3e50:	48 ec       	ldi	r20, 0xC8	; 200
    3e52:	52 e4       	ldi	r21, 0x42	; 66
    3e54:	c5 01       	movw	r24, r10
    3e56:	b4 01       	movw	r22, r8
    3e58:	0e 94 b8 39 	call	0x7370	; 0x7370 <__mulsf3>
    3e5c:	0e 94 d1 38 	call	0x71a2	; 0x71a2 <__fixsfsi>
    3e60:	6b 01       	movw	r12, r22
    3e62:	7c 01       	movw	r14, r24
    3e64:	0e 94 a0 03 	call	0x740	; 0x740 <Eclass::BREAK_NUMBER1(long) [clone .constprop.46]>
    3e68:	2d ec       	ldi	r18, 0xCD	; 205
    3e6a:	3c ec       	ldi	r19, 0xCC	; 204
    3e6c:	47 ec       	ldi	r20, 0xC7	; 199
    3e6e:	52 e4       	ldi	r21, 0x42	; 66
    3e70:	60 91 f2 28 	lds	r22, 0x28F2	; 0x8028f2 <TEMP_DEG>
    3e74:	70 91 f3 28 	lds	r23, 0x28F3	; 0x8028f3 <TEMP_DEG+0x1>
    3e78:	80 91 f4 28 	lds	r24, 0x28F4	; 0x8028f4 <TEMP_DEG+0x2>
    3e7c:	90 91 f5 28 	lds	r25, 0x28F5	; 0x8028f5 <TEMP_DEG+0x3>
    3e80:	0e 94 b4 39 	call	0x7368	; 0x7368 <__gesf2>
    3e84:	18 16       	cp	r1, r24
    3e86:	3c f4       	brge	.+14     	; 0x3e96 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x13ec>
    3e88:	20 e0       	ldi	r18, 0x00	; 0
    3e8a:	30 e0       	ldi	r19, 0x00	; 0
    3e8c:	40 e2       	ldi	r20, 0x20	; 32
    3e8e:	51 e4       	ldi	r21, 0x41	; 65
    3e90:	c5 01       	movw	r24, r10
    3e92:	b4 01       	movw	r22, r8
    3e94:	9a cf       	rjmp	.-204    	; 0x3dca <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x1320>
    3e96:	c7 01       	movw	r24, r14
    3e98:	b6 01       	movw	r22, r12
    3e9a:	aa cf       	rjmp	.-172    	; 0x3df0 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x1346>
    3e9c:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    3ea0:	20 e0       	ldi	r18, 0x00	; 0
    3ea2:	30 e0       	ldi	r19, 0x00	; 0
    3ea4:	40 e2       	ldi	r20, 0x20	; 32
    3ea6:	51 e4       	ldi	r21, 0x41	; 65
    3ea8:	60 91 da 28 	lds	r22, 0x28DA	; 0x8028da <TEMP_FAH_RAW>
    3eac:	70 91 db 28 	lds	r23, 0x28DB	; 0x8028db <TEMP_FAH_RAW+0x1>
    3eb0:	80 91 dc 28 	lds	r24, 0x28DC	; 0x8028dc <TEMP_FAH_RAW+0x2>
    3eb4:	90 91 dd 28 	lds	r25, 0x28DD	; 0x8028dd <TEMP_FAH_RAW+0x3>
    3eb8:	0e 94 b8 39 	call	0x7370	; 0x7370 <__mulsf3>
    3ebc:	0e 94 d1 38 	call	0x71a2	; 0x71a2 <__fixsfsi>
    3ec0:	0e 94 a0 03 	call	0x740	; 0x740 <Eclass::BREAK_NUMBER1(long) [clone .constprop.46]>
    3ec4:	85 e1       	ldi	r24, 0x15	; 21
    3ec6:	90 e0       	ldi	r25, 0x00	; 0
    3ec8:	d2 cd       	rjmp	.-1116   	; 0x3a6e <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xfc4>
    3eca:	81 e0       	ldi	r24, 0x01	; 1
    3ecc:	80 93 bc 28 	sts	0x28BC, r24	; 0x8028bc <DOT1_0>
    3ed0:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    3ed4:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
DISPLAY_DIGIT2():
    3ed8:	0a e0       	ldi	r16, 0x0A	; 10
    3eda:	10 e0       	ldi	r17, 0x00	; 0
    3edc:	00 93 fe 28 	sts	0x28FE, r16	; 0x8028fe <digits2>
    3ee0:	10 93 ff 28 	sts	0x28FF, r17	; 0x8028ff <digits2+0x1>
    3ee4:	8d e0       	ldi	r24, 0x0D	; 13
    3ee6:	90 e0       	ldi	r25, 0x00	; 0
    3ee8:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    3eec:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    3ef0:	3a e1       	ldi	r19, 0x1A	; 26
    3ef2:	e3 2e       	mov	r14, r19
    3ef4:	f1 2c       	mov	r15, r1
    3ef6:	e0 92 02 29 	sts	0x2902, r14	; 0x802902 <digits2+0x4>
    3efa:	f0 92 03 29 	sts	0x2903, r15	; 0x802903 <digits2+0x5>
    3efe:	82 e0       	ldi	r24, 0x02	; 2
    3f00:	90 e0       	ldi	r25, 0x00	; 0
    3f02:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    3f06:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    3f0a:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <LOW_CAL_VALUE_SET>
    3f0e:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <LOW_CAL_VALUE_SET+0x1>
    3f12:	2a e0       	ldi	r18, 0x0A	; 10
    3f14:	28 9f       	mul	r18, r24
    3f16:	b0 01       	movw	r22, r0
    3f18:	29 9f       	mul	r18, r25
    3f1a:	70 0d       	add	r23, r0
    3f1c:	11 24       	eor	r1, r1
    3f1e:	07 2e       	mov	r0, r23
    3f20:	00 0c       	add	r0, r0
    3f22:	88 0b       	sbc	r24, r24
    3f24:	99 0b       	sbc	r25, r25
    3f26:	0e 94 a0 03 	call	0x740	; 0x740 <Eclass::BREAK_NUMBER1(long) [clone .constprop.46]>
    3f2a:	e0 92 f6 28 	sts	0x28F6, r14	; 0x8028f6 <digits1>
    3f2e:	f0 92 f7 28 	sts	0x28F7, r15	; 0x8028f7 <digits1+0x1>
    3f32:	2c ce       	rjmp	.-936    	; 0x3b8c <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x10e2>
    3f34:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
DISPLAY_DIGIT2():
    3f38:	0a e0       	ldi	r16, 0x0A	; 10
    3f3a:	10 e0       	ldi	r17, 0x00	; 0
    3f3c:	00 93 fe 28 	sts	0x28FE, r16	; 0x8028fe <digits2>
    3f40:	10 93 ff 28 	sts	0x28FF, r17	; 0x8028ff <digits2+0x1>
    3f44:	8d e0       	ldi	r24, 0x0D	; 13
    3f46:	90 e0       	ldi	r25, 0x00	; 0
    3f48:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    3f4c:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    3f50:	8a e1       	ldi	r24, 0x1A	; 26
    3f52:	90 e0       	ldi	r25, 0x00	; 0
    3f54:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <digits2+0x4>
    3f58:	90 93 03 29 	sts	0x2903, r25	; 0x802903 <digits2+0x5>
    3f5c:	82 e0       	ldi	r24, 0x02	; 2
    3f5e:	90 e0       	ldi	r25, 0x00	; 0
    3f60:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    3f64:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
SET_LONG_PRESS_FUNCTION():
    3f68:	80 91 b2 28 	lds	r24, 0x28B2	; 0x8028b2 <HIGH_CAL_VALUE_SET>
    3f6c:	90 91 b3 28 	lds	r25, 0x28B3	; 0x8028b3 <HIGH_CAL_VALUE_SET+0x1>
    3f70:	2a e0       	ldi	r18, 0x0A	; 10
    3f72:	28 9f       	mul	r18, r24
    3f74:	b0 01       	movw	r22, r0
    3f76:	29 9f       	mul	r18, r25
    3f78:	70 0d       	add	r23, r0
    3f7a:	11 24       	eor	r1, r1
    3f7c:	07 2e       	mov	r0, r23
    3f7e:	00 0c       	add	r0, r0
    3f80:	88 0b       	sbc	r24, r24
    3f82:	99 0b       	sbc	r25, r25
    3f84:	0e 94 a0 03 	call	0x740	; 0x740 <Eclass::BREAK_NUMBER1(long) [clone .constprop.46]>
    3f88:	8e e1       	ldi	r24, 0x1E	; 30
    3f8a:	90 e0       	ldi	r25, 0x00	; 0
    3f8c:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <digits1>
    3f90:	90 93 f7 28 	sts	0x28F7, r25	; 0x8028f7 <digits1+0x1>
    3f94:	fb cd       	rjmp	.-1034   	; 0x3b8c <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x10e2>
    3f96:	10 92 bc 28 	sts	0x28BC, r1	; 0x8028bc <DOT1_0>
    3f9a:	81 e0       	ldi	r24, 0x01	; 1
    3f9c:	80 93 bd 28 	sts	0x28BD, r24	; 0x8028bd <DOT2_1>
    3fa0:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    3fa4:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
PID_Start():
    3fa8:	88 ee       	ldi	r24, 0xE8	; 232
    3faa:	9a e2       	ldi	r25, 0x2A	; 42
    3fac:	0e 94 0a 0b 	call	0x1614	; 0x1614 <Ticker::start()>
SET_LONG_PRESS_FUNCTION():
    3fb0:	60 91 2f 29 	lds	r22, 0x292F	; 0x80292f <SET_LONG_VALUE+0x12>
    3fb4:	70 91 30 29 	lds	r23, 0x2930	; 0x802930 <SET_LONG_VALUE+0x13>
    3fb8:	07 2e       	mov	r0, r23
    3fba:	00 0c       	add	r0, r0
    3fbc:	88 0b       	sbc	r24, r24
    3fbe:	99 0b       	sbc	r25, r25
    3fc0:	0e 94 04 39 	call	0x7208	; 0x7208 <__floatsisf>
    3fc4:	60 93 ee 29 	sts	0x29EE, r22	; 0x8029ee <PID_SETPOINT>
    3fc8:	70 93 ef 29 	sts	0x29EF, r23	; 0x8029ef <PID_SETPOINT+0x1>
    3fcc:	80 93 f0 29 	sts	0x29F0, r24	; 0x8029f0 <PID_SETPOINT+0x2>
    3fd0:	90 93 f1 29 	sts	0x29F1, r25	; 0x8029f1 <PID_SETPOINT+0x3>
digitalWrite():
    3fd4:	61 e0       	ldi	r22, 0x01	; 1
    3fd6:	81 e2       	ldi	r24, 0x21	; 33
    3fd8:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
DISPLAY_DIGIT1():
    3fdc:	be e1       	ldi	r27, 0x1E	; 30
    3fde:	eb 2e       	mov	r14, r27
    3fe0:	f1 2c       	mov	r15, r1
    3fe2:	1f e0       	ldi	r17, 0x0F	; 15
    3fe4:	c1 2e       	mov	r12, r17
    3fe6:	d1 2c       	mov	r13, r1
    3fe8:	0d e0       	ldi	r16, 0x0D	; 13
    3fea:	a0 2e       	mov	r10, r16
    3fec:	b1 2c       	mov	r11, r1
    3fee:	80 e1       	ldi	r24, 0x10	; 16
    3ff0:	88 2e       	mov	r8, r24
    3ff2:	91 2c       	mov	r9, r1
    3ff4:	08 e1       	ldi	r16, 0x18	; 24
    3ff6:	10 e0       	ldi	r17, 0x00	; 0
SET_LONG_PRESS_FUNCTION():
    3ff8:	9a e1       	ldi	r25, 0x1A	; 26
    3ffa:	69 2e       	mov	r6, r25
    3ffc:	71 2c       	mov	r7, r1
    3ffe:	27 e1       	ldi	r18, 0x17	; 23
    4000:	42 2e       	mov	r4, r18
    4002:	51 2c       	mov	r5, r1
    4004:	20 91 ee 29 	lds	r18, 0x29EE	; 0x8029ee <PID_SETPOINT>
    4008:	30 91 ef 29 	lds	r19, 0x29EF	; 0x8029ef <PID_SETPOINT+0x1>
    400c:	40 91 f0 29 	lds	r20, 0x29F0	; 0x8029f0 <PID_SETPOINT+0x2>
    4010:	50 91 f1 29 	lds	r21, 0x29F1	; 0x8029f1 <PID_SETPOINT+0x3>
    4014:	60 91 f6 29 	lds	r22, 0x29F6	; 0x8029f6 <PID_INPUT>
    4018:	70 91 f7 29 	lds	r23, 0x29F7	; 0x8029f7 <PID_INPUT+0x1>
    401c:	80 91 f8 29 	lds	r24, 0x29F8	; 0x8029f8 <PID_INPUT+0x2>
    4020:	90 91 f9 29 	lds	r25, 0x29F9	; 0x8029f9 <PID_INPUT+0x3>
    4024:	0e 94 65 38 	call	0x70ca	; 0x70ca <__cmpsf2>
    4028:	87 ff       	sbrs	r24, 7
    402a:	cc c1       	rjmp	.+920    	; 0x43c4 <__RODATA_PM_OFFSET__+0x3c4>
    402c:	80 91 a4 28 	lds	r24, 0x28A4	; 0x8028a4 <RST_BUTT>
    4030:	88 23       	and	r24, r24
    4032:	09 f4       	brne	.+2      	; 0x4036 <__RODATA_PM_OFFSET__+0x36>
    4034:	c7 c1       	rjmp	.+910    	; 0x43c4 <__RODATA_PM_OFFSET__+0x3c4>
    4036:	0e 94 9b 04 	call	0x936	; 0x936 <Mclass::RTD_TEMP_CONV() [clone .constprop.36]>
    403a:	60 91 2f 29 	lds	r22, 0x292F	; 0x80292f <SET_LONG_VALUE+0x12>
    403e:	70 91 30 29 	lds	r23, 0x2930	; 0x802930 <SET_LONG_VALUE+0x13>
    4042:	07 2e       	mov	r0, r23
    4044:	00 0c       	add	r0, r0
    4046:	88 0b       	sbc	r24, r24
    4048:	99 0b       	sbc	r25, r25
    404a:	0e 94 04 39 	call	0x7208	; 0x7208 <__floatsisf>
    404e:	60 93 ee 29 	sts	0x29EE, r22	; 0x8029ee <PID_SETPOINT>
    4052:	70 93 ef 29 	sts	0x29EF, r23	; 0x8029ef <PID_SETPOINT+0x1>
    4056:	80 93 f0 29 	sts	0x29F0, r24	; 0x8029f0 <PID_SETPOINT+0x2>
    405a:	90 93 f1 29 	sts	0x29F1, r25	; 0x8029f1 <PID_SETPOINT+0x3>
    405e:	0e 94 86 09 	call	0x130c	; 0x130c <Lclass::PID_callingg() [clone .constprop.38]>
digitalWrite():
    4062:	60 e0       	ldi	r22, 0x00	; 0
    4064:	8b e1       	ldi	r24, 0x1B	; 27
    4066:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
DISP_UPDATE():
    406a:	8b ed       	ldi	r24, 0xDB	; 219
    406c:	9b e2       	ldi	r25, 0x2B	; 43
    406e:	0e 94 ac 0a 	call	0x1558	; 0x1558 <Ticker::update()>
SET_LONG_PRESS_FUNCTION():
    4072:	80 91 ba 28 	lds	r24, 0x28BA	; 0x8028ba <i>
    4076:	90 91 bb 28 	lds	r25, 0x28BB	; 0x8028bb <i+0x1>
    407a:	89 31       	cpi	r24, 0x19	; 25
    407c:	91 05       	cpc	r25, r1
    407e:	1c f5       	brge	.+70     	; 0x40c6 <__RODATA_PM_OFFSET__+0xc6>
DISPLAY_DIGIT1():
    4080:	00 93 f6 28 	sts	0x28F6, r16	; 0x8028f6 <digits1>
    4084:	10 93 f7 28 	sts	0x28F7, r17	; 0x8028f7 <digits1+0x1>
    4088:	00 93 f8 28 	sts	0x28F8, r16	; 0x8028f8 <digits1+0x2>
    408c:	10 93 f9 28 	sts	0x28F9, r17	; 0x8028f9 <digits1+0x3>
    4090:	00 93 fa 28 	sts	0x28FA, r16	; 0x8028fa <digits1+0x4>
    4094:	10 93 fb 28 	sts	0x28FB, r17	; 0x8028fb <digits1+0x5>
    4098:	00 93 fc 28 	sts	0x28FC, r16	; 0x8028fc <digits1+0x6>
    409c:	10 93 fd 28 	sts	0x28FD, r17	; 0x8028fd <digits1+0x7>
SET_LONG_PRESS_FUNCTION():
    40a0:	60 91 07 28 	lds	r22, 0x2807	; 0x802807 <LOW_CAL_VALUE_SET>
    40a4:	70 91 08 28 	lds	r23, 0x2808	; 0x802808 <LOW_CAL_VALUE_SET+0x1>
    40a8:	07 2e       	mov	r0, r23
    40aa:	00 0c       	add	r0, r0
    40ac:	88 0b       	sbc	r24, r24
    40ae:	99 0b       	sbc	r25, r25
    40b0:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Eclass::BREAK_NUMBER2(long) [clone .constprop.47]>
    40b4:	60 92 fe 28 	sts	0x28FE, r6	; 0x8028fe <digits2>
    40b8:	70 92 ff 28 	sts	0x28FF, r7	; 0x8028ff <digits2+0x1>
    40bc:	40 92 00 29 	sts	0x2900, r4	; 0x802900 <digits2+0x2>
    40c0:	50 92 01 29 	sts	0x2901, r5	; 0x802901 <digits2+0x3>
    40c4:	9f cf       	rjmp	.-194    	; 0x4004 <__RODATA_PM_OFFSET__+0x4>
DISPLAY_DIGIT1():
    40c6:	e0 92 f6 28 	sts	0x28F6, r14	; 0x8028f6 <digits1>
    40ca:	f0 92 f7 28 	sts	0x28F7, r15	; 0x8028f7 <digits1+0x1>
    40ce:	c0 92 f8 28 	sts	0x28F8, r12	; 0x8028f8 <digits1+0x2>
    40d2:	d0 92 f9 28 	sts	0x28F9, r13	; 0x8028f9 <digits1+0x3>
    40d6:	a0 92 fa 28 	sts	0x28FA, r10	; 0x8028fa <digits1+0x4>
    40da:	b0 92 fb 28 	sts	0x28FB, r11	; 0x8028fb <digits1+0x5>
    40de:	80 92 fc 28 	sts	0x28FC, r8	; 0x8028fc <digits1+0x6>
    40e2:	90 92 fd 28 	sts	0x28FD, r9	; 0x8028fd <digits1+0x7>
SET_LONG_PRESS_FUNCTION():
    40e6:	c3 97       	sbiw	r24, 0x33	; 51
    40e8:	dc f2       	brlt	.-74     	; 0x40a0 <__RODATA_PM_OFFSET__+0xa0>
    40ea:	10 92 ba 28 	sts	0x28BA, r1	; 0x8028ba <i>
    40ee:	10 92 bb 28 	sts	0x28BB, r1	; 0x8028bb <i+0x1>
    40f2:	d6 cf       	rjmp	.-84     	; 0x40a0 <__RODATA_PM_OFFSET__+0xa0>
digitalWrite():
    40f4:	61 e0       	ldi	r22, 0x01	; 1
    40f6:	81 e2       	ldi	r24, 0x21	; 33
    40f8:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
SET_LONG_PRESS_FUNCTION():
    40fc:	ea e1       	ldi	r30, 0x1A	; 26
    40fe:	ee 2e       	mov	r14, r30
    4100:	f1 2c       	mov	r15, r1
    4102:	f7 e1       	ldi	r31, 0x17	; 23
    4104:	cf 2e       	mov	r12, r31
    4106:	d1 2c       	mov	r13, r1
DISPLAY_DIGIT1():
    4108:	08 e1       	ldi	r16, 0x18	; 24
    410a:	10 e0       	ldi	r17, 0x00	; 0
SET_LONG_PRESS_FUNCTION():
    410c:	aa e0       	ldi	r26, 0x0A	; 10
    410e:	aa 2e       	mov	r10, r26
    4110:	b1 2c       	mov	r11, r1
    4112:	90 90 a1 28 	lds	r9, 0x28A1	; 0x8028a1 <COUNTDOWN_START>
    4116:	80 91 bf 28 	lds	r24, 0x28BF	; 0x8028bf <Mode_Button_Single_Press_In_Settings>
    411a:	81 11       	cpse	r24, r1
    411c:	9b c0       	rjmp	.+310    	; 0x4254 <__RODATA_PM_OFFSET__+0x254>
    411e:	80 91 a4 28 	lds	r24, 0x28A4	; 0x8028a4 <RST_BUTT>
    4122:	88 23       	and	r24, r24
    4124:	09 f4       	brne	.+2      	; 0x4128 <__RODATA_PM_OFFSET__+0x128>
    4126:	96 c0       	rjmp	.+300    	; 0x4254 <__RODATA_PM_OFFSET__+0x254>
    4128:	99 20       	and	r9, r9
    412a:	09 f4       	brne	.+2      	; 0x412e <__RODATA_PM_OFFSET__+0x12e>
    412c:	93 c0       	rjmp	.+294    	; 0x4254 <__RODATA_PM_OFFSET__+0x254>
    412e:	0e 94 9b 04 	call	0x936	; 0x936 <Mclass::RTD_TEMP_CONV() [clone .constprop.36]>
    4132:	60 91 2f 29 	lds	r22, 0x292F	; 0x80292f <SET_LONG_VALUE+0x12>
    4136:	70 91 30 29 	lds	r23, 0x2930	; 0x802930 <SET_LONG_VALUE+0x13>
    413a:	07 2e       	mov	r0, r23
    413c:	00 0c       	add	r0, r0
    413e:	88 0b       	sbc	r24, r24
    4140:	99 0b       	sbc	r25, r25
    4142:	0e 94 04 39 	call	0x7208	; 0x7208 <__floatsisf>
    4146:	60 93 ee 29 	sts	0x29EE, r22	; 0x8029ee <PID_SETPOINT>
    414a:	70 93 ef 29 	sts	0x29EF, r23	; 0x8029ef <PID_SETPOINT+0x1>
    414e:	80 93 f0 29 	sts	0x29F0, r24	; 0x8029f0 <PID_SETPOINT+0x2>
    4152:	90 93 f1 29 	sts	0x29F1, r25	; 0x8029f1 <PID_SETPOINT+0x3>
DISP_UPDATE():
    4156:	8b ed       	ldi	r24, 0xDB	; 219
    4158:	9b e2       	ldi	r25, 0x2B	; 43
    415a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <Ticker::update()>
SET_LONG_PRESS_FUNCTION():
    415e:	0e 94 86 09 	call	0x130c	; 0x130c <Lclass::PID_callingg() [clone .constprop.38]>
digitalWrite():
    4162:	60 e0       	ldi	r22, 0x00	; 0
    4164:	8a e1       	ldi	r24, 0x1A	; 26
    4166:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
    416a:	61 e0       	ldi	r22, 0x01	; 1
    416c:	8b e1       	ldi	r24, 0x1B	; 27
    416e:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
SET_LONG_PRESS_FUNCTION():
    4172:	60 91 07 28 	lds	r22, 0x2807	; 0x802807 <LOW_CAL_VALUE_SET>
    4176:	70 91 08 28 	lds	r23, 0x2808	; 0x802808 <LOW_CAL_VALUE_SET+0x1>
    417a:	07 2e       	mov	r0, r23
    417c:	00 0c       	add	r0, r0
    417e:	88 0b       	sbc	r24, r24
    4180:	99 0b       	sbc	r25, r25
    4182:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Eclass::BREAK_NUMBER2(long) [clone .constprop.47]>
    4186:	e0 92 fe 28 	sts	0x28FE, r14	; 0x8028fe <digits2>
    418a:	f0 92 ff 28 	sts	0x28FF, r15	; 0x8028ff <digits2+0x1>
    418e:	c0 92 00 29 	sts	0x2900, r12	; 0x802900 <digits2+0x2>
    4192:	d0 92 01 29 	sts	0x2901, r13	; 0x802901 <digits2+0x3>
    4196:	81 e0       	ldi	r24, 0x01	; 1
    4198:	80 93 bd 28 	sts	0x28BD, r24	; 0x8028bd <DOT2_1>
    419c:	80 90 ba 28 	lds	r8, 0x28BA	; 0x8028ba <i>
    41a0:	90 90 bb 28 	lds	r9, 0x28BB	; 0x8028bb <i+0x1>
    41a4:	89 e1       	ldi	r24, 0x19	; 25
    41a6:	88 16       	cp	r8, r24
    41a8:	91 04       	cpc	r9, r1
    41aa:	bc f4       	brge	.+46     	; 0x41da <__RODATA_PM_OFFSET__+0x1da>
DISPLAY_DIGIT1():
    41ac:	00 93 f6 28 	sts	0x28F6, r16	; 0x8028f6 <digits1>
    41b0:	10 93 f7 28 	sts	0x28F7, r17	; 0x8028f7 <digits1+0x1>
    41b4:	00 93 f8 28 	sts	0x28F8, r16	; 0x8028f8 <digits1+0x2>
    41b8:	10 93 f9 28 	sts	0x28F9, r17	; 0x8028f9 <digits1+0x3>
    41bc:	00 93 fa 28 	sts	0x28FA, r16	; 0x8028fa <digits1+0x4>
    41c0:	10 93 fb 28 	sts	0x28FB, r17	; 0x8028fb <digits1+0x5>
    41c4:	00 93 fc 28 	sts	0x28FC, r16	; 0x8028fc <digits1+0x6>
    41c8:	10 93 fd 28 	sts	0x28FD, r17	; 0x8028fd <digits1+0x7>
digitalWrite():
    41cc:	60 e0       	ldi	r22, 0x00	; 0
    41ce:	85 e1       	ldi	r24, 0x15	; 21
    41d0:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
SET_LONG_PRESS_FUNCTION():
    41d4:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    41d8:	9c cf       	rjmp	.-200    	; 0x4112 <__RODATA_PM_OFFSET__+0x112>
digitalWrite():
    41da:	61 e0       	ldi	r22, 0x01	; 1
    41dc:	85 e1       	ldi	r24, 0x15	; 21
    41de:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
    41e2:	40 90 ee 28 	lds	r4, 0x28EE	; 0x8028ee <TEMP_DEG_RAW>
    41e6:	50 90 ef 28 	lds	r5, 0x28EF	; 0x8028ef <TEMP_DEG_RAW+0x1>
    41ea:	60 90 f0 28 	lds	r6, 0x28F0	; 0x8028f0 <TEMP_DEG_RAW+0x2>
    41ee:	70 90 f1 28 	lds	r7, 0x28F1	; 0x8028f1 <TEMP_DEG_RAW+0x3>
SET_LONG_PRESS_FUNCTION():
    41f2:	2d ec       	ldi	r18, 0xCD	; 205
    41f4:	3c ec       	ldi	r19, 0xCC	; 204
    41f6:	47 ec       	ldi	r20, 0xC7	; 199
    41f8:	52 e4       	ldi	r21, 0x42	; 66
    41fa:	60 91 f2 28 	lds	r22, 0x28F2	; 0x8028f2 <TEMP_DEG>
    41fe:	70 91 f3 28 	lds	r23, 0x28F3	; 0x8028f3 <TEMP_DEG+0x1>
    4202:	80 91 f4 28 	lds	r24, 0x28F4	; 0x8028f4 <TEMP_DEG+0x2>
    4206:	90 91 f5 28 	lds	r25, 0x28F5	; 0x8028f5 <TEMP_DEG+0x3>
    420a:	0e 94 b4 39 	call	0x7368	; 0x7368 <__gesf2>
    420e:	20 e0       	ldi	r18, 0x00	; 0
    4210:	30 e0       	ldi	r19, 0x00	; 0
    4212:	40 e2       	ldi	r20, 0x20	; 32
    4214:	51 e4       	ldi	r21, 0x41	; 65
    4216:	18 16       	cp	r1, r24
    4218:	24 f0       	brlt	.+8      	; 0x4222 <__RODATA_PM_OFFSET__+0x222>
    421a:	20 e0       	ldi	r18, 0x00	; 0
    421c:	30 e0       	ldi	r19, 0x00	; 0
    421e:	48 ec       	ldi	r20, 0xC8	; 200
    4220:	52 e4       	ldi	r21, 0x42	; 66
    4222:	c3 01       	movw	r24, r6
    4224:	b2 01       	movw	r22, r4
    4226:	0e 94 b8 39 	call	0x7370	; 0x7370 <__mulsf3>
    422a:	0e 94 d1 38 	call	0x71a2	; 0x71a2 <__fixsfsi>
    422e:	0e 94 a0 03 	call	0x740	; 0x740 <Eclass::BREAK_NUMBER1(long) [clone .constprop.46]>
    4232:	81 e0       	ldi	r24, 0x01	; 1
    4234:	80 93 be 28 	sts	0x28BE, r24	; 0x8028be <DOT1_1>
    4238:	a0 92 fc 28 	sts	0x28FC, r10	; 0x8028fc <digits1+0x6>
    423c:	b0 92 fd 28 	sts	0x28FD, r11	; 0x8028fd <digits1+0x7>
    4240:	83 e3       	ldi	r24, 0x33	; 51
    4242:	88 16       	cp	r8, r24
    4244:	91 04       	cpc	r9, r1
    4246:	0c f4       	brge	.+2      	; 0x424a <__RODATA_PM_OFFSET__+0x24a>
    4248:	64 cf       	rjmp	.-312    	; 0x4112 <__RODATA_PM_OFFSET__+0x112>
    424a:	10 92 ba 28 	sts	0x28BA, r1	; 0x8028ba <i>
    424e:	10 92 bb 28 	sts	0x28BB, r1	; 0x8028bb <i+0x1>
    4252:	5f cf       	rjmp	.-322    	; 0x4112 <__RODATA_PM_OFFSET__+0x112>
digitalWrite():
    4254:	60 e0       	ldi	r22, 0x00	; 0
    4256:	81 e2       	ldi	r24, 0x21	; 33
    4258:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
SET_LONG_PRESS_FUNCTION():
    425c:	8b e0       	ldi	r24, 0x0B	; 11
    425e:	90 e0       	ldi	r25, 0x00	; 0
    4260:	91 10       	cpse	r9, r1
    4262:	c2 c0       	rjmp	.+388    	; 0x43e8 <__RODATA_PM_OFFSET__+0x3e8>
    4264:	8d e0       	ldi	r24, 0x0D	; 13
    4266:	90 e0       	ldi	r25, 0x00	; 0
    4268:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <SELECTION_PARAMETER>
    426c:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <SELECTION_PARAMETER+0x1>
    4270:	10 92 bf 28 	sts	0x28BF, r1	; 0x8028bf <Mode_Button_Single_Press_In_Settings>
    4274:	0c 94 e7 15 	jmp	0x2bce	; 0x2bce <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x124>
    4278:	10 92 bc 28 	sts	0x28BC, r1	; 0x8028bc <DOT1_0>
    427c:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    4280:	81 e0       	ldi	r24, 0x01	; 1
    4282:	80 93 bd 28 	sts	0x28BD, r24	; 0x8028bd <DOT2_1>
    4286:	60 91 31 29 	lds	r22, 0x2931	; 0x802931 <SET_LONG_VALUE+0x14>
    428a:	70 91 32 29 	lds	r23, 0x2932	; 0x802932 <SET_LONG_VALUE+0x15>
    428e:	07 2e       	mov	r0, r23
    4290:	00 0c       	add	r0, r0
    4292:	88 0b       	sbc	r24, r24
    4294:	99 0b       	sbc	r25, r25
    4296:	0e 94 04 39 	call	0x7208	; 0x7208 <__floatsisf>
    429a:	60 93 ee 29 	sts	0x29EE, r22	; 0x8029ee <PID_SETPOINT>
    429e:	70 93 ef 29 	sts	0x29EF, r23	; 0x8029ef <PID_SETPOINT+0x1>
    42a2:	80 93 f0 29 	sts	0x29F0, r24	; 0x8029f0 <PID_SETPOINT+0x2>
    42a6:	90 93 f1 29 	sts	0x29F1, r25	; 0x8029f1 <PID_SETPOINT+0x3>
digitalWrite():
    42aa:	61 e0       	ldi	r22, 0x01	; 1
    42ac:	81 e2       	ldi	r24, 0x21	; 33
    42ae:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
DISPLAY_DIGIT1():
    42b2:	3e e1       	ldi	r19, 0x1E	; 30
    42b4:	e3 2e       	mov	r14, r19
    42b6:	f1 2c       	mov	r15, r1
    42b8:	4f e0       	ldi	r20, 0x0F	; 15
    42ba:	c4 2e       	mov	r12, r20
    42bc:	d1 2c       	mov	r13, r1
    42be:	5d e0       	ldi	r21, 0x0D	; 13
    42c0:	a5 2e       	mov	r10, r21
    42c2:	b1 2c       	mov	r11, r1
    42c4:	60 e1       	ldi	r22, 0x10	; 16
    42c6:	86 2e       	mov	r8, r22
    42c8:	91 2c       	mov	r9, r1
    42ca:	08 e1       	ldi	r16, 0x18	; 24
    42cc:	10 e0       	ldi	r17, 0x00	; 0
SET_LONG_PRESS_FUNCTION():
    42ce:	79 e1       	ldi	r23, 0x19	; 25
    42d0:	67 2e       	mov	r6, r23
    42d2:	71 2c       	mov	r7, r1
    42d4:	20 91 ee 29 	lds	r18, 0x29EE	; 0x8029ee <PID_SETPOINT>
    42d8:	30 91 ef 29 	lds	r19, 0x29EF	; 0x8029ef <PID_SETPOINT+0x1>
    42dc:	40 91 f0 29 	lds	r20, 0x29F0	; 0x8029f0 <PID_SETPOINT+0x2>
    42e0:	50 91 f1 29 	lds	r21, 0x29F1	; 0x8029f1 <PID_SETPOINT+0x3>
    42e4:	60 91 f6 29 	lds	r22, 0x29F6	; 0x8029f6 <PID_INPUT>
    42e8:	70 91 f7 29 	lds	r23, 0x29F7	; 0x8029f7 <PID_INPUT+0x1>
    42ec:	80 91 f8 29 	lds	r24, 0x29F8	; 0x8029f8 <PID_INPUT+0x2>
    42f0:	90 91 f9 29 	lds	r25, 0x29F9	; 0x8029f9 <PID_INPUT+0x3>
    42f4:	0e 94 65 38 	call	0x70ca	; 0x70ca <__cmpsf2>
    42f8:	87 ff       	sbrs	r24, 7
    42fa:	64 c0       	rjmp	.+200    	; 0x43c4 <__RODATA_PM_OFFSET__+0x3c4>
    42fc:	80 91 a4 28 	lds	r24, 0x28A4	; 0x8028a4 <RST_BUTT>
    4300:	88 23       	and	r24, r24
    4302:	09 f4       	brne	.+2      	; 0x4306 <__RODATA_PM_OFFSET__+0x306>
    4304:	5f c0       	rjmp	.+190    	; 0x43c4 <__RODATA_PM_OFFSET__+0x3c4>
    4306:	0e 94 9b 04 	call	0x936	; 0x936 <Mclass::RTD_TEMP_CONV() [clone .constprop.36]>
    430a:	60 91 31 29 	lds	r22, 0x2931	; 0x802931 <SET_LONG_VALUE+0x14>
    430e:	70 91 32 29 	lds	r23, 0x2932	; 0x802932 <SET_LONG_VALUE+0x15>
    4312:	07 2e       	mov	r0, r23
    4314:	00 0c       	add	r0, r0
    4316:	88 0b       	sbc	r24, r24
    4318:	99 0b       	sbc	r25, r25
    431a:	0e 94 04 39 	call	0x7208	; 0x7208 <__floatsisf>
    431e:	60 93 ee 29 	sts	0x29EE, r22	; 0x8029ee <PID_SETPOINT>
    4322:	70 93 ef 29 	sts	0x29EF, r23	; 0x8029ef <PID_SETPOINT+0x1>
    4326:	80 93 f0 29 	sts	0x29F0, r24	; 0x8029f0 <PID_SETPOINT+0x2>
    432a:	90 93 f1 29 	sts	0x29F1, r25	; 0x8029f1 <PID_SETPOINT+0x3>
    432e:	0e 94 86 09 	call	0x130c	; 0x130c <Lclass::PID_callingg() [clone .constprop.38]>
DISP_UPDATE():
    4332:	8b ed       	ldi	r24, 0xDB	; 219
    4334:	9b e2       	ldi	r25, 0x2B	; 43
    4336:	0e 94 ac 0a 	call	0x1558	; 0x1558 <Ticker::update()>
digitalWrite():
    433a:	60 e0       	ldi	r22, 0x00	; 0
    433c:	8b e1       	ldi	r24, 0x1B	; 27
    433e:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
SET_LONG_PRESS_FUNCTION():
    4342:	80 91 ba 28 	lds	r24, 0x28BA	; 0x8028ba <i>
    4346:	90 91 bb 28 	lds	r25, 0x28BB	; 0x8028bb <i+0x1>
    434a:	89 31       	cpi	r24, 0x19	; 25
    434c:	91 05       	cpc	r25, r1
    434e:	1c f5       	brge	.+70     	; 0x4396 <__RODATA_PM_OFFSET__+0x396>
DISPLAY_DIGIT1():
    4350:	00 93 f6 28 	sts	0x28F6, r16	; 0x8028f6 <digits1>
    4354:	10 93 f7 28 	sts	0x28F7, r17	; 0x8028f7 <digits1+0x1>
    4358:	00 93 f8 28 	sts	0x28F8, r16	; 0x8028f8 <digits1+0x2>
    435c:	10 93 f9 28 	sts	0x28F9, r17	; 0x8028f9 <digits1+0x3>
    4360:	00 93 fa 28 	sts	0x28FA, r16	; 0x8028fa <digits1+0x4>
    4364:	10 93 fb 28 	sts	0x28FB, r17	; 0x8028fb <digits1+0x5>
    4368:	00 93 fc 28 	sts	0x28FC, r16	; 0x8028fc <digits1+0x6>
    436c:	10 93 fd 28 	sts	0x28FD, r17	; 0x8028fd <digits1+0x7>
SET_LONG_PRESS_FUNCTION():
    4370:	60 91 b2 28 	lds	r22, 0x28B2	; 0x8028b2 <HIGH_CAL_VALUE_SET>
    4374:	70 91 b3 28 	lds	r23, 0x28B3	; 0x8028b3 <HIGH_CAL_VALUE_SET+0x1>
    4378:	07 2e       	mov	r0, r23
    437a:	00 0c       	add	r0, r0
    437c:	88 0b       	sbc	r24, r24
    437e:	99 0b       	sbc	r25, r25
    4380:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Eclass::BREAK_NUMBER2(long) [clone .constprop.47]>
    4384:	e0 92 fe 28 	sts	0x28FE, r14	; 0x8028fe <digits2>
    4388:	f0 92 ff 28 	sts	0x28FF, r15	; 0x8028ff <digits2+0x1>
    438c:	60 92 00 29 	sts	0x2900, r6	; 0x802900 <digits2+0x2>
    4390:	70 92 01 29 	sts	0x2901, r7	; 0x802901 <digits2+0x3>
    4394:	9f cf       	rjmp	.-194    	; 0x42d4 <__RODATA_PM_OFFSET__+0x2d4>
DISPLAY_DIGIT1():
    4396:	e0 92 f6 28 	sts	0x28F6, r14	; 0x8028f6 <digits1>
    439a:	f0 92 f7 28 	sts	0x28F7, r15	; 0x8028f7 <digits1+0x1>
    439e:	c0 92 f8 28 	sts	0x28F8, r12	; 0x8028f8 <digits1+0x2>
    43a2:	d0 92 f9 28 	sts	0x28F9, r13	; 0x8028f9 <digits1+0x3>
    43a6:	a0 92 fa 28 	sts	0x28FA, r10	; 0x8028fa <digits1+0x4>
    43aa:	b0 92 fb 28 	sts	0x28FB, r11	; 0x8028fb <digits1+0x5>
    43ae:	80 92 fc 28 	sts	0x28FC, r8	; 0x8028fc <digits1+0x6>
    43b2:	90 92 fd 28 	sts	0x28FD, r9	; 0x8028fd <digits1+0x7>
SET_LONG_PRESS_FUNCTION():
    43b6:	c3 97       	sbiw	r24, 0x33	; 51
    43b8:	dc f2       	brlt	.-74     	; 0x4370 <__RODATA_PM_OFFSET__+0x370>
    43ba:	10 92 ba 28 	sts	0x28BA, r1	; 0x8028ba <i>
    43be:	10 92 bb 28 	sts	0x28BB, r1	; 0x8028bb <i+0x1>
    43c2:	d6 cf       	rjmp	.-84     	; 0x4370 <__RODATA_PM_OFFSET__+0x370>
digitalWrite():
    43c4:	60 e0       	ldi	r22, 0x00	; 0
    43c6:	81 e2       	ldi	r24, 0x21	; 33
    43c8:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
SET_LONG_PRESS_FUNCTION():
    43cc:	8e e1       	ldi	r24, 0x1E	; 30
    43ce:	90 e0       	ldi	r25, 0x00	; 0
    43d0:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <SET_MIN>
    43d4:	90 93 a3 28 	sts	0x28A3, r25	; 0x8028a3 <SET_MIN+0x1>
    43d8:	81 e0       	ldi	r24, 0x01	; 1
    43da:	80 93 a1 28 	sts	0x28A1, r24	; 0x8028a1 <COUNTDOWN_START>
    43de:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <SELECTION_PARAMETER>
    43e2:	90 91 0a 28 	lds	r25, 0x280A	; 0x80280a <SELECTION_PARAMETER+0x1>
    43e6:	01 96       	adiw	r24, 0x01	; 1
    43e8:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <SELECTION_PARAMETER>
    43ec:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <SELECTION_PARAMETER+0x1>
    43f0:	0c 94 e7 15 	jmp	0x2bce	; 0x2bce <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x124>
digitalWrite():
    43f4:	61 e0       	ldi	r22, 0x01	; 1
    43f6:	81 e2       	ldi	r24, 0x21	; 33
    43f8:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
SET_LONG_PRESS_FUNCTION():
    43fc:	8e e1       	ldi	r24, 0x1E	; 30
    43fe:	e8 2e       	mov	r14, r24
    4400:	f1 2c       	mov	r15, r1
    4402:	99 e1       	ldi	r25, 0x19	; 25
    4404:	c9 2e       	mov	r12, r25
    4406:	d1 2c       	mov	r13, r1
    4408:	2a e0       	ldi	r18, 0x0A	; 10
    440a:	a2 2e       	mov	r10, r18
    440c:	b1 2c       	mov	r11, r1
DISPLAY_DIGIT1():
    440e:	08 e1       	ldi	r16, 0x18	; 24
    4410:	10 e0       	ldi	r17, 0x00	; 0
    4412:	90 90 a1 28 	lds	r9, 0x28A1	; 0x8028a1 <COUNTDOWN_START>
SET_LONG_PRESS_FUNCTION():
    4416:	80 91 bf 28 	lds	r24, 0x28BF	; 0x8028bf <Mode_Button_Single_Press_In_Settings>
    441a:	81 11       	cpse	r24, r1
    441c:	a4 c0       	rjmp	.+328    	; 0x4566 <__RODATA_PM_OFFSET__+0x566>
    441e:	80 91 a4 28 	lds	r24, 0x28A4	; 0x8028a4 <RST_BUTT>
    4422:	88 23       	and	r24, r24
    4424:	09 f4       	brne	.+2      	; 0x4428 <__RODATA_PM_OFFSET__+0x428>
    4426:	9f c0       	rjmp	.+318    	; 0x4566 <__RODATA_PM_OFFSET__+0x566>
    4428:	99 20       	and	r9, r9
    442a:	09 f4       	brne	.+2      	; 0x442e <__RODATA_PM_OFFSET__+0x42e>
    442c:	9c c0       	rjmp	.+312    	; 0x4566 <__RODATA_PM_OFFSET__+0x566>
    442e:	0e 94 9b 04 	call	0x936	; 0x936 <Mclass::RTD_TEMP_CONV() [clone .constprop.36]>
    4432:	60 91 31 29 	lds	r22, 0x2931	; 0x802931 <SET_LONG_VALUE+0x14>
    4436:	70 91 32 29 	lds	r23, 0x2932	; 0x802932 <SET_LONG_VALUE+0x15>
    443a:	07 2e       	mov	r0, r23
    443c:	00 0c       	add	r0, r0
    443e:	88 0b       	sbc	r24, r24
    4440:	99 0b       	sbc	r25, r25
    4442:	0e 94 04 39 	call	0x7208	; 0x7208 <__floatsisf>
    4446:	60 93 ee 29 	sts	0x29EE, r22	; 0x8029ee <PID_SETPOINT>
    444a:	70 93 ef 29 	sts	0x29EF, r23	; 0x8029ef <PID_SETPOINT+0x1>
    444e:	80 93 f0 29 	sts	0x29F0, r24	; 0x8029f0 <PID_SETPOINT+0x2>
    4452:	90 93 f1 29 	sts	0x29F1, r25	; 0x8029f1 <PID_SETPOINT+0x3>
    4456:	0e 94 86 09 	call	0x130c	; 0x130c <Lclass::PID_callingg() [clone .constprop.38]>
DISP_UPDATE():
    445a:	8b ed       	ldi	r24, 0xDB	; 219
    445c:	9b e2       	ldi	r25, 0x2B	; 43
    445e:	0e 94 ac 0a 	call	0x1558	; 0x1558 <Ticker::update()>
digitalWrite():
    4462:	60 e0       	ldi	r22, 0x00	; 0
    4464:	8a e1       	ldi	r24, 0x1A	; 26
    4466:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
    446a:	61 e0       	ldi	r22, 0x01	; 1
    446c:	8b e1       	ldi	r24, 0x1B	; 27
    446e:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
SET_LONG_PRESS_FUNCTION():
    4472:	60 91 b2 28 	lds	r22, 0x28B2	; 0x8028b2 <HIGH_CAL_VALUE_SET>
    4476:	70 91 b3 28 	lds	r23, 0x28B3	; 0x8028b3 <HIGH_CAL_VALUE_SET+0x1>
    447a:	07 2e       	mov	r0, r23
    447c:	00 0c       	add	r0, r0
    447e:	88 0b       	sbc	r24, r24
    4480:	99 0b       	sbc	r25, r25
    4482:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Eclass::BREAK_NUMBER2(long) [clone .constprop.47]>
    4486:	e0 92 fe 28 	sts	0x28FE, r14	; 0x8028fe <digits2>
    448a:	f0 92 ff 28 	sts	0x28FF, r15	; 0x8028ff <digits2+0x1>
    448e:	c0 92 00 29 	sts	0x2900, r12	; 0x802900 <digits2+0x2>
    4492:	d0 92 01 29 	sts	0x2901, r13	; 0x802901 <digits2+0x3>
    4496:	99 24       	eor	r9, r9
    4498:	93 94       	inc	r9
    449a:	90 92 bd 28 	sts	0x28BD, r9	; 0x8028bd <DOT2_1>
    449e:	80 91 ba 28 	lds	r24, 0x28BA	; 0x8028ba <i>
    44a2:	90 91 bb 28 	lds	r25, 0x28BB	; 0x8028bb <i+0x1>
    44a6:	49 97       	sbiw	r24, 0x19	; 25
    44a8:	04 f5       	brge	.+64     	; 0x44ea <__RODATA_PM_OFFSET__+0x4ea>
DISPLAY_DIGIT1():
    44aa:	00 93 f6 28 	sts	0x28F6, r16	; 0x8028f6 <digits1>
    44ae:	10 93 f7 28 	sts	0x28F7, r17	; 0x8028f7 <digits1+0x1>
    44b2:	00 93 f8 28 	sts	0x28F8, r16	; 0x8028f8 <digits1+0x2>
    44b6:	10 93 f9 28 	sts	0x28F9, r17	; 0x8028f9 <digits1+0x3>
    44ba:	00 93 fa 28 	sts	0x28FA, r16	; 0x8028fa <digits1+0x4>
    44be:	10 93 fb 28 	sts	0x28FB, r17	; 0x8028fb <digits1+0x5>
    44c2:	00 93 fc 28 	sts	0x28FC, r16	; 0x8028fc <digits1+0x6>
    44c6:	10 93 fd 28 	sts	0x28FD, r17	; 0x8028fd <digits1+0x7>
digitalWrite():
    44ca:	60 e0       	ldi	r22, 0x00	; 0
    44cc:	85 e1       	ldi	r24, 0x15	; 21
    44ce:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
SET_LONG_PRESS_FUNCTION():
    44d2:	80 91 ba 28 	lds	r24, 0x28BA	; 0x8028ba <i>
    44d6:	90 91 bb 28 	lds	r25, 0x28BB	; 0x8028bb <i+0x1>
    44da:	c3 97       	sbiw	r24, 0x33	; 51
    44dc:	0c f4       	brge	.+2      	; 0x44e0 <__RODATA_PM_OFFSET__+0x4e0>
    44de:	99 cf       	rjmp	.-206    	; 0x4412 <__RODATA_PM_OFFSET__+0x412>
    44e0:	10 92 ba 28 	sts	0x28BA, r1	; 0x8028ba <i>
    44e4:	10 92 bb 28 	sts	0x28BB, r1	; 0x8028bb <i+0x1>
    44e8:	94 cf       	rjmp	.-216    	; 0x4412 <__RODATA_PM_OFFSET__+0x412>
digitalWrite():
    44ea:	61 e0       	ldi	r22, 0x01	; 1
    44ec:	85 e1       	ldi	r24, 0x15	; 21
    44ee:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
    44f2:	40 90 ee 28 	lds	r4, 0x28EE	; 0x8028ee <TEMP_DEG_RAW>
    44f6:	50 90 ef 28 	lds	r5, 0x28EF	; 0x8028ef <TEMP_DEG_RAW+0x1>
    44fa:	60 90 f0 28 	lds	r6, 0x28F0	; 0x8028f0 <TEMP_DEG_RAW+0x2>
    44fe:	70 90 f1 28 	lds	r7, 0x28F1	; 0x8028f1 <TEMP_DEG_RAW+0x3>
SET_LONG_PRESS_FUNCTION():
    4502:	2d ec       	ldi	r18, 0xCD	; 205
    4504:	3c ec       	ldi	r19, 0xCC	; 204
    4506:	47 ec       	ldi	r20, 0xC7	; 199
    4508:	52 e4       	ldi	r21, 0x42	; 66
    450a:	60 91 f2 28 	lds	r22, 0x28F2	; 0x8028f2 <TEMP_DEG>
    450e:	70 91 f3 28 	lds	r23, 0x28F3	; 0x8028f3 <TEMP_DEG+0x1>
    4512:	80 91 f4 28 	lds	r24, 0x28F4	; 0x8028f4 <TEMP_DEG+0x2>
    4516:	90 91 f5 28 	lds	r25, 0x28F5	; 0x8028f5 <TEMP_DEG+0x3>
    451a:	0e 94 b4 39 	call	0x7368	; 0x7368 <__gesf2>
    451e:	18 16       	cp	r1, r24
    4520:	9c f4       	brge	.+38     	; 0x4548 <__RODATA_PM_OFFSET__+0x548>
    4522:	20 e0       	ldi	r18, 0x00	; 0
    4524:	30 e0       	ldi	r19, 0x00	; 0
    4526:	40 e2       	ldi	r20, 0x20	; 32
    4528:	51 e4       	ldi	r21, 0x41	; 65
    452a:	c3 01       	movw	r24, r6
    452c:	b2 01       	movw	r22, r4
    452e:	0e 94 b8 39 	call	0x7370	; 0x7370 <__mulsf3>
    4532:	0e 94 d1 38 	call	0x71a2	; 0x71a2 <__fixsfsi>
    4536:	0e 94 a0 03 	call	0x740	; 0x740 <Eclass::BREAK_NUMBER1(long) [clone .constprop.46]>
    453a:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    453e:	a0 92 fc 28 	sts	0x28FC, r10	; 0x8028fc <digits1+0x6>
    4542:	b0 92 fd 28 	sts	0x28FD, r11	; 0x8028fd <digits1+0x7>
    4546:	c5 cf       	rjmp	.-118    	; 0x44d2 <__RODATA_PM_OFFSET__+0x4d2>
    4548:	20 e0       	ldi	r18, 0x00	; 0
    454a:	30 e0       	ldi	r19, 0x00	; 0
    454c:	48 ec       	ldi	r20, 0xC8	; 200
    454e:	52 e4       	ldi	r21, 0x42	; 66
    4550:	c3 01       	movw	r24, r6
    4552:	b2 01       	movw	r22, r4
    4554:	0e 94 b8 39 	call	0x7370	; 0x7370 <__mulsf3>
    4558:	0e 94 d1 38 	call	0x71a2	; 0x71a2 <__fixsfsi>
    455c:	0e 94 a0 03 	call	0x740	; 0x740 <Eclass::BREAK_NUMBER1(long) [clone .constprop.46]>
    4560:	90 92 be 28 	sts	0x28BE, r9	; 0x8028be <DOT1_1>
    4564:	ec cf       	rjmp	.-40     	; 0x453e <__RODATA_PM_OFFSET__+0x53e>
digitalWrite():
    4566:	60 e0       	ldi	r22, 0x00	; 0
    4568:	81 e2       	ldi	r24, 0x21	; 33
    456a:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
SET_LONG_PRESS_FUNCTION():
    456e:	10 92 ee 29 	sts	0x29EE, r1	; 0x8029ee <PID_SETPOINT>
    4572:	10 92 ef 29 	sts	0x29EF, r1	; 0x8029ef <PID_SETPOINT+0x1>
    4576:	10 92 f0 29 	sts	0x29F0, r1	; 0x8029f0 <PID_SETPOINT+0x2>
    457a:	10 92 f1 29 	sts	0x29F1, r1	; 0x8029f1 <PID_SETPOINT+0x3>
    457e:	99 20       	and	r9, r9
    4580:	19 f0       	breq	.+6      	; 0x4588 <__RODATA_PM_OFFSET__+0x588>
    4582:	8d e0       	ldi	r24, 0x0D	; 13
    4584:	90 e0       	ldi	r25, 0x00	; 0
    4586:	30 cf       	rjmp	.-416    	; 0x43e8 <__RODATA_PM_OFFSET__+0x3e8>
    4588:	10 92 50 29 	sts	0x2950, r1	; 0x802950 <LONG_PRESS>
    458c:	71 ce       	rjmp	.-798    	; 0x4270 <__RODATA_PM_OFFSET__+0x270>
    458e:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <DOT2_1>
    4592:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    4596:	80 91 ba 28 	lds	r24, 0x28BA	; 0x8028ba <i>
    459a:	90 91 bb 28 	lds	r25, 0x28BB	; 0x8028bb <i+0x1>
    459e:	88 3c       	cpi	r24, 0xC8	; 200
    45a0:	91 05       	cpc	r25, r1
    45a2:	2c f5       	brge	.+74     	; 0x45ee <__RODATA_PM_OFFSET__+0x5ee>
DISPLAY_DIGIT2():
    45a4:	8a e0       	ldi	r24, 0x0A	; 10
    45a6:	90 e0       	ldi	r25, 0x00	; 0
    45a8:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    45ac:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    45b0:	8d e0       	ldi	r24, 0x0D	; 13
    45b2:	90 e0       	ldi	r25, 0x00	; 0
    45b4:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    45b8:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    45bc:	2a e1       	ldi	r18, 0x1A	; 26
    45be:	30 e0       	ldi	r19, 0x00	; 0
    45c0:	20 93 02 29 	sts	0x2902, r18	; 0x802902 <digits2+0x4>
    45c4:	30 93 03 29 	sts	0x2903, r19	; 0x802903 <digits2+0x5>
    45c8:	2e e0       	ldi	r18, 0x0E	; 14
    45ca:	30 e0       	ldi	r19, 0x00	; 0
    45cc:	20 93 04 29 	sts	0x2904, r18	; 0x802904 <digits2+0x6>
    45d0:	30 93 05 29 	sts	0x2905, r19	; 0x802905 <digits2+0x7>
DISPLAY_DIGIT1():
    45d4:	2c e0       	ldi	r18, 0x0C	; 12
    45d6:	30 e0       	ldi	r19, 0x00	; 0
    45d8:	20 93 f6 28 	sts	0x28F6, r18	; 0x8028f6 <digits1>
    45dc:	30 93 f7 28 	sts	0x28F7, r19	; 0x8028f7 <digits1+0x1>
    45e0:	80 93 f8 28 	sts	0x28F8, r24	; 0x8028f8 <digits1+0x2>
    45e4:	90 93 f9 28 	sts	0x28F9, r25	; 0x8028f9 <digits1+0x3>
    45e8:	8c e1       	ldi	r24, 0x1C	; 28
    45ea:	90 e0       	ldi	r25, 0x00	; 0
    45ec:	73 cb       	rjmp	.-2330   	; 0x3cd4 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0x122a>
SET_LONG_PRESS_FUNCTION():
    45ee:	10 92 ad 28 	sts	0x28AD, r1	; 0x8028ad <Service_Menu>
    45f2:	eb c9       	rjmp	.-3114   	; 0x39ca <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xf20>
    45f4:	10 92 bc 28 	sts	0x28BC, r1	; 0x8028bc <DOT1_0>
    45f8:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    45fc:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <DOT2_1>
    4600:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
    4604:	80 91 ed 28 	lds	r24, 0x28ED	; 0x8028ed <select_heating_type>
    4608:	90 e0       	ldi	r25, 0x00	; 0
    460a:	80 93 3d 29 	sts	0x293D, r24	; 0x80293d <SET_LONG_VALUE+0x20>
    460e:	90 93 3e 29 	sts	0x293E, r25	; 0x80293e <SET_LONG_VALUE+0x21>
DISPLAY_DIGIT2():
    4612:	8e e1       	ldi	r24, 0x1E	; 30
    4614:	90 e0       	ldi	r25, 0x00	; 0
    4616:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    461a:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    461e:	2f e0       	ldi	r18, 0x0F	; 15
    4620:	30 e0       	ldi	r19, 0x00	; 0
    4622:	20 93 00 29 	sts	0x2900, r18	; 0x802900 <digits2+0x2>
    4626:	30 93 01 29 	sts	0x2901, r19	; 0x802901 <digits2+0x3>
    462a:	8d e0       	ldi	r24, 0x0D	; 13
    462c:	90 e0       	ldi	r25, 0x00	; 0
    462e:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <digits2+0x4>
    4632:	90 93 03 29 	sts	0x2903, r25	; 0x802903 <digits2+0x5>
    4636:	80 e1       	ldi	r24, 0x10	; 16
    4638:	90 e0       	ldi	r25, 0x00	; 0
    463a:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    463e:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
DISPLAY_DIGIT1():
    4642:	4c e0       	ldi	r20, 0x0C	; 12
    4644:	50 e0       	ldi	r21, 0x00	; 0
    4646:	40 93 f6 28 	sts	0x28F6, r20	; 0x8028f6 <digits1>
    464a:	50 93 f7 28 	sts	0x28F7, r21	; 0x8028f7 <digits1+0x1>
    464e:	20 93 f8 28 	sts	0x28F8, r18	; 0x8028f8 <digits1+0x2>
    4652:	30 93 f9 28 	sts	0x28F9, r19	; 0x8028f9 <digits1+0x3>
    4656:	2a e1       	ldi	r18, 0x1A	; 26
    4658:	30 e0       	ldi	r19, 0x00	; 0
    465a:	89 c8       	rjmp	.-3822   	; 0x376e <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xcc4>
SET_LONG_PRESS_FUNCTION():
    465c:	10 92 bc 28 	sts	0x28BC, r1	; 0x8028bc <DOT1_0>
    4660:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    4664:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <DOT2_1>
    4668:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
DISPLAY_DIGIT2():
    466c:	8a e1       	ldi	r24, 0x1A	; 26
    466e:	90 e0       	ldi	r25, 0x00	; 0
    4670:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    4674:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    4678:	87 e1       	ldi	r24, 0x17	; 23
    467a:	90 e0       	ldi	r25, 0x00	; 0
    467c:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    4680:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    4684:	8b e1       	ldi	r24, 0x1B	; 27
    4686:	90 e0       	ldi	r25, 0x00	; 0
    4688:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <digits2+0x4>
    468c:	90 93 03 29 	sts	0x2903, r25	; 0x802903 <digits2+0x5>
    4690:	88 e1       	ldi	r24, 0x18	; 24
    4692:	90 e0       	ldi	r25, 0x00	; 0
    4694:	37 c8       	rjmp	.-3986   	; 0x3704 <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xc5a>
SET_LONG_PRESS_FUNCTION():
    4696:	10 92 bc 28 	sts	0x28BC, r1	; 0x8028bc <DOT1_0>
    469a:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    469e:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <DOT2_1>
    46a2:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
DISPLAY_DIGIT2():
    46a6:	85 e1       	ldi	r24, 0x15	; 21
    46a8:	90 e0       	ldi	r25, 0x00	; 0
    46aa:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    46ae:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    46b2:	8d e0       	ldi	r24, 0x0D	; 13
    46b4:	90 e0       	ldi	r25, 0x00	; 0
    46b6:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    46ba:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    46be:	8a e0       	ldi	r24, 0x0A	; 10
    46c0:	90 e0       	ldi	r25, 0x00	; 0
    46c2:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <digits2+0x4>
    46c6:	90 93 03 29 	sts	0x2903, r25	; 0x802903 <digits2+0x5>
    46ca:	80 e1       	ldi	r24, 0x10	; 16
    46cc:	90 e0       	ldi	r25, 0x00	; 0
    46ce:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    46d2:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
DISPLAY_DIGIT1():
    46d6:	21 e1       	ldi	r18, 0x11	; 17
    46d8:	30 e0       	ldi	r19, 0x00	; 0
    46da:	20 93 f6 28 	sts	0x28F6, r18	; 0x8028f6 <digits1>
    46de:	30 93 f7 28 	sts	0x28F7, r19	; 0x8028f7 <digits1+0x1>
    46e2:	2f e0       	ldi	r18, 0x0F	; 15
    46e4:	30 e0       	ldi	r19, 0x00	; 0
    46e6:	20 93 f8 28 	sts	0x28F8, r18	; 0x8028f8 <digits1+0x2>
    46ea:	30 93 f9 28 	sts	0x28F9, r19	; 0x8028f9 <digits1+0x3>
    46ee:	2c e0       	ldi	r18, 0x0C	; 12
    46f0:	30 e0       	ldi	r19, 0x00	; 0
    46f2:	3d c8       	rjmp	.-3974   	; 0x376e <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]+0xcc4>

000046f4 <shiftOut.constprop.7>:
shiftOut():
    46f4:	ef 92       	push	r14
    46f6:	ff 92       	push	r15
    46f8:	0f 93       	push	r16
    46fa:	1f 93       	push	r17
    46fc:	cf 93       	push	r28
    46fe:	df 93       	push	r29
    4700:	e8 2e       	mov	r14, r24
    4702:	f6 2e       	mov	r15, r22
    4704:	d0 e0       	ldi	r29, 0x00	; 0
    4706:	c0 e0       	ldi	r28, 0x00	; 0
    4708:	04 2f       	mov	r16, r20
    470a:	10 e0       	ldi	r17, 0x00	; 0
    470c:	b8 01       	movw	r22, r16
    470e:	0c 2e       	mov	r0, r28
    4710:	02 c0       	rjmp	.+4      	; 0x4716 <shiftOut.constprop.7+0x22>
    4712:	75 95       	asr	r23
    4714:	67 95       	ror	r22
    4716:	0a 94       	dec	r0
    4718:	e2 f7       	brpl	.-8      	; 0x4712 <shiftOut.constprop.7+0x1e>
    471a:	61 70       	andi	r22, 0x01	; 1
    471c:	8e 2d       	mov	r24, r14
    471e:	0e 94 54 08 	call	0x10a8	; 0x10a8 <digitalWrite>
    4722:	61 e0       	ldi	r22, 0x01	; 1
    4724:	8f 2d       	mov	r24, r15
    4726:	0e 94 54 08 	call	0x10a8	; 0x10a8 <digitalWrite>
    472a:	60 e0       	ldi	r22, 0x00	; 0
    472c:	8f 2d       	mov	r24, r15
    472e:	0e 94 54 08 	call	0x10a8	; 0x10a8 <digitalWrite>
    4732:	21 96       	adiw	r28, 0x01	; 1
    4734:	c8 30       	cpi	r28, 0x08	; 8
    4736:	d1 05       	cpc	r29, r1
    4738:	49 f7       	brne	.-46     	; 0x470c <shiftOut.constprop.7+0x18>
    473a:	df 91       	pop	r29
    473c:	cf 91       	pop	r28
    473e:	1f 91       	pop	r17
    4740:	0f 91       	pop	r16
    4742:	ff 90       	pop	r15
    4744:	ef 90       	pop	r14
    4746:	08 95       	ret

00004748 <DISP_REFRESH()>:
DISP_REFRESH():
    4748:	0f 93       	push	r16
    474a:	1f 93       	push	r17
    474c:	cf 93       	push	r28
    474e:	df 93       	push	r29
    4750:	0e 94 8b 08 	call	0x1116	; 0x1116 <Eclass::cathode_high1() [clone .constprop.6]>
    4754:	0e 94 97 08 	call	0x112e	; 0x112e <Eclass::cathode_high2() [clone .constprop.4]>
DISPLAY_NUMBER2():
    4758:	0e 94 97 08 	call	0x112e	; 0x112e <Eclass::cathode_high2() [clone .constprop.4]>
    475c:	60 e0       	ldi	r22, 0x00	; 0
    475e:	80 e2       	ldi	r24, 0x20	; 32
    4760:	0e 94 54 08 	call	0x10a8	; 0x10a8 <digitalWrite>
    4764:	c0 91 35 28 	lds	r28, 0x2835	; 0x802835 <count2>
    4768:	d0 91 36 28 	lds	r29, 0x2836	; 0x802836 <count2+0x1>
    476c:	80 91 9a 28 	lds	r24, 0x289A	; 0x80289a <DOT2_0>
    4770:	8e 01       	movw	r16, r28
    4772:	00 0f       	add	r16, r16
    4774:	11 1f       	adc	r17, r17
    4776:	88 23       	and	r24, r24
    4778:	31 f0       	breq	.+12     	; 0x4786 <DISP_REFRESH()+0x3e>
    477a:	e0 91 fe 28 	lds	r30, 0x28FE	; 0x8028fe <digits2>
    477e:	f0 91 ff 28 	lds	r31, 0x28FF	; 0x8028ff <digits2+0x1>
    4782:	20 97       	sbiw	r28, 0x00	; 0
    4784:	c1 f0       	breq	.+48     	; 0x47b6 <DISP_REFRESH()+0x6e>
    4786:	80 91 bd 28 	lds	r24, 0x28BD	; 0x8028bd <DOT2_1>
    478a:	88 23       	and	r24, r24
    478c:	39 f0       	breq	.+14     	; 0x479c <DISP_REFRESH()+0x54>
    478e:	e0 91 00 29 	lds	r30, 0x2900	; 0x802900 <digits2+0x2>
    4792:	f0 91 01 29 	lds	r31, 0x2901	; 0x802901 <digits2+0x3>
    4796:	c1 30       	cpi	r28, 0x01	; 1
    4798:	d1 05       	cpc	r29, r1
    479a:	69 f0       	breq	.+26     	; 0x47b6 <DISP_REFRESH()+0x6e>
    479c:	80 91 99 28 	lds	r24, 0x2899	; 0x802899 <DOT2_2>
    47a0:	88 23       	and	r24, r24
    47a2:	09 f4       	brne	.+2      	; 0x47a6 <DISP_REFRESH()+0x5e>
    47a4:	80 c0       	rjmp	.+256    	; 0x48a6 <DISP_REFRESH()+0x15e>
    47a6:	c2 30       	cpi	r28, 0x02	; 2
    47a8:	d1 05       	cpc	r29, r1
    47aa:	09 f0       	breq	.+2      	; 0x47ae <DISP_REFRESH()+0x66>
    47ac:	7c c0       	rjmp	.+248    	; 0x48a6 <DISP_REFRESH()+0x15e>
    47ae:	e0 91 02 29 	lds	r30, 0x2902	; 0x802902 <digits2+0x4>
    47b2:	f0 91 03 29 	lds	r31, 0x2903	; 0x802903 <digits2+0x5>
    47b6:	e2 59       	subi	r30, 0x92	; 146
    47b8:	fa 44       	sbci	r31, 0x4A	; 74
    47ba:	40 81       	ld	r20, Z
    47bc:	41 60       	ori	r20, 0x01	; 1
    47be:	6e e1       	ldi	r22, 0x1E	; 30
    47c0:	8f e1       	ldi	r24, 0x1F	; 31
    47c2:	98 df       	rcall	.-208    	; 0x46f4 <shiftOut.constprop.7>
    47c4:	f8 01       	movw	r30, r16
    47c6:	e6 5a       	subi	r30, 0xA6	; 166
    47c8:	fa 44       	sbci	r31, 0x4A	; 74
    47ca:	60 e0       	ldi	r22, 0x00	; 0
    47cc:	80 81       	ld	r24, Z
    47ce:	0e 94 54 08 	call	0x10a8	; 0x10a8 <digitalWrite>
    47d2:	61 e0       	ldi	r22, 0x01	; 1
    47d4:	80 e2       	ldi	r24, 0x20	; 32
    47d6:	0e 94 54 08 	call	0x10a8	; 0x10a8 <digitalWrite>
    47da:	21 96       	adiw	r28, 0x01	; 1
    47dc:	c4 30       	cpi	r28, 0x04	; 4
    47de:	d1 05       	cpc	r29, r1
    47e0:	0c f0       	brlt	.+2      	; 0x47e4 <DISP_REFRESH()+0x9c>
    47e2:	6b c0       	rjmp	.+214    	; 0x48ba <DISP_REFRESH()+0x172>
    47e4:	c0 93 35 28 	sts	0x2835, r28	; 0x802835 <count2>
    47e8:	d0 93 36 28 	sts	0x2836, r29	; 0x802836 <count2+0x1>
DISPLAY_NUMBER1():
    47ec:	0e 94 8b 08 	call	0x1116	; 0x1116 <Eclass::cathode_high1() [clone .constprop.6]>
    47f0:	60 e0       	ldi	r22, 0x00	; 0
    47f2:	83 e1       	ldi	r24, 0x13	; 19
    47f4:	0e 94 54 08 	call	0x10a8	; 0x10a8 <digitalWrite>
    47f8:	c0 91 37 28 	lds	r28, 0x2837	; 0x802837 <count1>
    47fc:	d0 91 38 28 	lds	r29, 0x2838	; 0x802838 <count1+0x1>
    4800:	80 91 bc 28 	lds	r24, 0x28BC	; 0x8028bc <DOT1_0>
    4804:	8e 01       	movw	r16, r28
    4806:	00 0f       	add	r16, r16
    4808:	11 1f       	adc	r17, r17
    480a:	88 23       	and	r24, r24
    480c:	31 f0       	breq	.+12     	; 0x481a <DISP_REFRESH()+0xd2>
    480e:	e0 91 f6 28 	lds	r30, 0x28F6	; 0x8028f6 <digits1>
    4812:	f0 91 f7 28 	lds	r31, 0x28F7	; 0x8028f7 <digits1+0x1>
    4816:	20 97       	sbiw	r28, 0x00	; 0
    4818:	c1 f0       	breq	.+48     	; 0x484a <DISP_REFRESH()+0x102>
    481a:	80 91 be 28 	lds	r24, 0x28BE	; 0x8028be <DOT1_1>
    481e:	88 23       	and	r24, r24
    4820:	39 f0       	breq	.+14     	; 0x4830 <DISP_REFRESH()+0xe8>
    4822:	e0 91 f8 28 	lds	r30, 0x28F8	; 0x8028f8 <digits1+0x2>
    4826:	f0 91 f9 28 	lds	r31, 0x28F9	; 0x8028f9 <digits1+0x3>
    482a:	c1 30       	cpi	r28, 0x01	; 1
    482c:	d1 05       	cpc	r29, r1
    482e:	69 f0       	breq	.+26     	; 0x484a <DISP_REFRESH()+0x102>
    4830:	80 91 98 28 	lds	r24, 0x2898	; 0x802898 <DOT1_2>
    4834:	88 23       	and	r24, r24
    4836:	09 f4       	brne	.+2      	; 0x483a <DISP_REFRESH()+0xf2>
    4838:	45 c0       	rjmp	.+138    	; 0x48c4 <DISP_REFRESH()+0x17c>
    483a:	c2 30       	cpi	r28, 0x02	; 2
    483c:	d1 05       	cpc	r29, r1
    483e:	09 f0       	breq	.+2      	; 0x4842 <DISP_REFRESH()+0xfa>
    4840:	41 c0       	rjmp	.+130    	; 0x48c4 <DISP_REFRESH()+0x17c>
    4842:	e0 91 fa 28 	lds	r30, 0x28FA	; 0x8028fa <digits1+0x4>
    4846:	f0 91 fb 28 	lds	r31, 0x28FB	; 0x8028fb <digits1+0x5>
    484a:	e2 59       	subi	r30, 0x92	; 146
    484c:	fa 44       	sbci	r31, 0x4A	; 74
    484e:	40 81       	ld	r20, Z
    4850:	41 60       	ori	r20, 0x01	; 1
    4852:	64 e1       	ldi	r22, 0x14	; 20
    4854:	82 e1       	ldi	r24, 0x12	; 18
    4856:	4e df       	rcall	.-356    	; 0x46f4 <shiftOut.constprop.7>
    4858:	f8 01       	movw	r30, r16
    485a:	ec 59       	subi	r30, 0x9C	; 156
    485c:	fa 44       	sbci	r31, 0x4A	; 74
    485e:	60 e0       	ldi	r22, 0x00	; 0
    4860:	80 81       	ld	r24, Z
    4862:	0e 94 54 08 	call	0x10a8	; 0x10a8 <digitalWrite>
    4866:	61 e0       	ldi	r22, 0x01	; 1
    4868:	83 e1       	ldi	r24, 0x13	; 19
    486a:	0e 94 54 08 	call	0x10a8	; 0x10a8 <digitalWrite>
    486e:	21 96       	adiw	r28, 0x01	; 1
    4870:	c4 30       	cpi	r28, 0x04	; 4
    4872:	d1 05       	cpc	r29, r1
    4874:	8c f5       	brge	.+98     	; 0x48d8 <DISP_REFRESH()+0x190>
    4876:	c0 93 37 28 	sts	0x2837, r28	; 0x802837 <count1>
    487a:	d0 93 38 28 	sts	0x2838, r29	; 0x802838 <count1+0x1>
Button_Tick_Update():
    487e:	8e ea       	ldi	r24, 0xAE	; 174
    4880:	9a e2       	ldi	r25, 0x2A	; 42
    4882:	0e 94 47 0b 	call	0x168e	; 0x168e <OneButton::tick()>
    4886:	8f e8       	ldi	r24, 0x8F	; 143
    4888:	9a e2       	ldi	r25, 0x2A	; 42
    488a:	0e 94 47 0b 	call	0x168e	; 0x168e <OneButton::tick()>
    488e:	80 e7       	ldi	r24, 0x70	; 112
    4890:	9a e2       	ldi	r25, 0x2A	; 42
    4892:	0e 94 47 0b 	call	0x168e	; 0x168e <OneButton::tick()>
    4896:	81 e5       	ldi	r24, 0x51	; 81
    4898:	9a e2       	ldi	r25, 0x2A	; 42
DISP_REFRESH():
    489a:	df 91       	pop	r29
    489c:	cf 91       	pop	r28
    489e:	1f 91       	pop	r17
    48a0:	0f 91       	pop	r16
Button_Tick_Update():
    48a2:	0c 94 47 0b 	jmp	0x168e	; 0x168e <OneButton::tick()>
DISPLAY_NUMBER2():
    48a6:	f8 01       	movw	r30, r16
    48a8:	e2 50       	subi	r30, 0x02	; 2
    48aa:	f7 4d       	sbci	r31, 0xD7	; 215
    48ac:	01 90       	ld	r0, Z+
    48ae:	f0 81       	ld	r31, Z
    48b0:	e0 2d       	mov	r30, r0
    48b2:	e2 59       	subi	r30, 0x92	; 146
    48b4:	fa 44       	sbci	r31, 0x4A	; 74
    48b6:	40 81       	ld	r20, Z
    48b8:	82 cf       	rjmp	.-252    	; 0x47be <DISP_REFRESH()+0x76>
    48ba:	10 92 35 28 	sts	0x2835, r1	; 0x802835 <count2>
    48be:	10 92 36 28 	sts	0x2836, r1	; 0x802836 <count2+0x1>
    48c2:	94 cf       	rjmp	.-216    	; 0x47ec <DISP_REFRESH()+0xa4>
DISPLAY_NUMBER1():
    48c4:	f8 01       	movw	r30, r16
    48c6:	ea 50       	subi	r30, 0x0A	; 10
    48c8:	f7 4d       	sbci	r31, 0xD7	; 215
    48ca:	01 90       	ld	r0, Z+
    48cc:	f0 81       	ld	r31, Z
    48ce:	e0 2d       	mov	r30, r0
    48d0:	e2 59       	subi	r30, 0x92	; 146
    48d2:	fa 44       	sbci	r31, 0x4A	; 74
    48d4:	40 81       	ld	r20, Z
    48d6:	bd cf       	rjmp	.-134    	; 0x4852 <DISP_REFRESH()+0x10a>
    48d8:	10 92 37 28 	sts	0x2837, r1	; 0x802837 <count1>
    48dc:	10 92 38 28 	sts	0x2838, r1	; 0x802838 <count1+0x1>
    48e0:	ce cf       	rjmp	.-100    	; 0x487e <DISP_REFRESH()+0x136>

000048e2 <__vector_32>:
__vector_32():
    48e2:	1f 92       	push	r1
    48e4:	0f 92       	push	r0
    48e6:	0f b6       	in	r0, 0x3f	; 63
    48e8:	0f 92       	push	r0
    48ea:	11 24       	eor	r1, r1
    48ec:	2f 93       	push	r18
    48ee:	3f 93       	push	r19
    48f0:	4f 93       	push	r20
    48f2:	5f 93       	push	r21
    48f4:	6f 93       	push	r22
    48f6:	7f 93       	push	r23
    48f8:	8f 93       	push	r24
    48fa:	9f 93       	push	r25
    48fc:	af 93       	push	r26
    48fe:	bf 93       	push	r27
    4900:	ef 93       	push	r30
    4902:	ff 93       	push	r31
    4904:	81 e5       	ldi	r24, 0x51	; 81
    4906:	99 e2       	ldi	r25, 0x29	; 41
    4908:	0e 94 cc 06 	call	0xd98	; 0xd98 <UartClass::_tx_data_empty_irq()>
    490c:	ff 91       	pop	r31
    490e:	ef 91       	pop	r30
    4910:	bf 91       	pop	r27
    4912:	af 91       	pop	r26
    4914:	9f 91       	pop	r25
    4916:	8f 91       	pop	r24
    4918:	7f 91       	pop	r23
    491a:	6f 91       	pop	r22
    491c:	5f 91       	pop	r21
    491e:	4f 91       	pop	r20
    4920:	3f 91       	pop	r19
    4922:	2f 91       	pop	r18
    4924:	0f 90       	pop	r0
    4926:	0f be       	out	0x3f, r0	; 63
    4928:	0f 90       	pop	r0
    492a:	1f 90       	pop	r1
    492c:	18 95       	reti

0000492e <__vector_31>:
__vector_31():
    492e:	1f 92       	push	r1
    4930:	0f 92       	push	r0
    4932:	0f b6       	in	r0, 0x3f	; 63
    4934:	0f 92       	push	r0
    4936:	11 24       	eor	r1, r1
    4938:	2f 93       	push	r18
    493a:	8f 93       	push	r24
    493c:	9f 93       	push	r25
    493e:	ef 93       	push	r30
    4940:	ff 93       	push	r31
_rx_complete_irq():
    4942:	e0 91 5d 29 	lds	r30, 0x295D	; 0x80295d <Serial2+0xc>
    4946:	f0 91 5e 29 	lds	r31, 0x295E	; 0x80295e <Serial2+0xd>
    494a:	81 81       	ldd	r24, Z+1	; 0x01
    494c:	81 fd       	sbrc	r24, 1
    494e:	1b c0       	rjmp	.+54     	; 0x4986 <__vector_31+0x58>
    4950:	90 81       	ld	r25, Z
    4952:	80 91 67 29 	lds	r24, 0x2967	; 0x802967 <Serial2+0x16>
    4956:	8f 5f       	subi	r24, 0xFF	; 255
    4958:	8f 73       	andi	r24, 0x3F	; 63
    495a:	20 91 68 29 	lds	r18, 0x2968	; 0x802968 <Serial2+0x17>
    495e:	82 17       	cp	r24, r18
    4960:	41 f0       	breq	.+16     	; 0x4972 <__vector_31+0x44>
    4962:	e0 91 67 29 	lds	r30, 0x2967	; 0x802967 <Serial2+0x16>
    4966:	f0 e0       	ldi	r31, 0x00	; 0
    4968:	ef 5a       	subi	r30, 0xAF	; 175
    496a:	f6 4d       	sbci	r31, 0xD6	; 214
    496c:	95 8f       	std	Z+29, r25	; 0x1d
    496e:	80 93 67 29 	sts	0x2967, r24	; 0x802967 <Serial2+0x16>
__vector_31():
    4972:	ff 91       	pop	r31
    4974:	ef 91       	pop	r30
    4976:	9f 91       	pop	r25
    4978:	8f 91       	pop	r24
    497a:	2f 91       	pop	r18
    497c:	0f 90       	pop	r0
    497e:	0f be       	out	0x3f, r0	; 63
    4980:	0f 90       	pop	r0
    4982:	1f 90       	pop	r1
    4984:	18 95       	reti
_rx_complete_irq():
    4986:	80 81       	ld	r24, Z
    4988:	f4 cf       	rjmp	.-24     	; 0x4972 <__vector_31+0x44>

0000498a <__vector_25>:
__vector_25():
    498a:	1f 92       	push	r1
    498c:	0f 92       	push	r0
    498e:	0f b6       	in	r0, 0x3f	; 63
    4990:	0f 92       	push	r0
    4992:	11 24       	eor	r1, r1
    4994:	8f 93       	push	r24
    4996:	9f 93       	push	r25
    4998:	af 93       	push	r26
    499a:	bf 93       	push	r27
    499c:	80 91 39 28 	lds	r24, 0x2839	; 0x802839 <timer_millis>
    49a0:	90 91 3a 28 	lds	r25, 0x283A	; 0x80283a <timer_millis+0x1>
    49a4:	a0 91 3b 28 	lds	r26, 0x283B	; 0x80283b <timer_millis+0x2>
    49a8:	b0 91 3c 28 	lds	r27, 0x283C	; 0x80283c <timer_millis+0x3>
    49ac:	01 96       	adiw	r24, 0x01	; 1
    49ae:	a1 1d       	adc	r26, r1
    49b0:	b1 1d       	adc	r27, r1
    49b2:	80 93 39 28 	sts	0x2839, r24	; 0x802839 <timer_millis>
    49b6:	90 93 3a 28 	sts	0x283A, r25	; 0x80283a <timer_millis+0x1>
    49ba:	a0 93 3b 28 	sts	0x283B, r26	; 0x80283b <timer_millis+0x2>
    49be:	b0 93 3c 28 	sts	0x283C, r27	; 0x80283c <timer_millis+0x3>
    49c2:	81 e0       	ldi	r24, 0x01	; 1
    49c4:	80 93 a6 0a 	sts	0x0AA6, r24	; 0x800aa6 <__TEXT_REGION_LENGTH__+0x7f4aa6>
    49c8:	bf 91       	pop	r27
    49ca:	af 91       	pop	r26
    49cc:	9f 91       	pop	r25
    49ce:	8f 91       	pop	r24
    49d0:	0f 90       	pop	r0
    49d2:	0f be       	out	0x3f, r0	; 63
    49d4:	0f 90       	pop	r0
    49d6:	1f 90       	pop	r1
    49d8:	18 95       	reti

000049da <__vector_7>:
__vector_7():
    49da:	1f 92       	push	r1
    49dc:	0f 92       	push	r0
    49de:	0f b6       	in	r0, 0x3f	; 63
    49e0:	0f 92       	push	r0
    49e2:	11 24       	eor	r1, r1
    49e4:	2f 93       	push	r18
    49e6:	3f 93       	push	r19
    49e8:	4f 93       	push	r20
    49ea:	5f 93       	push	r21
    49ec:	6f 93       	push	r22
    49ee:	7f 93       	push	r23
    49f0:	8f 93       	push	r24
    49f2:	9f 93       	push	r25
    49f4:	af 93       	push	r26
    49f6:	bf 93       	push	r27
    49f8:	ef 93       	push	r30
    49fa:	ff 93       	push	r31
TICKER_UPDATE():
    49fc:	80 ec       	ldi	r24, 0xC0	; 192
    49fe:	9b e2       	ldi	r25, 0x2B	; 43
    4a00:	0e 94 ac 0a 	call	0x1558	; 0x1558 <Ticker::update()>
PID_Tick_Update():
    4a04:	88 ee       	ldi	r24, 0xE8	; 232
    4a06:	9a e2       	ldi	r25, 0x2A	; 42
    4a08:	0e 94 ac 0a 	call	0x1558	; 0x1558 <Ticker::update()>
Rtd_Temp_Update():
    4a0c:	89 e3       	ldi	r24, 0x39	; 57
    4a0e:	9b e2       	ldi	r25, 0x2B	; 43
    4a10:	0e 94 ac 0a 	call	0x1558	; 0x1558 <Ticker::update()>
Rtd_Temp_Update_1():
    4a14:	8e e1       	ldi	r24, 0x1E	; 30
    4a16:	9b e2       	ldi	r25, 0x2B	; 43
    4a18:	0e 94 ac 0a 	call	0x1558	; 0x1558 <Ticker::update()>
TICKER_UPDATE():
    4a1c:	85 ea       	ldi	r24, 0xA5	; 165
    4a1e:	9b e2       	ldi	r25, 0x2B	; 43
    4a20:	0e 94 ac 0a 	call	0x1558	; 0x1558 <Ticker::update()>
    4a24:	8a e8       	ldi	r24, 0x8A	; 138
    4a26:	9b e2       	ldi	r25, 0x2B	; 43
    4a28:	0e 94 ac 0a 	call	0x1558	; 0x1558 <Ticker::update()>
    4a2c:	8f e6       	ldi	r24, 0x6F	; 111
    4a2e:	9b e2       	ldi	r25, 0x2B	; 43
    4a30:	0e 94 ac 0a 	call	0x1558	; 0x1558 <Ticker::update()>
    4a34:	84 e5       	ldi	r24, 0x54	; 84
    4a36:	9b e2       	ldi	r25, 0x2B	; 43
    4a38:	0e 94 ac 0a 	call	0x1558	; 0x1558 <Ticker::update()>
__vector_7():
    4a3c:	80 91 ba 28 	lds	r24, 0x28BA	; 0x8028ba <i>
    4a40:	90 91 bb 28 	lds	r25, 0x28BB	; 0x8028bb <i+0x1>
    4a44:	01 96       	adiw	r24, 0x01	; 1
    4a46:	80 93 ba 28 	sts	0x28BA, r24	; 0x8028ba <i>
    4a4a:	90 93 bb 28 	sts	0x28BB, r25	; 0x8028bb <i+0x1>
TIME_CAL():
    4a4e:	80 91 a1 28 	lds	r24, 0x28A1	; 0x8028a1 <COUNTDOWN_START>
    4a52:	88 23       	and	r24, r24
    4a54:	81 f1       	breq	.+96     	; 0x4ab6 <__vector_7+0xdc>
    4a56:	80 91 18 28 	lds	r24, 0x2818	; 0x802818 <__data_end>
    4a5a:	90 91 19 28 	lds	r25, 0x2819	; 0x802819 <__data_end+0x1>
    4a5e:	01 96       	adiw	r24, 0x01	; 1
    4a60:	80 93 18 28 	sts	0x2818, r24	; 0x802818 <__data_end>
    4a64:	90 93 19 28 	sts	0x2819, r25	; 0x802819 <__data_end+0x1>
    4a68:	80 3b       	cpi	r24, 0xB0	; 176
    4a6a:	9e 40       	sbci	r25, 0x0E	; 14
    4a6c:	21 f5       	brne	.+72     	; 0x4ab6 <__vector_7+0xdc>
    4a6e:	80 91 45 28 	lds	r24, 0x2845	; 0x802845 <actualRunMin>
    4a72:	90 91 46 28 	lds	r25, 0x2846	; 0x802846 <actualRunMin+0x1>
    4a76:	a0 91 47 28 	lds	r26, 0x2847	; 0x802847 <actualRunMin+0x2>
    4a7a:	b0 91 48 28 	lds	r27, 0x2848	; 0x802848 <actualRunMin+0x3>
    4a7e:	01 96       	adiw	r24, 0x01	; 1
    4a80:	a1 1d       	adc	r26, r1
    4a82:	b1 1d       	adc	r27, r1
    4a84:	80 93 45 28 	sts	0x2845, r24	; 0x802845 <actualRunMin>
    4a88:	90 93 46 28 	sts	0x2846, r25	; 0x802846 <actualRunMin+0x1>
    4a8c:	a0 93 47 28 	sts	0x2847, r26	; 0x802847 <actualRunMin+0x2>
    4a90:	b0 93 48 28 	sts	0x2848, r27	; 0x802848 <actualRunMin+0x3>
    4a94:	80 91 a2 28 	lds	r24, 0x28A2	; 0x8028a2 <SET_MIN>
    4a98:	90 91 a3 28 	lds	r25, 0x28A3	; 0x8028a3 <SET_MIN+0x1>
    4a9c:	01 97       	sbiw	r24, 0x01	; 1
    4a9e:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <SET_MIN>
    4aa2:	90 93 a3 28 	sts	0x28A3, r25	; 0x8028a3 <SET_MIN+0x1>
    4aa6:	10 92 18 28 	sts	0x2818, r1	; 0x802818 <__data_end>
    4aaa:	10 92 19 28 	sts	0x2819, r1	; 0x802819 <__data_end+0x1>
    4aae:	89 2b       	or	r24, r25
    4ab0:	11 f4       	brne	.+4      	; 0x4ab6 <__vector_7+0xdc>
    4ab2:	10 92 a1 28 	sts	0x28A1, r1	; 0x8028a1 <COUNTDOWN_START>
__vector_7():
    4ab6:	80 91 bf 28 	lds	r24, 0x28BF	; 0x8028bf <Mode_Button_Single_Press_In_Settings>
    4aba:	88 23       	and	r24, r24
    4abc:	79 f0       	breq	.+30     	; 0x4adc <__vector_7+0x102>
    4abe:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <SELECTION_PARAMETER>
    4ac2:	90 91 0a 28 	lds	r25, 0x280A	; 0x80280a <SELECTION_PARAMETER+0x1>
    4ac6:	43 97       	sbiw	r24, 0x13	; 19
    4ac8:	49 f4       	brne	.+18     	; 0x4adc <__vector_7+0x102>
    4aca:	80 91 a7 28 	lds	r24, 0x28A7	; 0x8028a7 <currentMillis>
    4ace:	90 91 a8 28 	lds	r25, 0x28A8	; 0x8028a8 <currentMillis+0x1>
    4ad2:	01 96       	adiw	r24, 0x01	; 1
    4ad4:	80 93 a7 28 	sts	0x28A7, r24	; 0x8028a7 <currentMillis>
    4ad8:	90 93 a8 28 	sts	0x28A8, r25	; 0x8028a8 <currentMillis+0x1>
    4adc:	81 e0       	ldi	r24, 0x01	; 1
    4ade:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7f4a0b>
    4ae2:	ff 91       	pop	r31
    4ae4:	ef 91       	pop	r30
    4ae6:	bf 91       	pop	r27
    4ae8:	af 91       	pop	r26
    4aea:	9f 91       	pop	r25
    4aec:	8f 91       	pop	r24
    4aee:	7f 91       	pop	r23
    4af0:	6f 91       	pop	r22
    4af2:	5f 91       	pop	r21
    4af4:	4f 91       	pop	r20
    4af6:	3f 91       	pop	r19
    4af8:	2f 91       	pop	r18
    4afa:	0f 90       	pop	r0
    4afc:	0f be       	out	0x3f, r0	; 63
    4afe:	0f 90       	pop	r0
    4b00:	1f 90       	pop	r1
    4b02:	18 95       	reti

00004b04 <global constructors keyed to 65535_0_Butn.cpp.o.4193>:
_GLOBAL__I_65535_0_Butn.cpp.o.4193():
    4b04:	4f 92       	push	r4
    4b06:	5f 92       	push	r5
    4b08:	6f 92       	push	r6
    4b0a:	7f 92       	push	r7
    4b0c:	8f 92       	push	r8
    4b0e:	9f 92       	push	r9
    4b10:	af 92       	push	r10
    4b12:	bf 92       	push	r11
    4b14:	cf 92       	push	r12
    4b16:	df 92       	push	r13
    4b18:	ef 92       	push	r14
    4b1a:	ff 92       	push	r15
    4b1c:	10 92 53 29 	sts	0x2953, r1	; 0x802953 <Serial2+0x2>
    4b20:	10 92 54 29 	sts	0x2954, r1	; 0x802954 <Serial2+0x3>
    4b24:	88 ee       	ldi	r24, 0xE8	; 232
    4b26:	93 e0       	ldi	r25, 0x03	; 3
    4b28:	a0 e0       	ldi	r26, 0x00	; 0
    4b2a:	b0 e0       	ldi	r27, 0x00	; 0
    4b2c:	80 93 55 29 	sts	0x2955, r24	; 0x802955 <Serial2+0x4>
    4b30:	90 93 56 29 	sts	0x2956, r25	; 0x802956 <Serial2+0x5>
    4b34:	a0 93 57 29 	sts	0x2957, r26	; 0x802957 <Serial2+0x6>
    4b38:	b0 93 58 29 	sts	0x2958, r27	; 0x802958 <Serial2+0x7>
    4b3c:	88 eb       	ldi	r24, 0xB8	; 184
    4b3e:	96 eb       	ldi	r25, 0xB6	; 182
    4b40:	80 93 51 29 	sts	0x2951, r24	; 0x802951 <Serial2>
    4b44:	90 93 52 29 	sts	0x2952, r25	; 0x802952 <Serial2+0x1>
    4b48:	80 e4       	ldi	r24, 0x40	; 64
    4b4a:	98 e0       	ldi	r25, 0x08	; 8
    4b4c:	80 93 5d 29 	sts	0x295D, r24	; 0x80295d <Serial2+0xc>
    4b50:	90 93 5e 29 	sts	0x295E, r25	; 0x80295e <Serial2+0xd>
    4b54:	83 e2       	ldi	r24, 0x23	; 35
    4b56:	80 93 5f 29 	sts	0x295F, r24	; 0x80295f <Serial2+0xe>
    4b5a:	82 e2       	ldi	r24, 0x22	; 34
    4b5c:	80 93 60 29 	sts	0x2960, r24	; 0x802960 <Serial2+0xf>
    4b60:	10 92 61 29 	sts	0x2961, r1	; 0x802961 <Serial2+0x10>
    4b64:	87 e2       	ldi	r24, 0x27	; 39
    4b66:	80 93 62 29 	sts	0x2962, r24	; 0x802962 <Serial2+0x11>
    4b6a:	86 e2       	ldi	r24, 0x26	; 38
    4b6c:	80 93 63 29 	sts	0x2963, r24	; 0x802963 <Serial2+0x12>
    4b70:	80 e1       	ldi	r24, 0x10	; 16
    4b72:	80 93 64 29 	sts	0x2964, r24	; 0x802964 <Serial2+0x13>
    4b76:	10 92 65 29 	sts	0x2965, r1	; 0x802965 <Serial2+0x14>
    4b7a:	10 92 66 29 	sts	0x2966, r1	; 0x802966 <Serial2+0x15>
    4b7e:	10 92 67 29 	sts	0x2967, r1	; 0x802967 <Serial2+0x16>
    4b82:	10 92 68 29 	sts	0x2968, r1	; 0x802968 <Serial2+0x17>
    4b86:	10 92 69 29 	sts	0x2969, r1	; 0x802969 <Serial2+0x18>
    4b8a:	10 92 6a 29 	sts	0x296A, r1	; 0x80296a <Serial2+0x19>
    4b8e:	80 e2       	ldi	r24, 0x20	; 32
    4b90:	80 93 6b 29 	sts	0x296B, r24	; 0x80296b <Serial2+0x1a>
    4b94:	10 92 6c 29 	sts	0x296C, r1	; 0x80296c <Serial2+0x1b>
    4b98:	10 92 6d 29 	sts	0x296D, r1	; 0x80296d <Serial2+0x1c>
    4b9c:	82 e0       	ldi	r24, 0x02	; 2
    4b9e:	90 e0       	ldi	r25, 0x00	; 0
    4ba0:	80 93 e4 2b 	sts	0x2BE4, r24	; 0x802be4 <DISP+0x9>
    4ba4:	90 93 e5 2b 	sts	0x2BE5, r25	; 0x802be5 <DISP+0xa>
    4ba8:	80 e8       	ldi	r24, 0x80	; 128
    4baa:	9c e0       	ldi	r25, 0x0C	; 12
    4bac:	a0 e0       	ldi	r26, 0x00	; 0
    4bae:	b0 e0       	ldi	r27, 0x00	; 0
    4bb0:	80 93 dc 2b 	sts	0x2BDC, r24	; 0x802bdc <DISP+0x1>
    4bb4:	90 93 dd 2b 	sts	0x2BDD, r25	; 0x802bdd <DISP+0x2>
    4bb8:	a0 93 de 2b 	sts	0x2BDE, r26	; 0x802bde <DISP+0x3>
    4bbc:	b0 93 df 2b 	sts	0x2BDF, r27	; 0x802bdf <DISP+0x4>
    4bc0:	10 92 e0 2b 	sts	0x2BE0, r1	; 0x802be0 <DISP+0x5>
    4bc4:	10 92 e1 2b 	sts	0x2BE1, r1	; 0x802be1 <DISP+0x6>
    4bc8:	10 92 e2 2b 	sts	0x2BE2, r1	; 0x802be2 <DISP+0x7>
    4bcc:	10 92 e3 2b 	sts	0x2BE3, r1	; 0x802be3 <DISP+0x8>
    4bd0:	84 ea       	ldi	r24, 0xA4	; 164
    4bd2:	93 e2       	ldi	r25, 0x23	; 35
    4bd4:	80 93 ec 2b 	sts	0x2BEC, r24	; 0x802bec <DISP+0x11>
    4bd8:	90 93 ed 2b 	sts	0x2BED, r25	; 0x802bed <DISP+0x12>
    4bdc:	10 92 db 2b 	sts	0x2BDB, r1	; 0x802bdb <DISP>
    4be0:	10 92 ee 2b 	sts	0x2BEE, r1	; 0x802bee <DISP+0x13>
    4be4:	10 92 ef 2b 	sts	0x2BEF, r1	; 0x802bef <DISP+0x14>
    4be8:	10 92 f0 2b 	sts	0x2BF0, r1	; 0x802bf0 <DISP+0x15>
    4bec:	10 92 f1 2b 	sts	0x2BF1, r1	; 0x802bf1 <DISP+0x16>
    4bf0:	10 92 e6 2b 	sts	0x2BE6, r1	; 0x802be6 <DISP+0xb>
    4bf4:	10 92 e7 2b 	sts	0x2BE7, r1	; 0x802be7 <DISP+0xc>
    4bf8:	10 92 e8 2b 	sts	0x2BE8, r1	; 0x802be8 <DISP+0xd>
    4bfc:	10 92 e9 2b 	sts	0x2BE9, r1	; 0x802be9 <DISP+0xe>
    4c00:	10 92 c9 2b 	sts	0x2BC9, r1	; 0x802bc9 <BUZZ+0x9>
    4c04:	10 92 ca 2b 	sts	0x2BCA, r1	; 0x802bca <BUZZ+0xa>
    4c08:	80 ea       	ldi	r24, 0xA0	; 160
    4c0a:	96 e8       	ldi	r25, 0x86	; 134
    4c0c:	a1 e0       	ldi	r26, 0x01	; 1
    4c0e:	b0 e0       	ldi	r27, 0x00	; 0
    4c10:	80 93 c1 2b 	sts	0x2BC1, r24	; 0x802bc1 <BUZZ+0x1>
    4c14:	90 93 c2 2b 	sts	0x2BC2, r25	; 0x802bc2 <BUZZ+0x2>
    4c18:	a0 93 c3 2b 	sts	0x2BC3, r26	; 0x802bc3 <BUZZ+0x3>
    4c1c:	b0 93 c4 2b 	sts	0x2BC4, r27	; 0x802bc4 <BUZZ+0x4>
    4c20:	41 e0       	ldi	r20, 0x01	; 1
    4c22:	50 e0       	ldi	r21, 0x00	; 0
    4c24:	60 e0       	ldi	r22, 0x00	; 0
    4c26:	70 e0       	ldi	r23, 0x00	; 0
    4c28:	40 93 c5 2b 	sts	0x2BC5, r20	; 0x802bc5 <BUZZ+0x5>
    4c2c:	50 93 c6 2b 	sts	0x2BC6, r21	; 0x802bc6 <BUZZ+0x6>
    4c30:	60 93 c7 2b 	sts	0x2BC7, r22	; 0x802bc7 <BUZZ+0x7>
    4c34:	70 93 c8 2b 	sts	0x2BC8, r23	; 0x802bc8 <BUZZ+0x8>
    4c38:	88 e1       	ldi	r24, 0x18	; 24
    4c3a:	9c e0       	ldi	r25, 0x0C	; 12
    4c3c:	80 93 d1 2b 	sts	0x2BD1, r24	; 0x802bd1 <BUZZ+0x11>
    4c40:	90 93 d2 2b 	sts	0x2BD2, r25	; 0x802bd2 <BUZZ+0x12>
    4c44:	10 92 c0 2b 	sts	0x2BC0, r1	; 0x802bc0 <BUZZ>
    4c48:	10 92 d3 2b 	sts	0x2BD3, r1	; 0x802bd3 <BUZZ+0x13>
    4c4c:	10 92 d4 2b 	sts	0x2BD4, r1	; 0x802bd4 <BUZZ+0x14>
    4c50:	10 92 d5 2b 	sts	0x2BD5, r1	; 0x802bd5 <BUZZ+0x15>
    4c54:	10 92 d6 2b 	sts	0x2BD6, r1	; 0x802bd6 <BUZZ+0x16>
    4c58:	10 92 cb 2b 	sts	0x2BCB, r1	; 0x802bcb <BUZZ+0xb>
    4c5c:	10 92 cc 2b 	sts	0x2BCC, r1	; 0x802bcc <BUZZ+0xc>
    4c60:	10 92 cd 2b 	sts	0x2BCD, r1	; 0x802bcd <BUZZ+0xd>
    4c64:	10 92 ce 2b 	sts	0x2BCE, r1	; 0x802bce <BUZZ+0xe>
    4c68:	10 92 ae 2b 	sts	0x2BAE, r1	; 0x802bae <BUZZ_TICK1+0x9>
    4c6c:	10 92 af 2b 	sts	0x2BAF, r1	; 0x802baf <BUZZ_TICK1+0xa>
    4c70:	80 e8       	ldi	r24, 0x80	; 128
    4c72:	94 e8       	ldi	r25, 0x84	; 132
    4c74:	ae e1       	ldi	r26, 0x1E	; 30
    4c76:	b0 e0       	ldi	r27, 0x00	; 0
    4c78:	80 93 a6 2b 	sts	0x2BA6, r24	; 0x802ba6 <BUZZ_TICK1+0x1>
    4c7c:	90 93 a7 2b 	sts	0x2BA7, r25	; 0x802ba7 <BUZZ_TICK1+0x2>
    4c80:	a0 93 a8 2b 	sts	0x2BA8, r26	; 0x802ba8 <BUZZ_TICK1+0x3>
    4c84:	b0 93 a9 2b 	sts	0x2BA9, r27	; 0x802ba9 <BUZZ_TICK1+0x4>
    4c88:	10 92 aa 2b 	sts	0x2BAA, r1	; 0x802baa <BUZZ_TICK1+0x5>
    4c8c:	10 92 ab 2b 	sts	0x2BAB, r1	; 0x802bab <BUZZ_TICK1+0x6>
    4c90:	10 92 ac 2b 	sts	0x2BAC, r1	; 0x802bac <BUZZ_TICK1+0x7>
    4c94:	10 92 ad 2b 	sts	0x2BAD, r1	; 0x802bad <BUZZ_TICK1+0x8>
    4c98:	24 e2       	ldi	r18, 0x24	; 36
    4c9a:	3c e0       	ldi	r19, 0x0C	; 12
    4c9c:	20 93 b6 2b 	sts	0x2BB6, r18	; 0x802bb6 <BUZZ_TICK1+0x11>
    4ca0:	30 93 b7 2b 	sts	0x2BB7, r19	; 0x802bb7 <BUZZ_TICK1+0x12>
    4ca4:	10 92 a5 2b 	sts	0x2BA5, r1	; 0x802ba5 <BUZZ_TICK1>
    4ca8:	10 92 b8 2b 	sts	0x2BB8, r1	; 0x802bb8 <BUZZ_TICK1+0x13>
    4cac:	10 92 b9 2b 	sts	0x2BB9, r1	; 0x802bb9 <BUZZ_TICK1+0x14>
    4cb0:	10 92 ba 2b 	sts	0x2BBA, r1	; 0x802bba <BUZZ_TICK1+0x15>
    4cb4:	10 92 bb 2b 	sts	0x2BBB, r1	; 0x802bbb <BUZZ_TICK1+0x16>
    4cb8:	10 92 b0 2b 	sts	0x2BB0, r1	; 0x802bb0 <BUZZ_TICK1+0xb>
    4cbc:	10 92 b1 2b 	sts	0x2BB1, r1	; 0x802bb1 <BUZZ_TICK1+0xc>
    4cc0:	10 92 b2 2b 	sts	0x2BB2, r1	; 0x802bb2 <BUZZ_TICK1+0xd>
    4cc4:	10 92 b3 2b 	sts	0x2BB3, r1	; 0x802bb3 <BUZZ_TICK1+0xe>
    4cc8:	10 92 93 2b 	sts	0x2B93, r1	; 0x802b93 <BUZZ_TICK2+0x9>
    4ccc:	10 92 94 2b 	sts	0x2B94, r1	; 0x802b94 <BUZZ_TICK2+0xa>
    4cd0:	20 e4       	ldi	r18, 0x40	; 64
    4cd2:	c2 2e       	mov	r12, r18
    4cd4:	22 e4       	ldi	r18, 0x42	; 66
    4cd6:	d2 2e       	mov	r13, r18
    4cd8:	2f e0       	ldi	r18, 0x0F	; 15
    4cda:	e2 2e       	mov	r14, r18
    4cdc:	f1 2c       	mov	r15, r1
    4cde:	c0 92 8b 2b 	sts	0x2B8B, r12	; 0x802b8b <BUZZ_TICK2+0x1>
    4ce2:	d0 92 8c 2b 	sts	0x2B8C, r13	; 0x802b8c <BUZZ_TICK2+0x2>
    4ce6:	e0 92 8d 2b 	sts	0x2B8D, r14	; 0x802b8d <BUZZ_TICK2+0x3>
    4cea:	f0 92 8e 2b 	sts	0x2B8E, r15	; 0x802b8e <BUZZ_TICK2+0x4>
    4cee:	40 93 8f 2b 	sts	0x2B8F, r20	; 0x802b8f <BUZZ_TICK2+0x5>
    4cf2:	50 93 90 2b 	sts	0x2B90, r21	; 0x802b90 <BUZZ_TICK2+0x6>
    4cf6:	60 93 91 2b 	sts	0x2B91, r22	; 0x802b91 <BUZZ_TICK2+0x7>
    4cfa:	70 93 92 2b 	sts	0x2B92, r23	; 0x802b92 <BUZZ_TICK2+0x8>
    4cfe:	2a e2       	ldi	r18, 0x2A	; 42
    4d00:	3c e0       	ldi	r19, 0x0C	; 12
    4d02:	20 93 9b 2b 	sts	0x2B9B, r18	; 0x802b9b <BUZZ_TICK2+0x11>
    4d06:	30 93 9c 2b 	sts	0x2B9C, r19	; 0x802b9c <BUZZ_TICK2+0x12>
    4d0a:	10 92 8a 2b 	sts	0x2B8A, r1	; 0x802b8a <BUZZ_TICK2>
    4d0e:	10 92 9d 2b 	sts	0x2B9D, r1	; 0x802b9d <BUZZ_TICK2+0x13>
    4d12:	10 92 9e 2b 	sts	0x2B9E, r1	; 0x802b9e <BUZZ_TICK2+0x14>
    4d16:	10 92 9f 2b 	sts	0x2B9F, r1	; 0x802b9f <BUZZ_TICK2+0x15>
    4d1a:	10 92 a0 2b 	sts	0x2BA0, r1	; 0x802ba0 <BUZZ_TICK2+0x16>
    4d1e:	10 92 95 2b 	sts	0x2B95, r1	; 0x802b95 <BUZZ_TICK2+0xb>
    4d22:	10 92 96 2b 	sts	0x2B96, r1	; 0x802b96 <BUZZ_TICK2+0xc>
    4d26:	10 92 97 2b 	sts	0x2B97, r1	; 0x802b97 <BUZZ_TICK2+0xd>
    4d2a:	10 92 98 2b 	sts	0x2B98, r1	; 0x802b98 <BUZZ_TICK2+0xe>
    4d2e:	10 92 78 2b 	sts	0x2B78, r1	; 0x802b78 <Blink_LED_ON+0x9>
    4d32:	10 92 79 2b 	sts	0x2B79, r1	; 0x802b79 <Blink_LED_ON+0xa>
    4d36:	40 ee       	ldi	r20, 0xE0	; 224
    4d38:	53 e9       	ldi	r21, 0x93	; 147
    4d3a:	64 e0       	ldi	r22, 0x04	; 4
    4d3c:	70 e0       	ldi	r23, 0x00	; 0
    4d3e:	40 93 70 2b 	sts	0x2B70, r20	; 0x802b70 <Blink_LED_ON+0x1>
    4d42:	50 93 71 2b 	sts	0x2B71, r21	; 0x802b71 <Blink_LED_ON+0x2>
    4d46:	60 93 72 2b 	sts	0x2B72, r22	; 0x802b72 <Blink_LED_ON+0x3>
    4d4a:	70 93 73 2b 	sts	0x2B73, r23	; 0x802b73 <Blink_LED_ON+0x4>
    4d4e:	10 92 74 2b 	sts	0x2B74, r1	; 0x802b74 <Blink_LED_ON+0x5>
    4d52:	10 92 75 2b 	sts	0x2B75, r1	; 0x802b75 <Blink_LED_ON+0x6>
    4d56:	10 92 76 2b 	sts	0x2B76, r1	; 0x802b76 <Blink_LED_ON+0x7>
    4d5a:	10 92 77 2b 	sts	0x2B77, r1	; 0x802b77 <Blink_LED_ON+0x8>
    4d5e:	2a e4       	ldi	r18, 0x4A	; 74
    4d60:	3c e0       	ldi	r19, 0x0C	; 12
    4d62:	20 93 80 2b 	sts	0x2B80, r18	; 0x802b80 <Blink_LED_ON+0x11>
    4d66:	30 93 81 2b 	sts	0x2B81, r19	; 0x802b81 <Blink_LED_ON+0x12>
    4d6a:	10 92 6f 2b 	sts	0x2B6F, r1	; 0x802b6f <Blink_LED_ON>
    4d6e:	10 92 82 2b 	sts	0x2B82, r1	; 0x802b82 <Blink_LED_ON+0x13>
    4d72:	10 92 83 2b 	sts	0x2B83, r1	; 0x802b83 <Blink_LED_ON+0x14>
    4d76:	10 92 84 2b 	sts	0x2B84, r1	; 0x802b84 <Blink_LED_ON+0x15>
    4d7a:	10 92 85 2b 	sts	0x2B85, r1	; 0x802b85 <Blink_LED_ON+0x16>
    4d7e:	10 92 7a 2b 	sts	0x2B7A, r1	; 0x802b7a <Blink_LED_ON+0xb>
    4d82:	10 92 7b 2b 	sts	0x2B7B, r1	; 0x802b7b <Blink_LED_ON+0xc>
    4d86:	10 92 7c 2b 	sts	0x2B7C, r1	; 0x802b7c <Blink_LED_ON+0xd>
    4d8a:	10 92 7d 2b 	sts	0x2B7D, r1	; 0x802b7d <Blink_LED_ON+0xe>
    4d8e:	10 92 5d 2b 	sts	0x2B5D, r1	; 0x802b5d <Blink_LED_OFF+0x9>
    4d92:	10 92 5e 2b 	sts	0x2B5E, r1	; 0x802b5e <Blink_LED_OFF+0xa>
    4d96:	40 ec       	ldi	r20, 0xC0	; 192
    4d98:	57 e2       	ldi	r21, 0x27	; 39
    4d9a:	69 e0       	ldi	r22, 0x09	; 9
    4d9c:	70 e0       	ldi	r23, 0x00	; 0
    4d9e:	40 93 55 2b 	sts	0x2B55, r20	; 0x802b55 <Blink_LED_OFF+0x1>
    4da2:	50 93 56 2b 	sts	0x2B56, r21	; 0x802b56 <Blink_LED_OFF+0x2>
    4da6:	60 93 57 2b 	sts	0x2B57, r22	; 0x802b57 <Blink_LED_OFF+0x3>
    4daa:	70 93 58 2b 	sts	0x2B58, r23	; 0x802b58 <Blink_LED_OFF+0x4>
    4dae:	10 92 59 2b 	sts	0x2B59, r1	; 0x802b59 <Blink_LED_OFF+0x5>
    4db2:	10 92 5a 2b 	sts	0x2B5A, r1	; 0x802b5a <Blink_LED_OFF+0x6>
    4db6:	10 92 5b 2b 	sts	0x2B5B, r1	; 0x802b5b <Blink_LED_OFF+0x7>
    4dba:	10 92 5c 2b 	sts	0x2B5C, r1	; 0x802b5c <Blink_LED_OFF+0x8>
    4dbe:	24 e4       	ldi	r18, 0x44	; 68
    4dc0:	3c e0       	ldi	r19, 0x0C	; 12
    4dc2:	20 93 65 2b 	sts	0x2B65, r18	; 0x802b65 <Blink_LED_OFF+0x11>
    4dc6:	30 93 66 2b 	sts	0x2B66, r19	; 0x802b66 <Blink_LED_OFF+0x12>
    4dca:	10 92 54 2b 	sts	0x2B54, r1	; 0x802b54 <Blink_LED_OFF>
    4dce:	10 92 67 2b 	sts	0x2B67, r1	; 0x802b67 <Blink_LED_OFF+0x13>
    4dd2:	10 92 68 2b 	sts	0x2B68, r1	; 0x802b68 <Blink_LED_OFF+0x14>
    4dd6:	10 92 69 2b 	sts	0x2B69, r1	; 0x802b69 <Blink_LED_OFF+0x15>
    4dda:	10 92 6a 2b 	sts	0x2B6A, r1	; 0x802b6a <Blink_LED_OFF+0x16>
    4dde:	10 92 5f 2b 	sts	0x2B5F, r1	; 0x802b5f <Blink_LED_OFF+0xb>
    4de2:	10 92 60 2b 	sts	0x2B60, r1	; 0x802b60 <Blink_LED_OFF+0xc>
    4de6:	10 92 61 2b 	sts	0x2B61, r1	; 0x802b61 <Blink_LED_OFF+0xd>
    4dea:	10 92 62 2b 	sts	0x2B62, r1	; 0x802b62 <Blink_LED_OFF+0xe>
    4dee:	10 92 42 2b 	sts	0x2B42, r1	; 0x802b42 <TEMP_UPDATE+0x9>
    4df2:	10 92 43 2b 	sts	0x2B43, r1	; 0x802b43 <TEMP_UPDATE+0xa>
    4df6:	48 e4       	ldi	r20, 0x48	; 72
    4df8:	58 ee       	ldi	r21, 0xE8	; 232
    4dfa:	61 e0       	ldi	r22, 0x01	; 1
    4dfc:	70 e0       	ldi	r23, 0x00	; 0
    4dfe:	40 93 3a 2b 	sts	0x2B3A, r20	; 0x802b3a <TEMP_UPDATE+0x1>
    4e02:	50 93 3b 2b 	sts	0x2B3B, r21	; 0x802b3b <TEMP_UPDATE+0x2>
    4e06:	60 93 3c 2b 	sts	0x2B3C, r22	; 0x802b3c <TEMP_UPDATE+0x3>
    4e0a:	70 93 3d 2b 	sts	0x2B3D, r23	; 0x802b3d <TEMP_UPDATE+0x4>
    4e0e:	10 92 3e 2b 	sts	0x2B3E, r1	; 0x802b3e <TEMP_UPDATE+0x5>
    4e12:	10 92 3f 2b 	sts	0x2B3F, r1	; 0x802b3f <TEMP_UPDATE+0x6>
    4e16:	10 92 40 2b 	sts	0x2B40, r1	; 0x802b40 <TEMP_UPDATE+0x7>
    4e1a:	10 92 41 2b 	sts	0x2B41, r1	; 0x802b41 <TEMP_UPDATE+0x8>
    4e1e:	23 e5       	ldi	r18, 0x53	; 83
    4e20:	3c e0       	ldi	r19, 0x0C	; 12
    4e22:	20 93 4a 2b 	sts	0x2B4A, r18	; 0x802b4a <TEMP_UPDATE+0x11>
    4e26:	30 93 4b 2b 	sts	0x2B4B, r19	; 0x802b4b <TEMP_UPDATE+0x12>
    4e2a:	10 92 39 2b 	sts	0x2B39, r1	; 0x802b39 <TEMP_UPDATE>
    4e2e:	10 92 4c 2b 	sts	0x2B4C, r1	; 0x802b4c <TEMP_UPDATE+0x13>
    4e32:	10 92 4d 2b 	sts	0x2B4D, r1	; 0x802b4d <TEMP_UPDATE+0x14>
    4e36:	10 92 4e 2b 	sts	0x2B4E, r1	; 0x802b4e <TEMP_UPDATE+0x15>
    4e3a:	10 92 4f 2b 	sts	0x2B4F, r1	; 0x802b4f <TEMP_UPDATE+0x16>
    4e3e:	10 92 44 2b 	sts	0x2B44, r1	; 0x802b44 <TEMP_UPDATE+0xb>
    4e42:	10 92 45 2b 	sts	0x2B45, r1	; 0x802b45 <TEMP_UPDATE+0xc>
    4e46:	10 92 46 2b 	sts	0x2B46, r1	; 0x802b46 <TEMP_UPDATE+0xd>
    4e4a:	10 92 47 2b 	sts	0x2B47, r1	; 0x802b47 <TEMP_UPDATE+0xe>
    4e4e:	10 92 27 2b 	sts	0x2B27, r1	; 0x802b27 <TEMP_UPDATE_1+0x9>
    4e52:	10 92 28 2b 	sts	0x2B28, r1	; 0x802b28 <TEMP_UPDATE_1+0xa>
    4e56:	48 eb       	ldi	r20, 0xB8	; 184
    4e58:	5f ef       	ldi	r21, 0xFF	; 255
    4e5a:	61 e0       	ldi	r22, 0x01	; 1
    4e5c:	70 e0       	ldi	r23, 0x00	; 0
    4e5e:	40 93 1f 2b 	sts	0x2B1F, r20	; 0x802b1f <TEMP_UPDATE_1+0x1>
    4e62:	50 93 20 2b 	sts	0x2B20, r21	; 0x802b20 <TEMP_UPDATE_1+0x2>
    4e66:	60 93 21 2b 	sts	0x2B21, r22	; 0x802b21 <TEMP_UPDATE_1+0x3>
    4e6a:	70 93 22 2b 	sts	0x2B22, r23	; 0x802b22 <TEMP_UPDATE_1+0x4>
    4e6e:	10 92 23 2b 	sts	0x2B23, r1	; 0x802b23 <TEMP_UPDATE_1+0x5>
    4e72:	10 92 24 2b 	sts	0x2B24, r1	; 0x802b24 <TEMP_UPDATE_1+0x6>
    4e76:	10 92 25 2b 	sts	0x2B25, r1	; 0x802b25 <TEMP_UPDATE_1+0x7>
    4e7a:	10 92 26 2b 	sts	0x2B26, r1	; 0x802b26 <TEMP_UPDATE_1+0x8>
    4e7e:	2c e1       	ldi	r18, 0x1C	; 28
    4e80:	3d e0       	ldi	r19, 0x0D	; 13
    4e82:	20 93 2f 2b 	sts	0x2B2F, r18	; 0x802b2f <TEMP_UPDATE_1+0x11>
    4e86:	30 93 30 2b 	sts	0x2B30, r19	; 0x802b30 <TEMP_UPDATE_1+0x12>
    4e8a:	10 92 1e 2b 	sts	0x2B1E, r1	; 0x802b1e <TEMP_UPDATE_1>
    4e8e:	10 92 31 2b 	sts	0x2B31, r1	; 0x802b31 <TEMP_UPDATE_1+0x13>
    4e92:	10 92 32 2b 	sts	0x2B32, r1	; 0x802b32 <TEMP_UPDATE_1+0x14>
    4e96:	10 92 33 2b 	sts	0x2B33, r1	; 0x802b33 <TEMP_UPDATE_1+0x15>
    4e9a:	10 92 34 2b 	sts	0x2B34, r1	; 0x802b34 <TEMP_UPDATE_1+0x16>
    4e9e:	10 92 29 2b 	sts	0x2B29, r1	; 0x802b29 <TEMP_UPDATE_1+0xb>
    4ea2:	10 92 2a 2b 	sts	0x2B2A, r1	; 0x802b2a <TEMP_UPDATE_1+0xc>
    4ea6:	10 92 2b 2b 	sts	0x2B2B, r1	; 0x802b2b <TEMP_UPDATE_1+0xd>
    4eaa:	10 92 2c 2b 	sts	0x2B2C, r1	; 0x802b2c <TEMP_UPDATE_1+0xe>
    4eae:	10 92 0c 2b 	sts	0x2B0C, r1	; 0x802b0c <Alter_Disp+0x9>
    4eb2:	10 92 0d 2b 	sts	0x2B0D, r1	; 0x802b0d <Alter_Disp+0xa>
    4eb6:	80 93 04 2b 	sts	0x2B04, r24	; 0x802b04 <Alter_Disp+0x1>
    4eba:	90 93 05 2b 	sts	0x2B05, r25	; 0x802b05 <Alter_Disp+0x2>
    4ebe:	a0 93 06 2b 	sts	0x2B06, r26	; 0x802b06 <Alter_Disp+0x3>
    4ec2:	b0 93 07 2b 	sts	0x2B07, r27	; 0x802b07 <Alter_Disp+0x4>
    4ec6:	10 92 08 2b 	sts	0x2B08, r1	; 0x802b08 <Alter_Disp+0x5>
    4eca:	10 92 09 2b 	sts	0x2B09, r1	; 0x802b09 <Alter_Disp+0x6>
    4ece:	10 92 0a 2b 	sts	0x2B0A, r1	; 0x802b0a <Alter_Disp+0x7>
    4ed2:	10 92 0b 2b 	sts	0x2B0B, r1	; 0x802b0b <Alter_Disp+0x8>
    4ed6:	88 e8       	ldi	r24, 0x88	; 136
    4ed8:	91 e0       	ldi	r25, 0x01	; 1
    4eda:	80 93 14 2b 	sts	0x2B14, r24	; 0x802b14 <Alter_Disp+0x11>
    4ede:	90 93 15 2b 	sts	0x2B15, r25	; 0x802b15 <Alter_Disp+0x12>
    4ee2:	10 92 03 2b 	sts	0x2B03, r1	; 0x802b03 <Alter_Disp>
    4ee6:	10 92 16 2b 	sts	0x2B16, r1	; 0x802b16 <Alter_Disp+0x13>
    4eea:	10 92 17 2b 	sts	0x2B17, r1	; 0x802b17 <Alter_Disp+0x14>
    4eee:	10 92 18 2b 	sts	0x2B18, r1	; 0x802b18 <Alter_Disp+0x15>
    4ef2:	10 92 19 2b 	sts	0x2B19, r1	; 0x802b19 <Alter_Disp+0x16>
    4ef6:	10 92 0e 2b 	sts	0x2B0E, r1	; 0x802b0e <Alter_Disp+0xb>
    4efa:	10 92 0f 2b 	sts	0x2B0F, r1	; 0x802b0f <Alter_Disp+0xc>
    4efe:	10 92 10 2b 	sts	0x2B10, r1	; 0x802b10 <Alter_Disp+0xd>
    4f02:	10 92 11 2b 	sts	0x2B11, r1	; 0x802b11 <Alter_Disp+0xe>
    4f06:	10 92 f1 2a 	sts	0x2AF1, r1	; 0x802af1 <PID_EXE+0x9>
    4f0a:	10 92 f2 2a 	sts	0x2AF2, r1	; 0x802af2 <PID_EXE+0xa>
    4f0e:	80 e8       	ldi	r24, 0x80	; 128
    4f10:	9a e1       	ldi	r25, 0x1A	; 26
    4f12:	a6 e0       	ldi	r26, 0x06	; 6
    4f14:	b0 e0       	ldi	r27, 0x00	; 0
    4f16:	80 93 e9 2a 	sts	0x2AE9, r24	; 0x802ae9 <PID_EXE+0x1>
    4f1a:	90 93 ea 2a 	sts	0x2AEA, r25	; 0x802aea <PID_EXE+0x2>
    4f1e:	a0 93 eb 2a 	sts	0x2AEB, r26	; 0x802aeb <PID_EXE+0x3>
    4f22:	b0 93 ec 2a 	sts	0x2AEC, r27	; 0x802aec <PID_EXE+0x4>
    4f26:	10 92 ed 2a 	sts	0x2AED, r1	; 0x802aed <PID_EXE+0x5>
    4f2a:	10 92 ee 2a 	sts	0x2AEE, r1	; 0x802aee <PID_EXE+0x6>
    4f2e:	10 92 ef 2a 	sts	0x2AEF, r1	; 0x802aef <PID_EXE+0x7>
    4f32:	10 92 f0 2a 	sts	0x2AF0, r1	; 0x802af0 <PID_EXE+0x8>
    4f36:	84 e6       	ldi	r24, 0x64	; 100
    4f38:	9d e0       	ldi	r25, 0x0D	; 13
    4f3a:	80 93 f9 2a 	sts	0x2AF9, r24	; 0x802af9 <PID_EXE+0x11>
    4f3e:	90 93 fa 2a 	sts	0x2AFA, r25	; 0x802afa <PID_EXE+0x12>
    4f42:	10 92 e8 2a 	sts	0x2AE8, r1	; 0x802ae8 <PID_EXE>
    4f46:	10 92 fb 2a 	sts	0x2AFB, r1	; 0x802afb <PID_EXE+0x13>
    4f4a:	10 92 fc 2a 	sts	0x2AFC, r1	; 0x802afc <PID_EXE+0x14>
    4f4e:	10 92 fd 2a 	sts	0x2AFD, r1	; 0x802afd <PID_EXE+0x15>
    4f52:	10 92 fe 2a 	sts	0x2AFE, r1	; 0x802afe <PID_EXE+0x16>
    4f56:	10 92 f3 2a 	sts	0x2AF3, r1	; 0x802af3 <PID_EXE+0xb>
    4f5a:	10 92 f4 2a 	sts	0x2AF4, r1	; 0x802af4 <PID_EXE+0xc>
    4f5e:	10 92 f5 2a 	sts	0x2AF5, r1	; 0x802af5 <PID_EXE+0xd>
    4f62:	10 92 f6 2a 	sts	0x2AF6, r1	; 0x802af6 <PID_EXE+0xe>
    4f66:	c0 90 13 28 	lds	r12, 0x2813	; 0x802813 <Kd>
    4f6a:	d0 90 14 28 	lds	r13, 0x2814	; 0x802814 <Kd+0x1>
    4f6e:	e0 90 15 28 	lds	r14, 0x2815	; 0x802815 <Kd+0x2>
    4f72:	f0 90 16 28 	lds	r15, 0x2816	; 0x802816 <Kd+0x3>
    4f76:	80 90 0f 28 	lds	r8, 0x280F	; 0x80280f <Ki>
    4f7a:	90 90 10 28 	lds	r9, 0x2810	; 0x802810 <Ki+0x1>
    4f7e:	a0 90 11 28 	lds	r10, 0x2811	; 0x802811 <Ki+0x2>
    4f82:	b0 90 12 28 	lds	r11, 0x2812	; 0x802812 <Ki+0x3>
    4f86:	40 90 0b 28 	lds	r4, 0x280B	; 0x80280b <Kp>
    4f8a:	50 90 0c 28 	lds	r5, 0x280C	; 0x80280c <Kp+0x1>
    4f8e:	60 90 0d 28 	lds	r6, 0x280D	; 0x80280d <Kp+0x2>
    4f92:	70 90 0e 28 	lds	r7, 0x280E	; 0x80280e <Kp+0x3>
    4f96:	82 ef       	ldi	r24, 0xF2	; 242
    4f98:	99 e2       	ldi	r25, 0x29	; 41
    4f9a:	80 93 18 2a 	sts	0x2A18, r24	; 0x802a18 <myPID+0x1e>
    4f9e:	90 93 19 2a 	sts	0x2A19, r25	; 0x802a19 <myPID+0x1f>
    4fa2:	86 ef       	ldi	r24, 0xF6	; 246
    4fa4:	99 e2       	ldi	r25, 0x29	; 41
    4fa6:	80 93 16 2a 	sts	0x2A16, r24	; 0x802a16 <myPID+0x1c>
    4faa:	90 93 17 2a 	sts	0x2A17, r25	; 0x802a17 <myPID+0x1d>
    4fae:	8e ee       	ldi	r24, 0xEE	; 238
    4fb0:	99 e2       	ldi	r25, 0x29	; 41
    4fb2:	80 93 1a 2a 	sts	0x2A1A, r24	; 0x802a1a <myPID+0x20>
    4fb6:	90 93 1b 2a 	sts	0x2A1B, r25	; 0x802a1b <myPID+0x21>
    4fba:	10 92 34 2a 	sts	0x2A34, r1	; 0x802a34 <myPID+0x3a>
    4fbe:	10 92 2c 2a 	sts	0x2A2C, r1	; 0x802a2c <myPID+0x32>
    4fc2:	10 92 2d 2a 	sts	0x2A2D, r1	; 0x802a2d <myPID+0x33>
    4fc6:	10 92 2e 2a 	sts	0x2A2E, r1	; 0x802a2e <myPID+0x34>
    4fca:	10 92 2f 2a 	sts	0x2A2F, r1	; 0x802a2f <myPID+0x35>
    4fce:	80 e0       	ldi	r24, 0x00	; 0
    4fd0:	90 e0       	ldi	r25, 0x00	; 0
    4fd2:	af e7       	ldi	r26, 0x7F	; 127
    4fd4:	b3 e4       	ldi	r27, 0x43	; 67
    4fd6:	80 93 30 2a 	sts	0x2A30, r24	; 0x802a30 <myPID+0x36>
    4fda:	90 93 31 2a 	sts	0x2A31, r25	; 0x802a31 <myPID+0x37>
    4fde:	a0 93 32 2a 	sts	0x2A32, r26	; 0x802a32 <myPID+0x38>
    4fe2:	b0 93 33 2a 	sts	0x2A33, r27	; 0x802a33 <myPID+0x39>
    4fe6:	84 e6       	ldi	r24, 0x64	; 100
    4fe8:	90 e0       	ldi	r25, 0x00	; 0
    4fea:	a0 e0       	ldi	r26, 0x00	; 0
    4fec:	b0 e0       	ldi	r27, 0x00	; 0
    4fee:	80 93 28 2a 	sts	0x2A28, r24	; 0x802a28 <myPID+0x2e>
    4ff2:	90 93 29 2a 	sts	0x2A29, r25	; 0x802a29 <myPID+0x2f>
    4ff6:	a0 93 2a 2a 	sts	0x2A2A, r26	; 0x802a2a <myPID+0x30>
    4ffa:	b0 93 2b 2a 	sts	0x2A2B, r27	; 0x802a2b <myPID+0x31>
    4ffe:	10 92 12 2a 	sts	0x2A12, r1	; 0x802a12 <myPID+0x18>
    5002:	10 92 13 2a 	sts	0x2A13, r1	; 0x802a13 <myPID+0x19>
    5006:	20 e0       	ldi	r18, 0x00	; 0
    5008:	30 e0       	ldi	r19, 0x00	; 0
    500a:	a9 01       	movw	r20, r18
    500c:	c3 01       	movw	r24, r6
    500e:	b2 01       	movw	r22, r4
    5010:	0e 94 65 38 	call	0x70ca	; 0x70ca <__cmpsf2>
    5014:	87 fd       	sbrc	r24, 7
    5016:	5a c0       	rjmp	.+180    	; 0x50cc <global constructors keyed to 65535_0_Butn.cpp.o.4193+0x5c8>
    5018:	20 e0       	ldi	r18, 0x00	; 0
    501a:	30 e0       	ldi	r19, 0x00	; 0
    501c:	a9 01       	movw	r20, r18
    501e:	c5 01       	movw	r24, r10
    5020:	b4 01       	movw	r22, r8
    5022:	0e 94 65 38 	call	0x70ca	; 0x70ca <__cmpsf2>
    5026:	87 fd       	sbrc	r24, 7
    5028:	51 c0       	rjmp	.+162    	; 0x50cc <global constructors keyed to 65535_0_Butn.cpp.o.4193+0x5c8>
    502a:	20 e0       	ldi	r18, 0x00	; 0
    502c:	30 e0       	ldi	r19, 0x00	; 0
    502e:	a9 01       	movw	r20, r18
    5030:	c7 01       	movw	r24, r14
    5032:	b6 01       	movw	r22, r12
    5034:	0e 94 65 38 	call	0x70ca	; 0x70ca <__cmpsf2>
    5038:	87 fd       	sbrc	r24, 7
    503a:	48 c0       	rjmp	.+144    	; 0x50cc <global constructors keyed to 65535_0_Butn.cpp.o.4193+0x5c8>
    503c:	81 e0       	ldi	r24, 0x01	; 1
    503e:	90 e0       	ldi	r25, 0x00	; 0
    5040:	80 93 14 2a 	sts	0x2A14, r24	; 0x802a14 <myPID+0x1a>
    5044:	90 93 15 2a 	sts	0x2A15, r25	; 0x802a15 <myPID+0x1b>
    5048:	80 93 35 2a 	sts	0x2A35, r24	; 0x802a35 <myPID+0x3b>
    504c:	40 92 fa 29 	sts	0x29FA, r4	; 0x8029fa <myPID>
    5050:	50 92 fb 29 	sts	0x29FB, r5	; 0x8029fb <myPID+0x1>
    5054:	60 92 fc 29 	sts	0x29FC, r6	; 0x8029fc <myPID+0x2>
    5058:	70 92 fd 29 	sts	0x29FD, r7	; 0x8029fd <myPID+0x3>
    505c:	80 92 fe 29 	sts	0x29FE, r8	; 0x8029fe <myPID+0x4>
    5060:	90 92 ff 29 	sts	0x29FF, r9	; 0x8029ff <myPID+0x5>
    5064:	a0 92 00 2a 	sts	0x2A00, r10	; 0x802a00 <myPID+0x6>
    5068:	b0 92 01 2a 	sts	0x2A01, r11	; 0x802a01 <myPID+0x7>
    506c:	c0 92 02 2a 	sts	0x2A02, r12	; 0x802a02 <myPID+0x8>
    5070:	d0 92 03 2a 	sts	0x2A03, r13	; 0x802a03 <myPID+0x9>
    5074:	e0 92 04 2a 	sts	0x2A04, r14	; 0x802a04 <myPID+0xa>
    5078:	f0 92 05 2a 	sts	0x2A05, r15	; 0x802a05 <myPID+0xb>
    507c:	40 92 06 2a 	sts	0x2A06, r4	; 0x802a06 <myPID+0xc>
    5080:	50 92 07 2a 	sts	0x2A07, r5	; 0x802a07 <myPID+0xd>
    5084:	60 92 08 2a 	sts	0x2A08, r6	; 0x802a08 <myPID+0xe>
    5088:	70 92 09 2a 	sts	0x2A09, r7	; 0x802a09 <myPID+0xf>
    508c:	2d ec       	ldi	r18, 0xCD	; 205
    508e:	3c ec       	ldi	r19, 0xCC	; 204
    5090:	4c ec       	ldi	r20, 0xCC	; 204
    5092:	5d e3       	ldi	r21, 0x3D	; 61
    5094:	c5 01       	movw	r24, r10
    5096:	b4 01       	movw	r22, r8
    5098:	0e 94 b8 39 	call	0x7370	; 0x7370 <__mulsf3>
    509c:	60 93 0a 2a 	sts	0x2A0A, r22	; 0x802a0a <myPID+0x10>
    50a0:	70 93 0b 2a 	sts	0x2A0B, r23	; 0x802a0b <myPID+0x11>
    50a4:	80 93 0c 2a 	sts	0x2A0C, r24	; 0x802a0c <myPID+0x12>
    50a8:	90 93 0d 2a 	sts	0x2A0D, r25	; 0x802a0d <myPID+0x13>
    50ac:	2d ec       	ldi	r18, 0xCD	; 205
    50ae:	3c ec       	ldi	r19, 0xCC	; 204
    50b0:	4c ec       	ldi	r20, 0xCC	; 204
    50b2:	5d e3       	ldi	r21, 0x3D	; 61
    50b4:	c7 01       	movw	r24, r14
    50b6:	b6 01       	movw	r22, r12
    50b8:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__divsf3>
    50bc:	60 93 0e 2a 	sts	0x2A0E, r22	; 0x802a0e <myPID+0x14>
    50c0:	70 93 0f 2a 	sts	0x2A0F, r23	; 0x802a0f <myPID+0x15>
    50c4:	80 93 10 2a 	sts	0x2A10, r24	; 0x802a10 <myPID+0x16>
    50c8:	90 93 11 2a 	sts	0x2A11, r25	; 0x802a11 <myPID+0x17>
    50cc:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <millis>
    50d0:	c0 90 28 2a 	lds	r12, 0x2A28	; 0x802a28 <myPID+0x2e>
    50d4:	d0 90 29 2a 	lds	r13, 0x2A29	; 0x802a29 <myPID+0x2f>
    50d8:	e0 90 2a 2a 	lds	r14, 0x2A2A	; 0x802a2a <myPID+0x30>
    50dc:	f0 90 2b 2a 	lds	r15, 0x2A2B	; 0x802a2b <myPID+0x31>
    50e0:	6c 19       	sub	r22, r12
    50e2:	7d 09       	sbc	r23, r13
    50e4:	8e 09       	sbc	r24, r14
    50e6:	9f 09       	sbc	r25, r15
    50e8:	60 93 1c 2a 	sts	0x2A1C, r22	; 0x802a1c <myPID+0x22>
    50ec:	70 93 1d 2a 	sts	0x2A1D, r23	; 0x802a1d <myPID+0x23>
    50f0:	80 93 1e 2a 	sts	0x2A1E, r24	; 0x802a1e <myPID+0x24>
    50f4:	90 93 1f 2a 	sts	0x2A1F, r25	; 0x802a1f <myPID+0x25>
    50f8:	10 92 d6 2a 	sts	0x2AD6, r1	; 0x802ad6 <VersionDisplay+0x9>
    50fc:	10 92 d7 2a 	sts	0x2AD7, r1	; 0x802ad7 <VersionDisplay+0xa>
    5100:	80 e4       	ldi	r24, 0x40	; 64
    5102:	92 e4       	ldi	r25, 0x42	; 66
    5104:	af e0       	ldi	r26, 0x0F	; 15
    5106:	b0 e0       	ldi	r27, 0x00	; 0
    5108:	80 93 ce 2a 	sts	0x2ACE, r24	; 0x802ace <VersionDisplay+0x1>
    510c:	90 93 cf 2a 	sts	0x2ACF, r25	; 0x802acf <VersionDisplay+0x2>
    5110:	a0 93 d0 2a 	sts	0x2AD0, r26	; 0x802ad0 <VersionDisplay+0x3>
    5114:	b0 93 d1 2a 	sts	0x2AD1, r27	; 0x802ad1 <VersionDisplay+0x4>
    5118:	81 e0       	ldi	r24, 0x01	; 1
    511a:	90 e0       	ldi	r25, 0x00	; 0
    511c:	a0 e0       	ldi	r26, 0x00	; 0
    511e:	b0 e0       	ldi	r27, 0x00	; 0
    5120:	80 93 d2 2a 	sts	0x2AD2, r24	; 0x802ad2 <VersionDisplay+0x5>
    5124:	90 93 d3 2a 	sts	0x2AD3, r25	; 0x802ad3 <VersionDisplay+0x6>
    5128:	a0 93 d4 2a 	sts	0x2AD4, r26	; 0x802ad4 <VersionDisplay+0x7>
    512c:	b0 93 d5 2a 	sts	0x2AD5, r27	; 0x802ad5 <VersionDisplay+0x8>
    5130:	8a e7       	ldi	r24, 0x7A	; 122
    5132:	91 e0       	ldi	r25, 0x01	; 1
    5134:	80 93 de 2a 	sts	0x2ADE, r24	; 0x802ade <VersionDisplay+0x11>
    5138:	90 93 df 2a 	sts	0x2ADF, r25	; 0x802adf <VersionDisplay+0x12>
    513c:	10 92 cd 2a 	sts	0x2ACD, r1	; 0x802acd <VersionDisplay>
    5140:	10 92 e0 2a 	sts	0x2AE0, r1	; 0x802ae0 <VersionDisplay+0x13>
    5144:	10 92 e1 2a 	sts	0x2AE1, r1	; 0x802ae1 <VersionDisplay+0x14>
    5148:	10 92 e2 2a 	sts	0x2AE2, r1	; 0x802ae2 <VersionDisplay+0x15>
    514c:	10 92 e3 2a 	sts	0x2AE3, r1	; 0x802ae3 <VersionDisplay+0x16>
    5150:	10 92 d8 2a 	sts	0x2AD8, r1	; 0x802ad8 <VersionDisplay+0xb>
    5154:	10 92 d9 2a 	sts	0x2AD9, r1	; 0x802ad9 <VersionDisplay+0xc>
    5158:	10 92 da 2a 	sts	0x2ADA, r1	; 0x802ada <VersionDisplay+0xd>
    515c:	10 92 db 2a 	sts	0x2ADB, r1	; 0x802adb <VersionDisplay+0xe>
    5160:	63 e2       	ldi	r22, 0x23	; 35
    5162:	70 e0       	ldi	r23, 0x00	; 0
    5164:	8e ea       	ldi	r24, 0xAE	; 174
    5166:	9a e2       	ldi	r25, 0x2A	; 42
    5168:	0e 94 58 08 	call	0x10b0	; 0x10b0 <OneButton::OneButton(int, int) [clone .constprop.58]>
    516c:	65 e2       	ldi	r22, 0x25	; 37
    516e:	70 e0       	ldi	r23, 0x00	; 0
    5170:	8f e8       	ldi	r24, 0x8F	; 143
    5172:	9a e2       	ldi	r25, 0x2A	; 42
    5174:	0e 94 58 08 	call	0x10b0	; 0x10b0 <OneButton::OneButton(int, int) [clone .constprop.58]>
    5178:	64 e2       	ldi	r22, 0x24	; 36
    517a:	70 e0       	ldi	r23, 0x00	; 0
    517c:	80 e7       	ldi	r24, 0x70	; 112
    517e:	9a e2       	ldi	r25, 0x2A	; 42
    5180:	0e 94 58 08 	call	0x10b0	; 0x10b0 <OneButton::OneButton(int, int) [clone .constprop.58]>
    5184:	62 e2       	ldi	r22, 0x22	; 34
    5186:	70 e0       	ldi	r23, 0x00	; 0
    5188:	81 e5       	ldi	r24, 0x51	; 81
    518a:	9a e2       	ldi	r25, 0x2A	; 42
    518c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <OneButton::OneButton(int, int) [clone .constprop.58]>
    5190:	81 e0       	ldi	r24, 0x01	; 1
    5192:	90 e0       	ldi	r25, 0x00	; 0
    5194:	80 93 3f 2a 	sts	0x2A3F, r24	; 0x802a3f <toggle_ticker+0x9>
    5198:	90 93 40 2a 	sts	0x2A40, r25	; 0x802a40 <toggle_ticker+0xa>
    519c:	88 ee       	ldi	r24, 0xE8	; 232
    519e:	93 e0       	ldi	r25, 0x03	; 3
    51a0:	a0 e0       	ldi	r26, 0x00	; 0
    51a2:	b0 e0       	ldi	r27, 0x00	; 0
    51a4:	80 93 37 2a 	sts	0x2A37, r24	; 0x802a37 <toggle_ticker+0x1>
    51a8:	90 93 38 2a 	sts	0x2A38, r25	; 0x802a38 <toggle_ticker+0x2>
    51ac:	a0 93 39 2a 	sts	0x2A39, r26	; 0x802a39 <toggle_ticker+0x3>
    51b0:	b0 93 3a 2a 	sts	0x2A3A, r27	; 0x802a3a <toggle_ticker+0x4>
    51b4:	10 92 3b 2a 	sts	0x2A3B, r1	; 0x802a3b <toggle_ticker+0x5>
    51b8:	10 92 3c 2a 	sts	0x2A3C, r1	; 0x802a3c <toggle_ticker+0x6>
    51bc:	10 92 3d 2a 	sts	0x2A3D, r1	; 0x802a3d <toggle_ticker+0x7>
    51c0:	10 92 3e 2a 	sts	0x2A3E, r1	; 0x802a3e <toggle_ticker+0x8>
    51c4:	8d e7       	ldi	r24, 0x7D	; 125
    51c6:	91 e0       	ldi	r25, 0x01	; 1
    51c8:	80 93 47 2a 	sts	0x2A47, r24	; 0x802a47 <toggle_ticker+0x11>
    51cc:	90 93 48 2a 	sts	0x2A48, r25	; 0x802a48 <toggle_ticker+0x12>
    51d0:	10 92 36 2a 	sts	0x2A36, r1	; 0x802a36 <toggle_ticker>
    51d4:	10 92 49 2a 	sts	0x2A49, r1	; 0x802a49 <toggle_ticker+0x13>
    51d8:	10 92 4a 2a 	sts	0x2A4A, r1	; 0x802a4a <toggle_ticker+0x14>
    51dc:	10 92 4b 2a 	sts	0x2A4B, r1	; 0x802a4b <toggle_ticker+0x15>
    51e0:	10 92 4c 2a 	sts	0x2A4C, r1	; 0x802a4c <toggle_ticker+0x16>
    51e4:	10 92 41 2a 	sts	0x2A41, r1	; 0x802a41 <toggle_ticker+0xb>
    51e8:	10 92 42 2a 	sts	0x2A42, r1	; 0x802a42 <toggle_ticker+0xc>
    51ec:	10 92 43 2a 	sts	0x2A43, r1	; 0x802a43 <toggle_ticker+0xd>
    51f0:	10 92 44 2a 	sts	0x2A44, r1	; 0x802a44 <toggle_ticker+0xe>
    51f4:	ff 90       	pop	r15
    51f6:	ef 90       	pop	r14
    51f8:	df 90       	pop	r13
    51fa:	cf 90       	pop	r12
    51fc:	bf 90       	pop	r11
    51fe:	af 90       	pop	r10
    5200:	9f 90       	pop	r9
    5202:	8f 90       	pop	r8
    5204:	7f 90       	pop	r7
    5206:	6f 90       	pop	r6
    5208:	5f 90       	pop	r5
    520a:	4f 90       	pop	r4
    520c:	08 95       	ret

0000520e <main>:
main():
    520e:	cf 93       	push	r28
    5210:	df 93       	push	r29
    5212:	00 d0       	rcall	.+0      	; 0x5214 <main+0x6>
    5214:	cd b7       	in	r28, 0x3d	; 61
    5216:	de b7       	in	r29, 0x3e	; 62
init():
    5218:	88 ed       	ldi	r24, 0xD8	; 216
    521a:	90 e0       	ldi	r25, 0x00	; 0
    521c:	84 bf       	out	0x34, r24	; 52
    521e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f4061>
    5222:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
    5226:	86 60       	ori	r24, 0x06	; 6
    5228:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
    522c:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
    5230:	81 60       	ori	r24, 0x01	; 1
    5232:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
analogReference():
    5236:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
    523a:	8f 7c       	andi	r24, 0xCF	; 207
    523c:	80 65       	ori	r24, 0x50	; 80
    523e:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
init():
    5242:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f45e2>
setup_timers():
    5246:	82 e0       	ldi	r24, 0x02	; 2
    5248:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <__TEXT_REGION_LENGTH__+0x7f45e4>
    524c:	81 e0       	ldi	r24, 0x01	; 1
    524e:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <__TEXT_REGION_LENGTH__+0x7f4a03>
    5252:	8e ef       	ldi	r24, 0xFE	; 254
    5254:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <__TEXT_REGION_LENGTH__+0x7f4a27>
    5258:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x7f4a26>
    525c:	80 e8       	ldi	r24, 0x80	; 128
    525e:	80 93 2d 0a 	sts	0x0A2D, r24	; 0x800a2d <__TEXT_REGION_LENGTH__+0x7f4a2d>
    5262:	80 93 2b 0a 	sts	0x0A2B, r24	; 0x800a2b <__TEXT_REGION_LENGTH__+0x7f4a2b>
    5266:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__TEXT_REGION_LENGTH__+0x7f4a29>
    526a:	80 93 2c 0a 	sts	0x0A2C, r24	; 0x800a2c <__TEXT_REGION_LENGTH__+0x7f4a2c>
    526e:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <__TEXT_REGION_LENGTH__+0x7f4a2a>
    5272:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x7f4a28>
    5276:	8b e0       	ldi	r24, 0x0B	; 11
    5278:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f4a00>
    527c:	87 e0       	ldi	r24, 0x07	; 7
    527e:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <__TEXT_REGION_LENGTH__+0x7f45e5>
main():
    5282:	e0 e8       	ldi	r30, 0x80	; 128
    5284:	fa e0       	ldi	r31, 0x0A	; 10
setup_timers():
    5286:	37 e0       	ldi	r19, 0x07	; 7
    5288:	2e ef       	ldi	r18, 0xFE	; 254
    528a:	90 e8       	ldi	r25, 0x80	; 128
    528c:	85 e0       	ldi	r24, 0x05	; 5
    528e:	31 83       	std	Z+1, r19	; 0x01
    5290:	24 87       	std	Z+12, r18	; 0x0c
    5292:	95 87       	std	Z+13, r25	; 0x0d
    5294:	80 83       	st	Z, r24
    5296:	70 96       	adiw	r30, 0x10	; 16
    5298:	e0 3c       	cpi	r30, 0xC0	; 192
    529a:	4a e0       	ldi	r20, 0x0A	; 10
    529c:	f4 07       	cpc	r31, r20
    529e:	b9 f7       	brne	.-18     	; 0x528e <main+0x80>
init():
    52a0:	10 92 a1 0a 	sts	0x0AA1, r1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7f4aa1>
    52a4:	8f e7       	ldi	r24, 0x7F	; 127
    52a6:	9e e3       	ldi	r25, 0x3E	; 62
    52a8:	80 93 ac 0a 	sts	0x0AAC, r24	; 0x800aac <__TEXT_REGION_LENGTH__+0x7f4aac>
    52ac:	90 93 ad 0a 	sts	0x0AAD, r25	; 0x800aad <__TEXT_REGION_LENGTH__+0x7f4aad>
    52b0:	80 91 a5 0a 	lds	r24, 0x0AA5	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x7f4aa5>
    52b4:	81 60       	ori	r24, 0x01	; 1
    52b6:	80 93 a5 0a 	sts	0x0AA5, r24	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x7f4aa5>
    52ba:	10 92 a0 0a 	sts	0x0AA0, r1	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7f4aa0>
    52be:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7f4aa0>
    52c2:	81 60       	ori	r24, 0x01	; 1
    52c4:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7f4aa0>
    52c8:	78 94       	sei
setup():
    52ca:	47 e2       	ldi	r20, 0x27	; 39
    52cc:	66 e2       	ldi	r22, 0x26	; 38
    52ce:	81 e5       	ldi	r24, 0x51	; 81
    52d0:	99 e2       	ldi	r25, 0x29	; 41
    52d2:	0e 94 a9 06 	call	0xd52	; 0xd52 <UartClass::pins(unsigned char, unsigned char)>
    52d6:	40 e8       	ldi	r20, 0x80	; 128
    52d8:	55 e2       	ldi	r21, 0x25	; 37
    52da:	60 e0       	ldi	r22, 0x00	; 0
    52dc:	70 e0       	ldi	r23, 0x00	; 0
    52de:	81 e5       	ldi	r24, 0x51	; 81
    52e0:	99 e2       	ldi	r25, 0x29	; 41
    52e2:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <UartClass::begin(unsigned long)>
SETUP():
    52e6:	f8 94       	cli
    52e8:	81 e0       	ldi	r24, 0x01	; 1
    52ea:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <__TEXT_REGION_LENGTH__+0x7f4a0a>
    52ee:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7f4a01>
    52f2:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <__TEXT_REGION_LENGTH__+0x7f4a09>
    52f6:	8e 7f       	andi	r24, 0xFE	; 254
    52f8:	80 93 09 0a 	sts	0x0A09, r24	; 0x800a09 <__TEXT_REGION_LENGTH__+0x7f4a09>
    52fc:	8a ef       	ldi	r24, 0xFA	; 250
    52fe:	90 e0       	ldi	r25, 0x00	; 0
    5300:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x7f4a26>
    5304:	90 93 27 0a 	sts	0x0A27, r25	; 0x800a27 <__TEXT_REGION_LENGTH__+0x7f4a27>
    5308:	8f e0       	ldi	r24, 0x0F	; 15
    530a:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f4a00>
    530e:	78 94       	sei
    5310:	61 e0       	ldi	r22, 0x01	; 1
    5312:	8b e0       	ldi	r24, 0x0B	; 11
    5314:	0e 94 e7 07 	call	0xfce	; 0xfce <pinMode>
    5318:	61 e0       	ldi	r22, 0x01	; 1
    531a:	8a e0       	ldi	r24, 0x0A	; 10
    531c:	0e 94 e7 07 	call	0xfce	; 0xfce <pinMode>
    5320:	61 e0       	ldi	r22, 0x01	; 1
    5322:	89 e0       	ldi	r24, 0x09	; 9
    5324:	0e 94 e7 07 	call	0xfce	; 0xfce <pinMode>
    5328:	61 e0       	ldi	r22, 0x01	; 1
    532a:	88 e0       	ldi	r24, 0x08	; 8
    532c:	0e 94 e7 07 	call	0xfce	; 0xfce <pinMode>
    5330:	61 e0       	ldi	r22, 0x01	; 1
    5332:	84 e0       	ldi	r24, 0x04	; 4
    5334:	0e 94 e7 07 	call	0xfce	; 0xfce <pinMode>
    5338:	61 e0       	ldi	r22, 0x01	; 1
    533a:	85 e0       	ldi	r24, 0x05	; 5
    533c:	0e 94 e7 07 	call	0xfce	; 0xfce <pinMode>
    5340:	61 e0       	ldi	r22, 0x01	; 1
    5342:	86 e0       	ldi	r24, 0x06	; 6
    5344:	0e 94 e7 07 	call	0xfce	; 0xfce <pinMode>
    5348:	61 e0       	ldi	r22, 0x01	; 1
    534a:	87 e0       	ldi	r24, 0x07	; 7
    534c:	0e 94 e7 07 	call	0xfce	; 0xfce <pinMode>
    5350:	61 e0       	ldi	r22, 0x01	; 1
    5352:	84 e1       	ldi	r24, 0x14	; 20
    5354:	0e 94 e7 07 	call	0xfce	; 0xfce <pinMode>
    5358:	61 e0       	ldi	r22, 0x01	; 1
    535a:	83 e1       	ldi	r24, 0x13	; 19
    535c:	0e 94 e7 07 	call	0xfce	; 0xfce <pinMode>
    5360:	61 e0       	ldi	r22, 0x01	; 1
    5362:	82 e1       	ldi	r24, 0x12	; 18
    5364:	0e 94 e7 07 	call	0xfce	; 0xfce <pinMode>
    5368:	61 e0       	ldi	r22, 0x01	; 1
    536a:	8e e1       	ldi	r24, 0x1E	; 30
    536c:	0e 94 e7 07 	call	0xfce	; 0xfce <pinMode>
    5370:	61 e0       	ldi	r22, 0x01	; 1
    5372:	80 e2       	ldi	r24, 0x20	; 32
    5374:	0e 94 e7 07 	call	0xfce	; 0xfce <pinMode>
    5378:	61 e0       	ldi	r22, 0x01	; 1
    537a:	8f e1       	ldi	r24, 0x1F	; 31
    537c:	0e 94 e7 07 	call	0xfce	; 0xfce <pinMode>
    5380:	61 e0       	ldi	r22, 0x01	; 1
    5382:	88 e0       	ldi	r24, 0x08	; 8
    5384:	0e 94 54 08 	call	0x10a8	; 0x10a8 <digitalWrite>
    5388:	61 e0       	ldi	r22, 0x01	; 1
    538a:	89 e0       	ldi	r24, 0x09	; 9
    538c:	0e 94 54 08 	call	0x10a8	; 0x10a8 <digitalWrite>
    5390:	61 e0       	ldi	r22, 0x01	; 1
    5392:	8a e0       	ldi	r24, 0x0A	; 10
    5394:	0e 94 54 08 	call	0x10a8	; 0x10a8 <digitalWrite>
    5398:	61 e0       	ldi	r22, 0x01	; 1
    539a:	8b e0       	ldi	r24, 0x0B	; 11
    539c:	0e 94 54 08 	call	0x10a8	; 0x10a8 <digitalWrite>
    53a0:	61 e0       	ldi	r22, 0x01	; 1
    53a2:	87 e0       	ldi	r24, 0x07	; 7
    53a4:	0e 94 54 08 	call	0x10a8	; 0x10a8 <digitalWrite>
    53a8:	61 e0       	ldi	r22, 0x01	; 1
    53aa:	86 e0       	ldi	r24, 0x06	; 6
    53ac:	0e 94 54 08 	call	0x10a8	; 0x10a8 <digitalWrite>
    53b0:	61 e0       	ldi	r22, 0x01	; 1
    53b2:	85 e0       	ldi	r24, 0x05	; 5
    53b4:	0e 94 54 08 	call	0x10a8	; 0x10a8 <digitalWrite>
    53b8:	61 e0       	ldi	r22, 0x01	; 1
    53ba:	84 e0       	ldi	r24, 0x04	; 4
    53bc:	0e 94 54 08 	call	0x10a8	; 0x10a8 <digitalWrite>
pinMode():
    53c0:	61 e0       	ldi	r22, 0x01	; 1
    53c2:	8c e0       	ldi	r24, 0x0C	; 12
    53c4:	0e 94 b3 07 	call	0xf66	; 0xf66 <pinMode.part.1>
    53c8:	61 e0       	ldi	r22, 0x01	; 1
    53ca:	8d e0       	ldi	r24, 0x0D	; 13
    53cc:	0e 94 b3 07 	call	0xf66	; 0xf66 <pinMode.part.1>
digitalWrite():
    53d0:	60 e0       	ldi	r22, 0x00	; 0
    53d2:	8c e0       	ldi	r24, 0x0C	; 12
    53d4:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
    53d8:	60 e0       	ldi	r22, 0x00	; 0
    53da:	8d e0       	ldi	r24, 0x0D	; 13
    53dc:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
SETUP():
    53e0:	8b ed       	ldi	r24, 0xDB	; 219
    53e2:	9b e2       	ldi	r25, 0x2B	; 43
    53e4:	0e 94 0a 0b 	call	0x1614	; 0x1614 <Ticker::start()>
SetOutputLimits():
    53e8:	10 92 2c 2a 	sts	0x2A2C, r1	; 0x802a2c <myPID+0x32>
    53ec:	10 92 2d 2a 	sts	0x2A2D, r1	; 0x802a2d <myPID+0x33>
    53f0:	10 92 2e 2a 	sts	0x2A2E, r1	; 0x802a2e <myPID+0x34>
    53f4:	10 92 2f 2a 	sts	0x2A2F, r1	; 0x802a2f <myPID+0x35>
    53f8:	81 2c       	mov	r8, r1
    53fa:	91 2c       	mov	r9, r1
    53fc:	6a e7       	ldi	r22, 0x7A	; 122
    53fe:	a6 2e       	mov	r10, r22
    5400:	64 e4       	ldi	r22, 0x44	; 68
    5402:	b6 2e       	mov	r11, r22
    5404:	80 92 30 2a 	sts	0x2A30, r8	; 0x802a30 <myPID+0x36>
    5408:	90 92 31 2a 	sts	0x2A31, r9	; 0x802a31 <myPID+0x37>
    540c:	a0 92 32 2a 	sts	0x2A32, r10	; 0x802a32 <myPID+0x38>
    5410:	b0 92 33 2a 	sts	0x2A33, r11	; 0x802a33 <myPID+0x39>
    5414:	80 91 34 2a 	lds	r24, 0x2A34	; 0x802a34 <myPID+0x3a>
    5418:	88 23       	and	r24, r24
    541a:	09 f4       	brne	.+2      	; 0x541e <main+0x210>
    541c:	57 c0       	rjmp	.+174    	; 0x54cc <main+0x2be>
    541e:	00 91 18 2a 	lds	r16, 0x2A18	; 0x802a18 <myPID+0x1e>
    5422:	10 91 19 2a 	lds	r17, 0x2A19	; 0x802a19 <myPID+0x1f>
    5426:	d8 01       	movw	r26, r16
    5428:	cd 90       	ld	r12, X+
    542a:	dd 90       	ld	r13, X+
    542c:	ed 90       	ld	r14, X+
    542e:	fc 90       	ld	r15, X
    5430:	a5 01       	movw	r20, r10
    5432:	94 01       	movw	r18, r8
    5434:	c7 01       	movw	r24, r14
    5436:	b6 01       	movw	r22, r12
    5438:	0e 94 b4 39 	call	0x7368	; 0x7368 <__gesf2>
    543c:	18 16       	cp	r1, r24
    543e:	34 f5       	brge	.+76     	; 0x548c <main+0x27e>
    5440:	f8 01       	movw	r30, r16
    5442:	80 82       	st	Z, r8
    5444:	91 82       	std	Z+1, r9	; 0x01
    5446:	a2 82       	std	Z+2, r10	; 0x02
    5448:	b3 82       	std	Z+3, r11	; 0x03
    544a:	80 90 20 2a 	lds	r8, 0x2A20	; 0x802a20 <myPID+0x26>
    544e:	90 90 21 2a 	lds	r9, 0x2A21	; 0x802a21 <myPID+0x27>
    5452:	a0 90 22 2a 	lds	r10, 0x2A22	; 0x802a22 <myPID+0x28>
    5456:	b0 90 23 2a 	lds	r11, 0x2A23	; 0x802a23 <myPID+0x29>
    545a:	c0 90 30 2a 	lds	r12, 0x2A30	; 0x802a30 <myPID+0x36>
    545e:	d0 90 31 2a 	lds	r13, 0x2A31	; 0x802a31 <myPID+0x37>
    5462:	e0 90 32 2a 	lds	r14, 0x2A32	; 0x802a32 <myPID+0x38>
    5466:	f0 90 33 2a 	lds	r15, 0x2A33	; 0x802a33 <myPID+0x39>
    546a:	a7 01       	movw	r20, r14
    546c:	96 01       	movw	r18, r12
    546e:	c5 01       	movw	r24, r10
    5470:	b4 01       	movw	r22, r8
    5472:	0e 94 b4 39 	call	0x7368	; 0x7368 <__gesf2>
    5476:	18 16       	cp	r1, r24
    5478:	cc f4       	brge	.+50     	; 0x54ac <main+0x29e>
    547a:	c0 92 20 2a 	sts	0x2A20, r12	; 0x802a20 <myPID+0x26>
    547e:	d0 92 21 2a 	sts	0x2A21, r13	; 0x802a21 <myPID+0x27>
    5482:	e0 92 22 2a 	sts	0x2A22, r14	; 0x802a22 <myPID+0x28>
    5486:	f0 92 23 2a 	sts	0x2A23, r15	; 0x802a23 <myPID+0x29>
    548a:	20 c0       	rjmp	.+64     	; 0x54cc <main+0x2be>
    548c:	20 e0       	ldi	r18, 0x00	; 0
    548e:	30 e0       	ldi	r19, 0x00	; 0
    5490:	a9 01       	movw	r20, r18
    5492:	c7 01       	movw	r24, r14
    5494:	b6 01       	movw	r22, r12
    5496:	0e 94 65 38 	call	0x70ca	; 0x70ca <__cmpsf2>
    549a:	87 ff       	sbrs	r24, 7
    549c:	d6 cf       	rjmp	.-84     	; 0x544a <main+0x23c>
    549e:	d8 01       	movw	r26, r16
    54a0:	1d 92       	st	X+, r1
    54a2:	1d 92       	st	X+, r1
    54a4:	1d 92       	st	X+, r1
    54a6:	1c 92       	st	X, r1
    54a8:	13 97       	sbiw	r26, 0x03	; 3
    54aa:	cf cf       	rjmp	.-98     	; 0x544a <main+0x23c>
    54ac:	c0 90 2c 2a 	lds	r12, 0x2A2C	; 0x802a2c <myPID+0x32>
    54b0:	d0 90 2d 2a 	lds	r13, 0x2A2D	; 0x802a2d <myPID+0x33>
    54b4:	e0 90 2e 2a 	lds	r14, 0x2A2E	; 0x802a2e <myPID+0x34>
    54b8:	f0 90 2f 2a 	lds	r15, 0x2A2F	; 0x802a2f <myPID+0x35>
    54bc:	a7 01       	movw	r20, r14
    54be:	96 01       	movw	r18, r12
    54c0:	c5 01       	movw	r24, r10
    54c2:	b4 01       	movw	r22, r8
    54c4:	0e 94 65 38 	call	0x70ca	; 0x70ca <__cmpsf2>
    54c8:	87 fd       	sbrc	r24, 7
    54ca:	d7 cf       	rjmp	.-82     	; 0x547a <main+0x26c>
Setup():
    54cc:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <millis>
    54d0:	60 93 e9 28 	sts	0x28E9, r22	; 0x8028e9 <WINDOW_START_TIME>
    54d4:	70 93 ea 28 	sts	0x28EA, r23	; 0x8028ea <WINDOW_START_TIME+0x1>
    54d8:	80 93 eb 28 	sts	0x28EB, r24	; 0x8028eb <WINDOW_START_TIME+0x2>
    54dc:	90 93 ec 28 	sts	0x28EC, r25	; 0x8028ec <WINDOW_START_TIME+0x3>
SetMode():
    54e0:	80 91 34 2a 	lds	r24, 0x2A34	; 0x802a34 <myPID+0x3a>
    54e4:	81 11       	cpse	r24, r1
    54e6:	49 c0       	rjmp	.+146    	; 0x557a <main+0x36c>
Initialize():
    54e8:	e0 91 18 2a 	lds	r30, 0x2A18	; 0x802a18 <myPID+0x1e>
    54ec:	f0 91 19 2a 	lds	r31, 0x2A19	; 0x802a19 <myPID+0x1f>
    54f0:	c0 80       	ld	r12, Z
    54f2:	d1 80       	ldd	r13, Z+1	; 0x01
    54f4:	e2 80       	ldd	r14, Z+2	; 0x02
    54f6:	f3 80       	ldd	r15, Z+3	; 0x03
    54f8:	c0 92 20 2a 	sts	0x2A20, r12	; 0x802a20 <myPID+0x26>
    54fc:	d0 92 21 2a 	sts	0x2A21, r13	; 0x802a21 <myPID+0x27>
    5500:	e0 92 22 2a 	sts	0x2A22, r14	; 0x802a22 <myPID+0x28>
    5504:	f0 92 23 2a 	sts	0x2A23, r15	; 0x802a23 <myPID+0x29>
    5508:	e0 91 16 2a 	lds	r30, 0x2A16	; 0x802a16 <myPID+0x1c>
    550c:	f0 91 17 2a 	lds	r31, 0x2A17	; 0x802a17 <myPID+0x1d>
    5510:	80 81       	ld	r24, Z
    5512:	91 81       	ldd	r25, Z+1	; 0x01
    5514:	a2 81       	ldd	r26, Z+2	; 0x02
    5516:	b3 81       	ldd	r27, Z+3	; 0x03
    5518:	80 93 24 2a 	sts	0x2A24, r24	; 0x802a24 <myPID+0x2a>
    551c:	90 93 25 2a 	sts	0x2A25, r25	; 0x802a25 <myPID+0x2b>
    5520:	a0 93 26 2a 	sts	0x2A26, r26	; 0x802a26 <myPID+0x2c>
    5524:	b0 93 27 2a 	sts	0x2A27, r27	; 0x802a27 <myPID+0x2d>
    5528:	80 90 30 2a 	lds	r8, 0x2A30	; 0x802a30 <myPID+0x36>
    552c:	90 90 31 2a 	lds	r9, 0x2A31	; 0x802a31 <myPID+0x37>
    5530:	a0 90 32 2a 	lds	r10, 0x2A32	; 0x802a32 <myPID+0x38>
    5534:	b0 90 33 2a 	lds	r11, 0x2A33	; 0x802a33 <myPID+0x39>
    5538:	a5 01       	movw	r20, r10
    553a:	94 01       	movw	r18, r8
    553c:	c7 01       	movw	r24, r14
    553e:	b6 01       	movw	r22, r12
    5540:	0e 94 b4 39 	call	0x7368	; 0x7368 <__gesf2>
    5544:	18 16       	cp	r1, r24
    5546:	4c f4       	brge	.+18     	; 0x555a <main+0x34c>
    5548:	80 92 20 2a 	sts	0x2A20, r8	; 0x802a20 <myPID+0x26>
    554c:	90 92 21 2a 	sts	0x2A21, r9	; 0x802a21 <myPID+0x27>
    5550:	a0 92 22 2a 	sts	0x2A22, r10	; 0x802a22 <myPID+0x28>
    5554:	b0 92 23 2a 	sts	0x2A23, r11	; 0x802a23 <myPID+0x29>
    5558:	10 c0       	rjmp	.+32     	; 0x557a <main+0x36c>
    555a:	80 90 2c 2a 	lds	r8, 0x2A2C	; 0x802a2c <myPID+0x32>
    555e:	90 90 2d 2a 	lds	r9, 0x2A2D	; 0x802a2d <myPID+0x33>
    5562:	a0 90 2e 2a 	lds	r10, 0x2A2E	; 0x802a2e <myPID+0x34>
    5566:	b0 90 2f 2a 	lds	r11, 0x2A2F	; 0x802a2f <myPID+0x35>
    556a:	a5 01       	movw	r20, r10
    556c:	94 01       	movw	r18, r8
    556e:	c7 01       	movw	r24, r14
    5570:	b6 01       	movw	r22, r12
    5572:	0e 94 65 38 	call	0x70ca	; 0x70ca <__cmpsf2>
    5576:	87 fd       	sbrc	r24, 7
    5578:	e7 cf       	rjmp	.-50     	; 0x5548 <main+0x33a>
SetMode():
    557a:	81 e0       	ldi	r24, 0x01	; 1
    557c:	80 93 34 2a 	sts	0x2A34, r24	; 0x802a34 <myPID+0x3a>
pinMode():
    5580:	61 e0       	ldi	r22, 0x01	; 1
    5582:	85 e1       	ldi	r24, 0x15	; 21
    5584:	0e 94 b3 07 	call	0xf66	; 0xf66 <pinMode.part.1>
    5588:	61 e0       	ldi	r22, 0x01	; 1
    558a:	88 e1       	ldi	r24, 0x18	; 24
    558c:	0e 94 b3 07 	call	0xf66	; 0xf66 <pinMode.part.1>
    5590:	61 e0       	ldi	r22, 0x01	; 1
    5592:	89 e1       	ldi	r24, 0x19	; 25
    5594:	0e 94 b3 07 	call	0xf66	; 0xf66 <pinMode.part.1>
    5598:	61 e0       	ldi	r22, 0x01	; 1
    559a:	81 e2       	ldi	r24, 0x21	; 33
    559c:	0e 94 b3 07 	call	0xf66	; 0xf66 <pinMode.part.1>
digitalWrite():
    55a0:	60 e0       	ldi	r22, 0x00	; 0
    55a2:	89 e1       	ldi	r24, 0x19	; 25
    55a4:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
    55a8:	60 e0       	ldi	r22, 0x00	; 0
    55aa:	85 e1       	ldi	r24, 0x15	; 21
    55ac:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
    55b0:	60 e0       	ldi	r22, 0x00	; 0
    55b2:	88 e1       	ldi	r24, 0x18	; 24
    55b4:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
    55b8:	60 e0       	ldi	r22, 0x00	; 0
    55ba:	81 e2       	ldi	r24, 0x21	; 33
    55bc:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
pinMode():
    55c0:	61 e0       	ldi	r22, 0x01	; 1
    55c2:	8b e1       	ldi	r24, 0x1B	; 27
    55c4:	0e 94 b3 07 	call	0xf66	; 0xf66 <pinMode.part.1>
    55c8:	61 e0       	ldi	r22, 0x01	; 1
    55ca:	8c e1       	ldi	r24, 0x1C	; 28
    55cc:	0e 94 b3 07 	call	0xf66	; 0xf66 <pinMode.part.1>
    55d0:	61 e0       	ldi	r22, 0x01	; 1
    55d2:	8d e1       	ldi	r24, 0x1D	; 29
    55d4:	0e 94 b3 07 	call	0xf66	; 0xf66 <pinMode.part.1>
    55d8:	61 e0       	ldi	r22, 0x01	; 1
    55da:	8a e1       	ldi	r24, 0x1A	; 26
    55dc:	0e 94 b3 07 	call	0xf66	; 0xf66 <pinMode.part.1>
Setup():
    55e0:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
    55e4:	89 e3       	ldi	r24, 0x39	; 57
    55e6:	9b e2       	ldi	r25, 0x2B	; 43
    55e8:	0e 94 0a 0b 	call	0x1614	; 0x1614 <Ticker::start()>
    55ec:	8e e1       	ldi	r24, 0x1E	; 30
    55ee:	9b e2       	ldi	r25, 0x2B	; 43
    55f0:	0e 94 0a 0b 	call	0x1614	; 0x1614 <Ticker::start()>
    55f4:	90 e0       	ldi	r25, 0x00	; 0
    55f6:	80 e0       	ldi	r24, 0x00	; 0
    55f8:	0e 94 db 10 	call	0x21b6	; 0x21b6 <EEPROMClass::read(int) [clone .isra.0]>
    55fc:	aa 24       	eor	r10, r10
    55fe:	a3 94       	inc	r10
    5600:	81 11       	cpse	r24, r1
    5602:	01 c0       	rjmp	.+2      	; 0x5606 <main+0x3f8>
    5604:	a1 2c       	mov	r10, r1
    5606:	a0 92 a6 28 	sts	0x28A6, r10	; 0x8028a6 <STIR_VALUE_SET>
    560a:	81 e0       	ldi	r24, 0x01	; 1
    560c:	90 e0       	ldi	r25, 0x00	; 0
    560e:	0e 94 db 10 	call	0x21b6	; 0x21b6 <EEPROMClass::read(int) [clone .isra.0]>
    5612:	bb 24       	eor	r11, r11
    5614:	b3 94       	inc	r11
    5616:	81 11       	cpse	r24, r1
    5618:	01 c0       	rjmp	.+2      	; 0x561c <main+0x40e>
    561a:	b1 2c       	mov	r11, r1
    561c:	b0 92 4f 29 	sts	0x294F, r11	; 0x80294f <DEGREE_VALUE_SET>
    5620:	82 e0       	ldi	r24, 0x02	; 2
    5622:	90 e0       	ldi	r25, 0x00	; 0
    5624:	0e 94 db 10 	call	0x21b6	; 0x21b6 <EEPROMClass::read(int) [clone .isra.0]>
    5628:	c8 2e       	mov	r12, r24
    562a:	d1 2c       	mov	r13, r1
    562c:	c0 92 0e 29 	sts	0x290E, r12	; 0x80290e <SAFE_VALUE_SET_DEG>
    5630:	d0 92 0f 29 	sts	0x290F, r13	; 0x80290f <SAFE_VALUE_SET_DEG+0x1>
    5634:	6c e0       	ldi	r22, 0x0C	; 12
    5636:	79 e2       	ldi	r23, 0x29	; 41
    5638:	83 e0       	ldi	r24, 0x03	; 3
    563a:	90 e0       	ldi	r25, 0x00	; 0
    563c:	0e 94 84 10 	call	0x2108	; 0x2108 <int& EEPROMClass::get<int>(int, int&) [clone .isra.4]>
    5640:	85 e0       	ldi	r24, 0x05	; 5
    5642:	90 e0       	ldi	r25, 0x00	; 0
    5644:	0e 94 db 10 	call	0x21b6	; 0x21b6 <EEPROMClass::read(int) [clone .isra.0]>
    5648:	e8 2e       	mov	r14, r24
    564a:	f1 2c       	mov	r15, r1
    564c:	e0 92 d4 28 	sts	0x28D4, r14	; 0x8028d4 <CAL_SELECT_VALUE>
    5650:	f0 92 d5 28 	sts	0x28D5, r15	; 0x8028d5 <CAL_SELECT_VALUE+0x1>
    5654:	56 e0       	ldi	r21, 0x06	; 6
    5656:	85 2e       	mov	r8, r21
    5658:	59 e2       	ldi	r21, 0x29	; 41
    565a:	95 2e       	mov	r9, r21
main():
    565c:	06 e4       	ldi	r16, 0x46	; 70
    565e:	10 e0       	ldi	r17, 0x00	; 0
_ZN11EEPROMClass3getIdEERT_iS2_.isra.5():
    5660:	09 83       	std	Y+1, r16	; 0x01
    5662:	1a 83       	std	Y+2, r17	; 0x02
_ZNK5EERefcvhEv():
    5664:	ce 01       	movw	r24, r28
    5666:	01 96       	adiw	r24, 0x01	; 1
    5668:	0e 94 74 10 	call	0x20e8	; 0x20e8 <EERef::operator*() const>
_ZN11EEPROMClass3getIdEERT_iS2_.isra.5():
    566c:	f4 01       	movw	r30, r8
    566e:	81 93       	st	Z+, r24
    5670:	4f 01       	movw	r8, r30
_ZN5EEPtrppEv():
    5672:	0f 5f       	subi	r16, 0xFF	; 255
    5674:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN11EEPROMClass3getIdEERT_iS2_.isra.5():
    5676:	0a 34       	cpi	r16, 0x4A	; 74
    5678:	11 05       	cpc	r17, r1
    567a:	91 f7       	brne	.-28     	; 0x5660 <main+0x452>
Setup():
    567c:	87 e0       	ldi	r24, 0x07	; 7
    567e:	90 e0       	ldi	r25, 0x00	; 0
    5680:	0e 94 db 10 	call	0x21b6	; 0x21b6 <EEPROMClass::read(int) [clone .isra.0]>
    5684:	91 e0       	ldi	r25, 0x01	; 1
    5686:	81 11       	cpse	r24, r1
    5688:	01 c0       	rjmp	.+2      	; 0x568c <main+0x47e>
    568a:	90 e0       	ldi	r25, 0x00	; 0
    568c:	90 93 e8 28 	sts	0x28E8, r25	; 0x8028e8 <SIGN>
    5690:	88 e0       	ldi	r24, 0x08	; 8
    5692:	90 e0       	ldi	r25, 0x00	; 0
    5694:	0e 94 db 10 	call	0x21b6	; 0x21b6 <EEPROMClass::read(int) [clone .isra.0]>
    5698:	91 e0       	ldi	r25, 0x01	; 1
    569a:	81 11       	cpse	r24, r1
    569c:	01 c0       	rjmp	.+2      	; 0x56a0 <main+0x492>
    569e:	90 e0       	ldi	r25, 0x00	; 0
    56a0:	90 93 e3 28 	sts	0x28E3, r25	; 0x8028e3 <ERROR_SET_IN_DEG_FLAG>
    56a4:	89 e0       	ldi	r24, 0x09	; 9
    56a6:	90 e0       	ldi	r25, 0x00	; 0
    56a8:	0e 94 db 10 	call	0x21b6	; 0x21b6 <EEPROMClass::read(int) [clone .isra.0]>
    56ac:	91 e0       	ldi	r25, 0x01	; 1
    56ae:	81 11       	cpse	r24, r1
    56b0:	01 c0       	rjmp	.+2      	; 0x56b4 <main+0x4a6>
    56b2:	90 e0       	ldi	r25, 0x00	; 0
    56b4:	90 93 de 28 	sts	0x28DE, r25	; 0x8028de <ERROR_SET_IN_FAH_FLAG>
    56b8:	6c ec       	ldi	r22, 0xCC	; 204
    56ba:	78 e2       	ldi	r23, 0x28	; 40
    56bc:	80 e5       	ldi	r24, 0x50	; 80
    56be:	90 e0       	ldi	r25, 0x00	; 0
    56c0:	0e 94 a9 10 	call	0x2152	; 0x2152 <long& EEPROMClass::get<long>(int, long&) [clone .isra.6]>
    56c4:	68 ec       	ldi	r22, 0xC8	; 200
    56c6:	78 e2       	ldi	r23, 0x28	; 40
    56c8:	8a e5       	ldi	r24, 0x5A	; 90
    56ca:	90 e0       	ldi	r25, 0x00	; 0
    56cc:	0e 94 a9 10 	call	0x2152	; 0x2152 <long& EEPROMClass::get<long>(int, long&) [clone .isra.6]>
    56d0:	64 ec       	ldi	r22, 0xC4	; 196
    56d2:	78 e2       	ldi	r23, 0x28	; 40
    56d4:	84 e6       	ldi	r24, 0x64	; 100
    56d6:	90 e0       	ldi	r25, 0x00	; 0
    56d8:	0e 94 a9 10 	call	0x2152	; 0x2152 <long& EEPROMClass::get<long>(int, long&) [clone .isra.6]>
    56dc:	60 ec       	ldi	r22, 0xC0	; 192
    56de:	78 e2       	ldi	r23, 0x28	; 40
    56e0:	8e e6       	ldi	r24, 0x6E	; 110
    56e2:	90 e0       	ldi	r25, 0x00	; 0
    56e4:	0e 94 a9 10 	call	0x2152	; 0x2152 <long& EEPROMClass::get<long>(int, long&) [clone .isra.6]>
_ZN11EEPROMClass3getIbEERT_iS2_.isra.7():
    56e8:	81 e4       	ldi	r24, 0x41	; 65
    56ea:	90 e0       	ldi	r25, 0x00	; 0
    56ec:	89 83       	std	Y+1, r24	; 0x01
    56ee:	9a 83       	std	Y+2, r25	; 0x02
_ZNK5EERefcvhEv():
    56f0:	ce 01       	movw	r24, r28
    56f2:	01 96       	adiw	r24, 0x01	; 1
    56f4:	0e 94 74 10 	call	0x20e8	; 0x20e8 <EERef::operator*() const>
_ZN11EEPROMClass3getIbEERT_iS2_.isra.7():
    56f8:	80 93 a5 28 	sts	0x28A5, r24	; 0x8028a5 <TIME_SOCK_OR_TOTAL>
Setup():
    56fc:	6b ea       	ldi	r22, 0xAB	; 171
    56fe:	78 e2       	ldi	r23, 0x28	; 40
    5700:	88 e9       	ldi	r24, 0x98	; 152
    5702:	90 e0       	ldi	r25, 0x00	; 0
    5704:	0e 94 84 10 	call	0x2108	; 0x2108 <int& EEPROMClass::get<int>(int, int&) [clone .isra.4]>
    5708:	69 ea       	ldi	r22, 0xA9	; 169
    570a:	78 e2       	ldi	r23, 0x28	; 40
    570c:	8a e9       	ldi	r24, 0x9A	; 154
    570e:	90 e0       	ldi	r25, 0x00	; 0
    5710:	0e 94 84 10 	call	0x2108	; 0x2108 <int& EEPROMClass::get<int>(int, int&) [clone .isra.4]>
    5714:	8f e0       	ldi	r24, 0x0F	; 15
    5716:	90 e0       	ldi	r25, 0x00	; 0
    5718:	0e 94 db 10 	call	0x21b6	; 0x21b6 <EEPROMClass::read(int) [clone .isra.0]>
    571c:	01 e0       	ldi	r16, 0x01	; 1
    571e:	81 11       	cpse	r24, r1
    5720:	01 c0       	rjmp	.+2      	; 0x5724 <main+0x516>
    5722:	00 e0       	ldi	r16, 0x00	; 0
    5724:	00 93 a0 28 	sts	0x28A0, r16	; 0x8028a0 <Proceess_Resume_Enable_Flag>
    5728:	86 e9       	ldi	r24, 0x96	; 150
    572a:	90 e0       	ldi	r25, 0x00	; 0
    572c:	0e 94 db 10 	call	0x21b6	; 0x21b6 <EEPROMClass::read(int) [clone .isra.0]>
    5730:	11 e0       	ldi	r17, 0x01	; 1
    5732:	81 11       	cpse	r24, r1
    5734:	01 c0       	rjmp	.+2      	; 0x5738 <main+0x52a>
    5736:	10 e0       	ldi	r17, 0x00	; 0
    5738:	10 93 0a 29 	sts	0x290A, r17	; 0x80290a <select_product_type>
    573c:	84 e8       	ldi	r24, 0x84	; 132
    573e:	90 e0       	ldi	r25, 0x00	; 0
    5740:	0e 94 db 10 	call	0x21b6	; 0x21b6 <EEPROMClass::read(int) [clone .isra.0]>
    5744:	91 e0       	ldi	r25, 0x01	; 1
    5746:	81 11       	cpse	r24, r1
    5748:	01 c0       	rjmp	.+2      	; 0x574c <main+0x53e>
    574a:	90 e0       	ldi	r25, 0x00	; 0
    574c:	90 93 ed 28 	sts	0x28ED, r25	; 0x8028ed <select_heating_type>
    5750:	2a 2d       	mov	r18, r10
    5752:	30 e0       	ldi	r19, 0x00	; 0
    5754:	20 93 1d 29 	sts	0x291D, r18	; 0x80291d <SET_LONG_VALUE>
    5758:	30 93 1e 29 	sts	0x291E, r19	; 0x80291e <SET_LONG_VALUE+0x1>
    575c:	2b 2d       	mov	r18, r11
    575e:	30 e0       	ldi	r19, 0x00	; 0
    5760:	20 93 1f 29 	sts	0x291F, r18	; 0x80291f <SET_LONG_VALUE+0x2>
    5764:	30 93 20 29 	sts	0x2920, r19	; 0x802920 <SET_LONG_VALUE+0x3>
    5768:	c0 92 21 29 	sts	0x2921, r12	; 0x802921 <SET_LONG_VALUE+0x4>
    576c:	d0 92 22 29 	sts	0x2922, r13	; 0x802922 <SET_LONG_VALUE+0x5>
    5770:	20 91 0c 29 	lds	r18, 0x290C	; 0x80290c <SAFE_VALUE_SET_FAH>
    5774:	30 91 0d 29 	lds	r19, 0x290D	; 0x80290d <SAFE_VALUE_SET_FAH+0x1>
    5778:	20 93 45 29 	sts	0x2945, r18	; 0x802945 <SET_LONG_VALUE+0x28>
    577c:	30 93 46 29 	sts	0x2946, r19	; 0x802946 <SET_LONG_VALUE+0x29>
    5780:	e0 92 29 29 	sts	0x2929, r14	; 0x802929 <SET_LONG_VALUE+0xc>
    5784:	f0 92 2a 29 	sts	0x292A, r15	; 0x80292a <SET_LONG_VALUE+0xd>
    5788:	20 91 a5 28 	lds	r18, 0x28A5	; 0x8028a5 <TIME_SOCK_OR_TOTAL>
    578c:	30 e0       	ldi	r19, 0x00	; 0
    578e:	20 93 23 29 	sts	0x2923, r18	; 0x802923 <SET_LONG_VALUE+0x6>
    5792:	30 93 24 29 	sts	0x2924, r19	; 0x802924 <SET_LONG_VALUE+0x7>
    5796:	20 2f       	mov	r18, r16
    5798:	30 e0       	ldi	r19, 0x00	; 0
    579a:	20 93 25 29 	sts	0x2925, r18	; 0x802925 <SET_LONG_VALUE+0x8>
    579e:	30 93 26 29 	sts	0x2926, r19	; 0x802926 <SET_LONG_VALUE+0x9>
    57a2:	89 2f       	mov	r24, r25
    57a4:	90 e0       	ldi	r25, 0x00	; 0
    57a6:	80 93 3d 29 	sts	0x293D, r24	; 0x80293d <SET_LONG_VALUE+0x20>
    57aa:	90 93 3e 29 	sts	0x293E, r25	; 0x80293e <SET_LONG_VALUE+0x21>
    57ae:	81 2f       	mov	r24, r17
    57b0:	90 e0       	ldi	r25, 0x00	; 0
    57b2:	80 93 27 29 	sts	0x2927, r24	; 0x802927 <SET_LONG_VALUE+0xa>
    57b6:	90 93 28 29 	sts	0x2928, r25	; 0x802928 <SET_LONG_VALUE+0xb>
    57ba:	6c e3       	ldi	r22, 0x3C	; 60
    57bc:	79 e2       	ldi	r23, 0x29	; 41
    57be:	88 e7       	ldi	r24, 0x78	; 120
    57c0:	90 e0       	ldi	r25, 0x00	; 0
    57c2:	0e 94 84 10 	call	0x2108	; 0x2108 <int& EEPROMClass::get<int>(int, int&) [clone .isra.4]>
    57c6:	83 e7       	ldi	r24, 0x73	; 115
    57c8:	90 e0       	ldi	r25, 0x00	; 0
    57ca:	0e 94 db 10 	call	0x21b6	; 0x21b6 <EEPROMClass::read(int) [clone .isra.0]>
    57ce:	90 e0       	ldi	r25, 0x00	; 0
    57d0:	80 93 12 29 	sts	0x2912, r24	; 0x802912 <SET_VALUE+0x2>
    57d4:	90 93 13 29 	sts	0x2913, r25	; 0x802913 <SET_VALUE+0x3>
    57d8:	85 e7       	ldi	r24, 0x75	; 117
    57da:	90 e0       	ldi	r25, 0x00	; 0
    57dc:	0e 94 db 10 	call	0x21b6	; 0x21b6 <EEPROMClass::read(int) [clone .isra.0]>
    57e0:	90 e0       	ldi	r25, 0x00	; 0
    57e2:	80 93 14 29 	sts	0x2914, r24	; 0x802914 <SET_VALUE+0x4>
    57e6:	90 93 15 29 	sts	0x2915, r25	; 0x802915 <SET_VALUE+0x5>
    57ea:	8d e7       	ldi	r24, 0x7D	; 125
    57ec:	90 e0       	ldi	r25, 0x00	; 0
    57ee:	0e 94 db 10 	call	0x21b6	; 0x21b6 <EEPROMClass::read(int) [clone .isra.0]>
    57f2:	90 e0       	ldi	r25, 0x00	; 0
    57f4:	80 93 16 29 	sts	0x2916, r24	; 0x802916 <SET_VALUE+0x6>
    57f8:	90 93 17 29 	sts	0x2917, r25	; 0x802917 <SET_VALUE+0x7>
    57fc:	82 e8       	ldi	r24, 0x82	; 130
    57fe:	90 e0       	ldi	r25, 0x00	; 0
    5800:	0e 94 db 10 	call	0x21b6	; 0x21b6 <EEPROMClass::read(int) [clone .isra.0]>
    5804:	90 e0       	ldi	r25, 0x00	; 0
    5806:	80 93 18 29 	sts	0x2918, r24	; 0x802918 <SET_VALUE+0x8>
    580a:	90 93 19 29 	sts	0x2919, r25	; 0x802919 <SET_VALUE+0x9>
    580e:	87 e8       	ldi	r24, 0x87	; 135
    5810:	90 e0       	ldi	r25, 0x00	; 0
    5812:	0e 94 db 10 	call	0x21b6	; 0x21b6 <EEPROMClass::read(int) [clone .isra.0]>
    5816:	91 e0       	ldi	r25, 0x01	; 1
    5818:	81 11       	cpse	r24, r1
    581a:	01 c0       	rjmp	.+2      	; 0x581e <main+0x610>
    581c:	90 e0       	ldi	r25, 0x00	; 0
    581e:	90 93 9b 28 	sts	0x289B, r25	; 0x80289b <Process_Interrupt_flag>
setup():
    5822:	86 e3       	ldi	r24, 0x36	; 54
    5824:	9a e2       	ldi	r25, 0x2A	; 42
    5826:	0e 94 0a 0b 	call	0x1614	; 0x1614 <Ticker::start()>
pinMode():
    582a:	62 e0       	ldi	r22, 0x02	; 2
    582c:	83 e2       	ldi	r24, 0x23	; 35
    582e:	0e 94 b3 07 	call	0xf66	; 0xf66 <pinMode.part.1>
    5832:	62 e0       	ldi	r22, 0x02	; 2
    5834:	85 e2       	ldi	r24, 0x25	; 37
    5836:	0e 94 b3 07 	call	0xf66	; 0xf66 <pinMode.part.1>
    583a:	62 e0       	ldi	r22, 0x02	; 2
    583c:	84 e2       	ldi	r24, 0x24	; 36
    583e:	0e 94 b3 07 	call	0xf66	; 0xf66 <pinMode.part.1>
    5842:	62 e0       	ldi	r22, 0x02	; 2
    5844:	82 e2       	ldi	r24, 0x22	; 34
    5846:	0e 94 b3 07 	call	0xf66	; 0xf66 <pinMode.part.1>
attachClick():
    584a:	83 e9       	ldi	r24, 0x93	; 147
    584c:	91 e1       	ldi	r25, 0x11	; 17
    584e:	80 93 bb 2a 	sts	0x2ABB, r24	; 0x802abb <button1+0xd>
    5852:	90 93 bc 2a 	sts	0x2ABC, r25	; 0x802abc <button1+0xe>
attachLongPressStart():
    5856:	81 e4       	ldi	r24, 0x41	; 65
    5858:	90 e1       	ldi	r25, 0x10	; 16
    585a:	80 93 c1 2a 	sts	0x2AC1, r24	; 0x802ac1 <button1+0x13>
    585e:	90 93 c2 2a 	sts	0x2AC2, r25	; 0x802ac2 <button1+0x14>
attachClick():
    5862:	81 ef       	ldi	r24, 0xF1	; 241
    5864:	9f e0       	ldi	r25, 0x0F	; 15
    5866:	80 93 9c 2a 	sts	0x2A9C, r24	; 0x802a9c <button2+0xd>
    586a:	90 93 9d 2a 	sts	0x2A9D, r25	; 0x802a9d <button2+0xe>
attachDuringLongPress():
    586e:	8a ed       	ldi	r24, 0xDA	; 218
    5870:	9f e0       	ldi	r25, 0x0F	; 15
    5872:	80 93 a6 2a 	sts	0x2AA6, r24	; 0x802aa6 <button2+0x17>
    5876:	90 93 a7 2a 	sts	0x2AA7, r25	; 0x802aa7 <button2+0x18>
attachLongPressStop():
    587a:	81 e1       	ldi	r24, 0x11	; 17
    587c:	96 e0       	ldi	r25, 0x06	; 6
    587e:	80 93 a4 2a 	sts	0x2AA4, r24	; 0x802aa4 <button2+0x15>
    5882:	90 93 a5 2a 	sts	0x2AA5, r25	; 0x802aa5 <button2+0x16>
attachClick():
    5886:	8b e7       	ldi	r24, 0x7B	; 123
    5888:	9f e0       	ldi	r25, 0x0F	; 15
    588a:	80 93 7d 2a 	sts	0x2A7D, r24	; 0x802a7d <button3+0xd>
    588e:	90 93 7e 2a 	sts	0x2A7E, r25	; 0x802a7e <button3+0xe>
attachDuringLongPress():
    5892:	84 e6       	ldi	r24, 0x64	; 100
    5894:	9f e0       	ldi	r25, 0x0F	; 15
    5896:	80 93 87 2a 	sts	0x2A87, r24	; 0x802a87 <button3+0x17>
    589a:	90 93 88 2a 	sts	0x2A88, r25	; 0x802a88 <button3+0x18>
attachLongPressStop():
    589e:	86 e0       	ldi	r24, 0x06	; 6
    58a0:	96 e0       	ldi	r25, 0x06	; 6
    58a2:	80 93 85 2a 	sts	0x2A85, r24	; 0x802a85 <button3+0x15>
    58a6:	90 93 86 2a 	sts	0x2A86, r25	; 0x802a86 <button3+0x16>
attachClick():
    58aa:	81 e0       	ldi	r24, 0x01	; 1
    58ac:	9f e0       	ldi	r25, 0x0F	; 15
    58ae:	80 93 5e 2a 	sts	0x2A5E, r24	; 0x802a5e <button4+0xd>
    58b2:	90 93 5f 2a 	sts	0x2A5F, r25	; 0x802a5f <button4+0xe>
attachLongPressStart():
    58b6:	8a ed       	ldi	r24, 0xDA	; 218
    58b8:	9e e0       	ldi	r25, 0x0E	; 14
    58ba:	80 93 64 2a 	sts	0x2A64, r24	; 0x802a64 <button4+0x13>
    58be:	90 93 65 2a 	sts	0x2A65, r25	; 0x802a65 <button4+0x14>
setup():
    58c2:	8d ec       	ldi	r24, 0xCD	; 205
    58c4:	9a e2       	ldi	r25, 0x2A	; 42
    58c6:	0e 94 0a 0b 	call	0x1614	; 0x1614 <Ticker::start()>
loop():
    58ca:	86 e3       	ldi	r24, 0x36	; 54
    58cc:	9a e2       	ldi	r25, 0x2A	; 42
    58ce:	0e 94 ac 0a 	call	0x1558	; 0x1558 <Ticker::update()>
DISP_UPDATE():
    58d2:	8b ed       	ldi	r24, 0xDB	; 219
    58d4:	9b e2       	ldi	r25, 0x2B	; 43
    58d6:	0e 94 ac 0a 	call	0x1558	; 0x1558 <Ticker::update()>
loop():
    58da:	0e 94 9b 04 	call	0x936	; 0x936 <Mclass::RTD_TEMP_CONV() [clone .constprop.36]>
    58de:	80 91 06 28 	lds	r24, 0x2806	; 0x802806 <StopVersionDisplay>
    58e2:	88 23       	and	r24, r24
    58e4:	b1 f1       	breq	.+108    	; 0x5952 <main+0x744>
    58e6:	8d ec       	ldi	r24, 0xCD	; 205
    58e8:	9a e2       	ldi	r25, 0x2A	; 42
    58ea:	0e 94 ac 0a 	call	0x1558	; 0x1558 <Ticker::update()>
    58ee:	89 e1       	ldi	r24, 0x19	; 25
    58f0:	90 e0       	ldi	r25, 0x00	; 0
    58f2:	0e 94 2a 0b 	call	0x1654	; 0x1654 <Tclass::BUZZ_INTERVAL(int) [clone .constprop.56]>
DISPLAY_DIGIT2():
    58f6:	82 e2       	ldi	r24, 0x22	; 34
    58f8:	90 e0       	ldi	r25, 0x00	; 0
    58fa:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    58fe:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    5902:	88 e1       	ldi	r24, 0x18	; 24
    5904:	90 e0       	ldi	r25, 0x00	; 0
    5906:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    590a:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    590e:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <digits2+0x4>
    5912:	90 93 03 29 	sts	0x2903, r25	; 0x802903 <digits2+0x5>
    5916:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    591a:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
DISPLAY_DIGIT1():
    591e:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <digits1>
    5922:	90 93 f7 28 	sts	0x28F7, r25	; 0x8028f7 <digits1+0x1>
    5926:	84 e0       	ldi	r24, 0x04	; 4
    5928:	90 e0       	ldi	r25, 0x00	; 0
    592a:	80 93 f8 28 	sts	0x28F8, r24	; 0x8028f8 <digits1+0x2>
    592e:	90 93 f9 28 	sts	0x28F9, r25	; 0x8028f9 <digits1+0x3>
    5932:	10 92 fa 28 	sts	0x28FA, r1	; 0x8028fa <digits1+0x4>
    5936:	10 92 fb 28 	sts	0x28FB, r1	; 0x8028fb <digits1+0x5>
    593a:	83 e0       	ldi	r24, 0x03	; 3
    593c:	90 e0       	ldi	r25, 0x00	; 0
    593e:	80 93 fc 28 	sts	0x28FC, r24	; 0x8028fc <digits1+0x6>
    5942:	90 93 fd 28 	sts	0x28FD, r25	; 0x8028fd <digits1+0x7>
loop():
    5946:	81 e0       	ldi	r24, 0x01	; 1
    5948:	80 93 be 28 	sts	0x28BE, r24	; 0x8028be <DOT1_1>
main():
    594c:	0e 94 81 07 	call	0xf02	; 0xf02 <serialEventRun()>
    5950:	bc cf       	rjmp	.-136    	; 0x58ca <main+0x6bc>
stop():
    5952:	10 92 cd 2a 	sts	0x2ACD, r1	; 0x802acd <VersionDisplay>
    5956:	10 92 d8 2a 	sts	0x2AD8, r1	; 0x802ad8 <VersionDisplay+0xb>
    595a:	10 92 d9 2a 	sts	0x2AD9, r1	; 0x802ad9 <VersionDisplay+0xc>
    595e:	10 92 da 2a 	sts	0x2ADA, r1	; 0x802ada <VersionDisplay+0xd>
    5962:	10 92 db 2a 	sts	0x2ADB, r1	; 0x802adb <VersionDisplay+0xe>
    5966:	10 92 dc 2a 	sts	0x2ADC, r1	; 0x802adc <VersionDisplay+0xf>
    596a:	10 92 dd 2a 	sts	0x2ADD, r1	; 0x802add <VersionDisplay+0x10>
loop():
    596e:	20 e0       	ldi	r18, 0x00	; 0
    5970:	30 e0       	ldi	r19, 0x00	; 0
    5972:	40 ef       	ldi	r20, 0xF0	; 240
    5974:	52 e4       	ldi	r21, 0x42	; 66
    5976:	60 91 ee 28 	lds	r22, 0x28EE	; 0x8028ee <TEMP_DEG_RAW>
    597a:	70 91 ef 28 	lds	r23, 0x28EF	; 0x8028ef <TEMP_DEG_RAW+0x1>
    597e:	80 91 f0 28 	lds	r24, 0x28F0	; 0x8028f0 <TEMP_DEG_RAW+0x2>
    5982:	90 91 f1 28 	lds	r25, 0x28F1	; 0x8028f1 <TEMP_DEG_RAW+0x3>
    5986:	0e 94 b4 39 	call	0x7368	; 0x7368 <__gesf2>
    598a:	87 fd       	sbrc	r24, 7
    598c:	5a c0       	rjmp	.+180    	; 0x5a42 <main+0x834>
digitalWrite():
    598e:	60 e0       	ldi	r22, 0x00	; 0
    5990:	88 e1       	ldi	r24, 0x18	; 24
    5992:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
Probe_Error():
    5996:	10 92 9a 28 	sts	0x289A, r1	; 0x80289a <DOT2_0>
    599a:	10 92 99 28 	sts	0x2899, r1	; 0x802899 <DOT2_2>
    599e:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <DOT2_1>
    59a2:	10 92 98 28 	sts	0x2898, r1	; 0x802898 <DOT1_2>
    59a6:	10 92 bc 28 	sts	0x28BC, r1	; 0x8028bc <DOT1_0>
    59aa:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    59ae:	10 92 bf 28 	sts	0x28BF, r1	; 0x8028bf <Mode_Button_Single_Press_In_Settings>
    59b2:	10 92 ee 29 	sts	0x29EE, r1	; 0x8029ee <PID_SETPOINT>
    59b6:	10 92 ef 29 	sts	0x29EF, r1	; 0x8029ef <PID_SETPOINT+0x1>
    59ba:	10 92 f0 29 	sts	0x29F0, r1	; 0x8029f0 <PID_SETPOINT+0x2>
    59be:	10 92 f1 29 	sts	0x29F1, r1	; 0x8029f1 <PID_SETPOINT+0x3>
    59c2:	10 92 50 29 	sts	0x2950, r1	; 0x802950 <LONG_PRESS>
    59c6:	10 92 1c 29 	sts	0x291C, r1	; 0x80291c <ENTER_BUT>
digitalWrite():
    59ca:	60 e0       	ldi	r22, 0x00	; 0
    59cc:	8c e0       	ldi	r24, 0x0C	; 12
    59ce:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
    59d2:	60 e0       	ldi	r22, 0x00	; 0
    59d4:	8d e0       	ldi	r24, 0x0D	; 13
    59d6:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
Probe_Error():
    59da:	80 91 3d 28 	lds	r24, 0x283D	; 0x80283d <toggle>
    59de:	88 23       	and	r24, r24
    59e0:	09 f4       	brne	.+2      	; 0x59e4 <main+0x7d6>
    59e2:	22 c6       	rjmp	.+3140   	; 0x6628 <main+0x141a>
digitalWrite():
    59e4:	61 e0       	ldi	r22, 0x01	; 1
    59e6:	85 e1       	ldi	r24, 0x15	; 21
    59e8:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
DISPLAY_DIGIT2():
    59ec:	8b e0       	ldi	r24, 0x0B	; 11
    59ee:	90 e0       	ldi	r25, 0x00	; 0
    59f0:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    59f4:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    59f8:	81 e1       	ldi	r24, 0x11	; 17
    59fa:	90 e0       	ldi	r25, 0x00	; 0
    59fc:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    5a00:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    5a04:	27 e1       	ldi	r18, 0x17	; 23
    5a06:	30 e0       	ldi	r19, 0x00	; 0
    5a08:	20 93 02 29 	sts	0x2902, r18	; 0x802902 <digits2+0x4>
    5a0c:	30 93 03 29 	sts	0x2903, r19	; 0x802903 <digits2+0x5>
    5a10:	4e e0       	ldi	r20, 0x0E	; 14
    5a12:	50 e0       	ldi	r21, 0x00	; 0
    5a14:	40 93 04 29 	sts	0x2904, r20	; 0x802904 <digits2+0x6>
    5a18:	50 93 05 29 	sts	0x2905, r21	; 0x802905 <digits2+0x7>
DISPLAY_DIGIT1():
    5a1c:	4f e0       	ldi	r20, 0x0F	; 15
    5a1e:	50 e0       	ldi	r21, 0x00	; 0
    5a20:	40 93 f6 28 	sts	0x28F6, r20	; 0x8028f6 <digits1>
    5a24:	50 93 f7 28 	sts	0x28F7, r21	; 0x8028f7 <digits1+0x1>
    5a28:	80 93 f8 28 	sts	0x28F8, r24	; 0x8028f8 <digits1+0x2>
    5a2c:	90 93 f9 28 	sts	0x28F9, r25	; 0x8028f9 <digits1+0x3>
    5a30:	20 93 fa 28 	sts	0x28FA, r18	; 0x8028fa <digits1+0x4>
    5a34:	30 93 fb 28 	sts	0x28FB, r19	; 0x8028fb <digits1+0x5>
    5a38:	80 93 fc 28 	sts	0x28FC, r24	; 0x8028fc <digits1+0x6>
    5a3c:	90 93 fd 28 	sts	0x28FD, r25	; 0x8028fd <digits1+0x7>
    5a40:	85 cf       	rjmp	.-246    	; 0x594c <main+0x73e>
digitalRead():
    5a42:	85 e2       	ldi	r24, 0x25	; 37
    5a44:	0e 94 31 09 	call	0x1262	; 0x1262 <digitalRead.part.3>
    5a48:	10 91 42 28 	lds	r17, 0x2842	; 0x802842 <but1>
but_check():
    5a4c:	81 11       	cpse	r24, r1
    5a4e:	1c c0       	rjmp	.+56     	; 0x5a88 <main+0x87a>
digitalRead():
    5a50:	84 e2       	ldi	r24, 0x24	; 36
    5a52:	0e 94 31 09 	call	0x1262	; 0x1262 <digitalRead.part.3>
but_check():
    5a56:	81 11       	cpse	r24, r1
    5a58:	17 c0       	rjmp	.+46     	; 0x5a88 <main+0x87a>
    5a5a:	11 11       	cpse	r17, r1
    5a5c:	15 c0       	rjmp	.+42     	; 0x5a88 <main+0x87a>
    5a5e:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <millis>
    5a62:	60 93 3e 28 	sts	0x283E, r22	; 0x80283e <start_tt>
    5a66:	70 93 3f 28 	sts	0x283F, r23	; 0x80283f <start_tt+0x1>
    5a6a:	80 93 40 28 	sts	0x2840, r24	; 0x802840 <start_tt+0x2>
    5a6e:	90 93 41 28 	sts	0x2841, r25	; 0x802841 <start_tt+0x3>
    5a72:	81 e0       	ldi	r24, 0x01	; 1
    5a74:	80 93 42 28 	sts	0x2842, r24	; 0x802842 <but1>
loop():
    5a78:	80 91 50 29 	lds	r24, 0x2950	; 0x802950 <LONG_PRESS>
    5a7c:	88 23       	and	r24, r24
    5a7e:	09 f4       	brne	.+2      	; 0x5a82 <main+0x874>
    5a80:	53 c0       	rjmp	.+166    	; 0x5b28 <main+0x91a>
    5a82:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <Pclass::SET_LONG_PRESS_FUNCTION() [clone .constprop.33]>
    5a86:	62 cf       	rjmp	.-316    	; 0x594c <main+0x73e>
digitalRead():
    5a88:	85 e2       	ldi	r24, 0x25	; 37
    5a8a:	0e 94 31 09 	call	0x1262	; 0x1262 <digitalRead.part.3>
but_check():
    5a8e:	88 23       	and	r24, r24
    5a90:	51 f0       	breq	.+20     	; 0x5aa6 <main+0x898>
    5a92:	11 23       	and	r17, r17
    5a94:	89 f3       	breq	.-30     	; 0x5a78 <main+0x86a>
digitalRead():
    5a96:	85 e2       	ldi	r24, 0x25	; 37
    5a98:	0e 94 31 09 	call	0x1262	; 0x1262 <digitalRead.part.3>
but_check():
    5a9c:	81 30       	cpi	r24, 0x01	; 1
    5a9e:	e9 f5       	brne	.+122    	; 0x5b1a <main+0x90c>
    5aa0:	10 92 42 28 	sts	0x2842, r1	; 0x802842 <but1>
    5aa4:	e9 cf       	rjmp	.-46     	; 0x5a78 <main+0x86a>
    5aa6:	00 91 50 29 	lds	r16, 0x2950	; 0x802950 <LONG_PRESS>
digitalRead():
    5aaa:	84 e2       	ldi	r24, 0x24	; 36
    5aac:	0e 94 31 09 	call	0x1262	; 0x1262 <digitalRead.part.3>
but_check():
    5ab0:	81 11       	cpse	r24, r1
    5ab2:	ef cf       	rjmp	.-34     	; 0x5a92 <main+0x884>
    5ab4:	11 23       	and	r17, r17
    5ab6:	01 f3       	breq	.-64     	; 0x5a78 <main+0x86a>
    5ab8:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <millis>
    5abc:	c0 90 3e 28 	lds	r12, 0x283E	; 0x80283e <start_tt>
    5ac0:	d0 90 3f 28 	lds	r13, 0x283F	; 0x80283f <start_tt+0x1>
    5ac4:	e0 90 40 28 	lds	r14, 0x2840	; 0x802840 <start_tt+0x2>
    5ac8:	f0 90 41 28 	lds	r15, 0x2841	; 0x802841 <start_tt+0x3>
    5acc:	6c 19       	sub	r22, r12
    5ace:	7d 09       	sbc	r23, r13
    5ad0:	8e 09       	sbc	r24, r14
    5ad2:	9f 09       	sbc	r25, r15
    5ad4:	68 3b       	cpi	r22, 0xB8	; 184
    5ad6:	7b 40       	sbci	r23, 0x0B	; 11
    5ad8:	81 05       	cpc	r24, r1
    5ada:	91 05       	cpc	r25, r1
    5adc:	68 f2       	brcs	.-102    	; 0x5a78 <main+0x86a>
    5ade:	84 ef       	ldi	r24, 0xF4	; 244
    5ae0:	91 e0       	ldi	r25, 0x01	; 1
    5ae2:	0e 94 2a 0b 	call	0x1654	; 0x1654 <Tclass::BUZZ_INTERVAL(int) [clone .constprop.56]>
    5ae6:	80 91 1c 29 	lds	r24, 0x291C	; 0x80291c <ENTER_BUT>
    5aea:	81 11       	cpse	r24, r1
    5aec:	c5 cf       	rjmp	.-118    	; 0x5a78 <main+0x86a>
    5aee:	01 11       	cpse	r16, r1
    5af0:	c8 cf       	rjmp	.-112    	; 0x5a82 <main+0x874>
    5af2:	8e e5       	ldi	r24, 0x5E	; 94
    5af4:	91 e0       	ldi	r25, 0x01	; 1
    5af6:	80 93 ba 28 	sts	0x28BA, r24	; 0x8028ba <i>
    5afa:	90 93 bb 28 	sts	0x28BB, r25	; 0x8028bb <i+0x1>
    5afe:	81 e0       	ldi	r24, 0x01	; 1
    5b00:	80 93 50 29 	sts	0x2950, r24	; 0x802950 <LONG_PRESS>
    5b04:	80 93 a4 28 	sts	0x28A4, r24	; 0x8028a4 <RST_BUTT>
    5b08:	80 93 ad 28 	sts	0x28AD, r24	; 0x8028ad <Service_Menu>
    5b0c:	85 e0       	ldi	r24, 0x05	; 5
    5b0e:	90 e0       	ldi	r25, 0x00	; 0
    5b10:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <SELECTION_PARAMETER>
    5b14:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <SELECTION_PARAMETER+0x1>
    5b18:	af cf       	rjmp	.-162    	; 0x5a78 <main+0x86a>
digitalRead():
    5b1a:	84 e2       	ldi	r24, 0x24	; 36
    5b1c:	0e 94 31 09 	call	0x1262	; 0x1262 <digitalRead.part.3>
but_check():
    5b20:	81 30       	cpi	r24, 0x01	; 1
    5b22:	09 f0       	breq	.+2      	; 0x5b26 <main+0x918>
    5b24:	a9 cf       	rjmp	.-174    	; 0x5a78 <main+0x86a>
    5b26:	bc cf       	rjmp	.-136    	; 0x5aa0 <main+0x892>
SET_SHORT_PRESS_FUNCTION():
    5b28:	10 91 1c 29 	lds	r17, 0x291C	; 0x80291c <ENTER_BUT>
    5b2c:	12 30       	cpi	r17, 0x02	; 2
    5b2e:	09 f4       	brne	.+2      	; 0x5b32 <main+0x924>
    5b30:	01 c6       	rjmp	.+3074   	; 0x6734 <main+0x1526>
    5b32:	0c f0       	brlt	.+2      	; 0x5b36 <main+0x928>
    5b34:	4e c0       	rjmp	.+156    	; 0x5bd2 <main+0x9c4>
    5b36:	11 23       	and	r17, r17
    5b38:	09 f4       	brne	.+2      	; 0x5b3c <main+0x92e>
    5b3a:	f5 c3       	rjmp	.+2026   	; 0x6326 <main+0x1118>
    5b3c:	11 30       	cpi	r17, 0x01	; 1
    5b3e:	09 f0       	breq	.+2      	; 0x5b42 <main+0x934>
    5b40:	05 cf       	rjmp	.-502    	; 0x594c <main+0x73e>
    5b42:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    5b46:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <DOT2_1>
digitalWrite():
    5b4a:	60 e0       	ldi	r22, 0x00	; 0
    5b4c:	8d e1       	ldi	r24, 0x1D	; 29
    5b4e:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
    5b52:	61 e0       	ldi	r22, 0x01	; 1
    5b54:	8c e0       	ldi	r24, 0x0C	; 12
    5b56:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    5b5a:	80 91 ba 28 	lds	r24, 0x28BA	; 0x8028ba <i>
    5b5e:	90 91 bb 28 	lds	r25, 0x28BB	; 0x8028bb <i+0x1>
    5b62:	49 97       	sbiw	r24, 0x19	; 25
    5b64:	0c f0       	brlt	.+2      	; 0x5b68 <main+0x95a>
    5b66:	c7 c5       	rjmp	.+2958   	; 0x66f6 <main+0x14e8>
    5b68:	80 91 b9 28 	lds	r24, 0x28B9	; 0x8028b9 <BLINK_STATS>
    5b6c:	81 11       	cpse	r24, r1
    5b6e:	bc c5       	rjmp	.+2936   	; 0x66e8 <main+0x14da>
    5b70:	88 e1       	ldi	r24, 0x18	; 24
    5b72:	90 e0       	ldi	r25, 0x00	; 0
    5b74:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    5b78:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    5b7c:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    5b80:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    5b84:	80 91 ba 28 	lds	r24, 0x28BA	; 0x8028ba <i>
    5b88:	90 91 bb 28 	lds	r25, 0x28BB	; 0x8028bb <i+0x1>
    5b8c:	c3 97       	sbiw	r24, 0x33	; 51
    5b8e:	24 f0       	brlt	.+8      	; 0x5b98 <main+0x98a>
    5b90:	10 92 ba 28 	sts	0x28BA, r1	; 0x8028ba <i>
    5b94:	10 92 bb 28 	sts	0x28BB, r1	; 0x8028bb <i+0x1>
    5b98:	8a e0       	ldi	r24, 0x0A	; 10
    5b9a:	90 e0       	ldi	r25, 0x00	; 0
    5b9c:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    5ba0:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
    5ba4:	80 91 16 29 	lds	r24, 0x2916	; 0x802916 <SET_VALUE+0x6>
    5ba8:	90 91 17 29 	lds	r25, 0x2917	; 0x802917 <SET_VALUE+0x7>
    5bac:	24 e6       	ldi	r18, 0x64	; 100
    5bae:	28 9f       	mul	r18, r24
    5bb0:	b0 01       	movw	r22, r0
    5bb2:	29 9f       	mul	r18, r25
    5bb4:	70 0d       	add	r23, r0
    5bb6:	11 24       	eor	r1, r1
    5bb8:	80 91 18 29 	lds	r24, 0x2918	; 0x802918 <SET_VALUE+0x8>
    5bbc:	90 91 19 29 	lds	r25, 0x2919	; 0x802919 <SET_VALUE+0x9>
    5bc0:	68 0f       	add	r22, r24
    5bc2:	79 1f       	adc	r23, r25
    5bc4:	07 2e       	mov	r0, r23
    5bc6:	00 0c       	add	r0, r0
    5bc8:	88 0b       	sbc	r24, r24
    5bca:	99 0b       	sbc	r25, r25
    5bcc:	0e 94 a0 03 	call	0x740	; 0x740 <Eclass::BREAK_NUMBER1(long) [clone .constprop.46]>
    5bd0:	bd ce       	rjmp	.-646    	; 0x594c <main+0x73e>
    5bd2:	14 30       	cpi	r17, 0x04	; 4
    5bd4:	09 f4       	brne	.+2      	; 0x5bd8 <main+0x9ca>
    5bd6:	b8 c6       	rjmp	.+3440   	; 0x6948 <main+0x173a>
    5bd8:	0c f4       	brge	.+2      	; 0x5bdc <main+0x9ce>
    5bda:	32 c6       	rjmp	.+3172   	; 0x6840 <main+0x1632>
    5bdc:	15 30       	cpi	r17, 0x05	; 5
    5bde:	09 f0       	breq	.+2      	; 0x5be2 <main+0x9d4>
    5be0:	b5 ce       	rjmp	.-662    	; 0x594c <main+0x73e>
    5be2:	a0 90 12 29 	lds	r10, 0x2912	; 0x802912 <SET_VALUE+0x2>
    5be6:	b0 90 13 29 	lds	r11, 0x2913	; 0x802913 <SET_VALUE+0x3>
    5bea:	60 91 14 29 	lds	r22, 0x2914	; 0x802914 <SET_VALUE+0x4>
    5bee:	70 91 15 29 	lds	r23, 0x2915	; 0x802915 <SET_VALUE+0x5>
    5bf2:	07 2e       	mov	r0, r23
    5bf4:	00 0c       	add	r0, r0
    5bf6:	88 0b       	sbc	r24, r24
    5bf8:	99 0b       	sbc	r25, r25
    5bfa:	0e 94 04 39 	call	0x7208	; 0x7208 <__floatsisf>
    5bfe:	20 e0       	ldi	r18, 0x00	; 0
    5c00:	30 e0       	ldi	r19, 0x00	; 0
    5c02:	40 e2       	ldi	r20, 0x20	; 32
    5c04:	51 e4       	ldi	r21, 0x41	; 65
    5c06:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__divsf3>
    5c0a:	6b 01       	movw	r12, r22
    5c0c:	7c 01       	movw	r14, r24
    5c0e:	b5 01       	movw	r22, r10
    5c10:	bb 0c       	add	r11, r11
    5c12:	88 0b       	sbc	r24, r24
    5c14:	99 0b       	sbc	r25, r25
    5c16:	0e 94 04 39 	call	0x7208	; 0x7208 <__floatsisf>
    5c1a:	9b 01       	movw	r18, r22
    5c1c:	ac 01       	movw	r20, r24
    5c1e:	c7 01       	movw	r24, r14
    5c20:	b6 01       	movw	r22, r12
    5c22:	0e 94 01 38 	call	0x7002	; 0x7002 <__addsf3>
    5c26:	2b 01       	movw	r4, r22
    5c28:	3c 01       	movw	r6, r24
    5c2a:	40 92 7f 28 	sts	0x287F, r4	; 0x80287f <SET_TEMP_DEG>
    5c2e:	50 92 80 28 	sts	0x2880, r5	; 0x802880 <SET_TEMP_DEG+0x1>
    5c32:	60 92 81 28 	sts	0x2881, r6	; 0x802881 <SET_TEMP_DEG+0x2>
    5c36:	70 92 82 28 	sts	0x2882, r7	; 0x802882 <SET_TEMP_DEG+0x3>
    5c3a:	00 91 3c 29 	lds	r16, 0x293C	; 0x80293c <SET_LONG_VALUE+0x1f>
    5c3e:	10 91 3d 29 	lds	r17, 0x293D	; 0x80293d <SET_LONG_VALUE+0x20>
    5c42:	00 93 7d 28 	sts	0x287D, r16	; 0x80287d <SET_TEMP_FAH>
    5c46:	10 93 7e 28 	sts	0x287E, r17	; 0x80287e <SET_TEMP_FAH+0x1>
    5c4a:	c0 90 16 29 	lds	r12, 0x2916	; 0x802916 <SET_VALUE+0x6>
    5c4e:	d0 90 17 29 	lds	r13, 0x2917	; 0x802917 <SET_VALUE+0x7>
    5c52:	c0 92 9e 28 	sts	0x289E, r12	; 0x80289e <SET_HOUR>
    5c56:	d0 92 9f 28 	sts	0x289F, r13	; 0x80289f <SET_HOUR+0x1>
    5c5a:	e0 90 18 29 	lds	r14, 0x2918	; 0x802918 <SET_VALUE+0x8>
    5c5e:	f0 90 19 29 	lds	r15, 0x2919	; 0x802919 <SET_VALUE+0x9>
    5c62:	e0 92 9c 28 	sts	0x289C, r14	; 0x80289c <SET_MINUTE>
    5c66:	f0 92 9d 28 	sts	0x289D, r15	; 0x80289d <SET_MINUTE+0x1>
    5c6a:	2c e3       	ldi	r18, 0x3C	; 60
    5c6c:	2c 9d       	mul	r18, r12
    5c6e:	c0 01       	movw	r24, r0
    5c70:	2d 9d       	mul	r18, r13
    5c72:	90 0d       	add	r25, r0
    5c74:	11 24       	eor	r1, r1
    5c76:	8e 0d       	add	r24, r14
    5c78:	9f 1d       	adc	r25, r15
    5c7a:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <SET_MIN>
    5c7e:	90 93 a3 28 	sts	0x28A3, r25	; 0x8028a3 <SET_MIN+0x1>
    5c82:	81 e0       	ldi	r24, 0x01	; 1
    5c84:	80 93 9b 28 	sts	0x289B, r24	; 0x80289b <Process_Interrupt_flag>
Process_Set_Values_Store_On_Eeprom():
    5c88:	6a 2d       	mov	r22, r10
    5c8a:	83 e7       	ldi	r24, 0x73	; 115
    5c8c:	90 e0       	ldi	r25, 0x00	; 0
    5c8e:	0e 94 03 11 	call	0x2206	; 0x2206 <EEPROMClass::write(int, unsigned char) [clone .isra.0]>
    5c92:	60 91 14 29 	lds	r22, 0x2914	; 0x802914 <SET_VALUE+0x4>
    5c96:	85 e7       	ldi	r24, 0x75	; 117
    5c98:	90 e0       	ldi	r25, 0x00	; 0
    5c9a:	0e 94 03 11 	call	0x2206	; 0x2206 <EEPROMClass::write(int, unsigned char) [clone .isra.0]>
    5c9e:	6c e3       	ldi	r22, 0x3C	; 60
    5ca0:	79 e2       	ldi	r23, 0x29	; 41
    5ca2:	88 e7       	ldi	r24, 0x78	; 120
    5ca4:	90 e0       	ldi	r25, 0x00	; 0
    5ca6:	0e 94 3c 11 	call	0x2278	; 0x2278 <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.9] [clone .lto_priv.88]>
    5caa:	6c 2d       	mov	r22, r12
    5cac:	8d e7       	ldi	r24, 0x7D	; 125
    5cae:	90 e0       	ldi	r25, 0x00	; 0
    5cb0:	0e 94 03 11 	call	0x2206	; 0x2206 <EEPROMClass::write(int, unsigned char) [clone .isra.0]>
    5cb4:	6e 2d       	mov	r22, r14
    5cb6:	82 e8       	ldi	r24, 0x82	; 130
    5cb8:	90 e0       	ldi	r25, 0x00	; 0
    5cba:	0e 94 03 11 	call	0x2206	; 0x2206 <EEPROMClass::write(int, unsigned char) [clone .isra.0]>
Process_Time_Set_On_Eeprom():
    5cbe:	61 e0       	ldi	r22, 0x01	; 1
    5cc0:	87 e8       	ldi	r24, 0x87	; 135
    5cc2:	90 e0       	ldi	r25, 0x00	; 0
    5cc4:	0e 94 03 11 	call	0x2206	; 0x2206 <EEPROMClass::write(int, unsigned char) [clone .isra.0]>
    5cc8:	f0 90 4f 29 	lds	r15, 0x294F	; 0x80294f <DEGREE_VALUE_SET>
SET_SHORT_PRESS_FUNCTION():
    5ccc:	80 91 7c 28 	lds	r24, 0x287C	; 0x80287c <FILL_BATH_ERROR_NOT_CLEAR>
    5cd0:	81 11       	cpse	r24, r1
    5cd2:	1b c0       	rjmp	.+54     	; 0x5d0a <main+0xafc>
    5cd4:	f1 10       	cpse	r15, r1
    5cd6:	db c6       	rjmp	.+3510   	; 0x6a8e <main+0x1880>
    5cd8:	20 e0       	ldi	r18, 0x00	; 0
    5cda:	30 e0       	ldi	r19, 0x00	; 0
    5cdc:	40 e2       	ldi	r20, 0x20	; 32
    5cde:	51 e4       	ldi	r21, 0x41	; 65
    5ce0:	60 91 f2 28 	lds	r22, 0x28F2	; 0x8028f2 <TEMP_DEG>
    5ce4:	70 91 f3 28 	lds	r23, 0x28F3	; 0x8028f3 <TEMP_DEG+0x1>
    5ce8:	80 91 f4 28 	lds	r24, 0x28F4	; 0x8028f4 <TEMP_DEG+0x2>
    5cec:	90 91 f5 28 	lds	r25, 0x28F5	; 0x8028f5 <TEMP_DEG+0x3>
    5cf0:	0e 94 01 38 	call	0x7002	; 0x7002 <__addsf3>
    5cf4:	9b 01       	movw	r18, r22
    5cf6:	ac 01       	movw	r20, r24
    5cf8:	c3 01       	movw	r24, r6
    5cfa:	b2 01       	movw	r22, r4
    5cfc:	0e 94 b4 39 	call	0x7368	; 0x7368 <__gesf2>
    5d00:	87 ff       	sbrs	r24, 7
    5d02:	03 c0       	rjmp	.+6      	; 0x5d0a <main+0xafc>
    5d04:	81 e0       	ldi	r24, 0x01	; 1
    5d06:	80 93 7c 28 	sts	0x287C, r24	; 0x80287c <FILL_BATH_ERROR_NOT_CLEAR>
    5d0a:	80 91 7c 28 	lds	r24, 0x287C	; 0x80287c <FILL_BATH_ERROR_NOT_CLEAR>
    5d0e:	88 23       	and	r24, r24
    5d10:	09 f4       	brne	.+2      	; 0x5d14 <main+0xb06>
    5d12:	d6 c6       	rjmp	.+3500   	; 0x6ac0 <main+0x18b2>
    5d14:	10 92 8a 28 	sts	0x288A, r1	; 0x80288a <RATE_OF_HEATING>
    5d18:	10 92 8b 28 	sts	0x288B, r1	; 0x80288b <RATE_OF_HEATING+0x1>
    5d1c:	10 92 8c 28 	sts	0x288C, r1	; 0x80288c <RATE_OF_HEATING+0x2>
    5d20:	10 92 8d 28 	sts	0x288D, r1	; 0x80288d <RATE_OF_HEATING+0x3>
    5d24:	81 e0       	ldi	r24, 0x01	; 1
    5d26:	80 93 87 28 	sts	0x2887, r24	; 0x802887 <CHECK_RATE_OF_HEATING>
    5d2a:	10 92 7c 28 	sts	0x287C, r1	; 0x80287c <FILL_BATH_ERROR_NOT_CLEAR>
    5d2e:	f1 10       	cpse	r15, r1
    5d30:	e8 c6       	rjmp	.+3536   	; 0x6b02 <main+0x18f4>
    5d32:	80 91 7f 28 	lds	r24, 0x287F	; 0x80287f <SET_TEMP_DEG>
    5d36:	90 91 80 28 	lds	r25, 0x2880	; 0x802880 <SET_TEMP_DEG+0x1>
    5d3a:	a0 91 81 28 	lds	r26, 0x2881	; 0x802881 <SET_TEMP_DEG+0x2>
    5d3e:	b0 91 82 28 	lds	r27, 0x2882	; 0x802882 <SET_TEMP_DEG+0x3>
    5d42:	80 93 70 28 	sts	0x2870, r24	; 0x802870 <PID_SETPOINT_To_Show>
    5d46:	90 93 71 28 	sts	0x2871, r25	; 0x802871 <PID_SETPOINT_To_Show+0x1>
    5d4a:	a0 93 72 28 	sts	0x2872, r26	; 0x802872 <PID_SETPOINT_To_Show+0x2>
    5d4e:	b0 93 73 28 	sts	0x2873, r27	; 0x802873 <PID_SETPOINT_To_Show+0x3>
    5d52:	80 93 ee 29 	sts	0x29EE, r24	; 0x8029ee <PID_SETPOINT>
    5d56:	90 93 ef 29 	sts	0x29EF, r25	; 0x8029ef <PID_SETPOINT+0x1>
    5d5a:	a0 93 f0 29 	sts	0x29F0, r26	; 0x8029f0 <PID_SETPOINT+0x2>
    5d5e:	b0 93 f1 29 	sts	0x29F1, r27	; 0x8029f1 <PID_SETPOINT+0x3>
    5d62:	83 e0       	ldi	r24, 0x03	; 3
    5d64:	9b e2       	ldi	r25, 0x2B	; 43
    5d66:	0e 94 0a 0b 	call	0x1614	; 0x1614 <Ticker::start()>
    5d6a:	81 e0       	ldi	r24, 0x01	; 1
    5d6c:	80 93 6f 28 	sts	0x286F, r24	; 0x80286f <Alternate_Display_Flag>
digitalWrite():
    5d70:	61 e0       	ldi	r22, 0x01	; 1
    5d72:	81 e2       	ldi	r24, 0x21	; 33
    5d74:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    5d78:	22 24       	eor	r2, r2
    5d7a:	23 94       	inc	r2
    5d7c:	31 2c       	mov	r3, r1
    5d7e:	05 e1       	ldi	r16, 0x15	; 21
    5d80:	10 e0       	ldi	r17, 0x00	; 0
    5d82:	80 91 a2 28 	lds	r24, 0x28A2	; 0x8028a2 <SET_MIN>
    5d86:	90 91 a3 28 	lds	r25, 0x28A3	; 0x8028a3 <SET_MIN+0x1>
    5d8a:	18 16       	cp	r1, r24
    5d8c:	19 06       	cpc	r1, r25
    5d8e:	14 f0       	brlt	.+4      	; 0x5d94 <main+0xb86>
    5d90:	0c 94 6b 37 	jmp	0x6ed6	; 0x6ed6 <main+0x1cc8>
toggle_ticker_update():
    5d94:	86 e3       	ldi	r24, 0x36	; 54
    5d96:	9a e2       	ldi	r25, 0x2A	; 42
    5d98:	0e 94 ac 0a 	call	0x1558	; 0x1558 <Ticker::update()>
SET_SHORT_PRESS_FUNCTION():
    5d9c:	20 e0       	ldi	r18, 0x00	; 0
    5d9e:	30 e0       	ldi	r19, 0x00	; 0
    5da0:	40 e2       	ldi	r20, 0x20	; 32
    5da2:	51 e4       	ldi	r21, 0x41	; 65
    5da4:	60 91 7f 28 	lds	r22, 0x287F	; 0x80287f <SET_TEMP_DEG>
    5da8:	70 91 80 28 	lds	r23, 0x2880	; 0x802880 <SET_TEMP_DEG+0x1>
    5dac:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <SET_TEMP_DEG+0x2>
    5db0:	90 91 82 28 	lds	r25, 0x2882	; 0x802882 <SET_TEMP_DEG+0x3>
    5db4:	0e 94 01 38 	call	0x7002	; 0x7002 <__addsf3>
    5db8:	20 91 f2 28 	lds	r18, 0x28F2	; 0x8028f2 <TEMP_DEG>
    5dbc:	30 91 f3 28 	lds	r19, 0x28F3	; 0x8028f3 <TEMP_DEG+0x1>
    5dc0:	40 91 f4 28 	lds	r20, 0x28F4	; 0x8028f4 <TEMP_DEG+0x2>
    5dc4:	50 91 f5 28 	lds	r21, 0x28F5	; 0x8028f5 <TEMP_DEG+0x3>
    5dc8:	0e 94 65 38 	call	0x70ca	; 0x70ca <__cmpsf2>
    5dcc:	87 ff       	sbrs	r24, 7
    5dce:	04 c0       	rjmp	.+8      	; 0x5dd8 <main+0xbca>
    5dd0:	80 91 4f 29 	lds	r24, 0x294F	; 0x80294f <DEGREE_VALUE_SET>
    5dd4:	88 23       	and	r24, r24
    5dd6:	e9 f0       	breq	.+58     	; 0x5e12 <main+0xc04>
    5dd8:	60 91 7d 28 	lds	r22, 0x287D	; 0x80287d <SET_TEMP_FAH>
    5ddc:	70 91 7e 28 	lds	r23, 0x287E	; 0x80287e <SET_TEMP_FAH+0x1>
    5de0:	66 5f       	subi	r22, 0xF6	; 246
    5de2:	7f 4f       	sbci	r23, 0xFF	; 255
    5de4:	07 2e       	mov	r0, r23
    5de6:	00 0c       	add	r0, r0
    5de8:	88 0b       	sbc	r24, r24
    5dea:	99 0b       	sbc	r25, r25
    5dec:	0e 94 04 39 	call	0x7208	; 0x7208 <__floatsisf>
    5df0:	20 91 d0 28 	lds	r18, 0x28D0	; 0x8028d0 <TEMP_FAH>
    5df4:	30 91 d1 28 	lds	r19, 0x28D1	; 0x8028d1 <TEMP_FAH+0x1>
    5df8:	40 91 d2 28 	lds	r20, 0x28D2	; 0x8028d2 <TEMP_FAH+0x2>
    5dfc:	50 91 d3 28 	lds	r21, 0x28D3	; 0x8028d3 <TEMP_FAH+0x3>
    5e00:	0e 94 65 38 	call	0x70ca	; 0x70ca <__cmpsf2>
    5e04:	87 ff       	sbrs	r24, 7
    5e06:	a1 c6       	rjmp	.+3394   	; 0x6b4a <main+0x193c>
    5e08:	80 91 4f 29 	lds	r24, 0x294F	; 0x80294f <DEGREE_VALUE_SET>
    5e0c:	88 23       	and	r24, r24
    5e0e:	09 f4       	brne	.+2      	; 0x5e12 <main+0xc04>
    5e10:	9c c6       	rjmp	.+3384   	; 0x6b4a <main+0x193c>
    5e12:	10 92 ba 28 	sts	0x28BA, r1	; 0x8028ba <i>
    5e16:	10 92 bb 28 	sts	0x28BB, r1	; 0x8028bb <i+0x1>
    5e1a:	81 e0       	ldi	r24, 0x01	; 1
    5e1c:	80 93 85 28 	sts	0x2885, r24	; 0x802885 <checkTempRaised>
digitalWrite():
    5e20:	60 e0       	ldi	r22, 0x00	; 0
    5e22:	81 e2       	ldi	r24, 0x21	; 33
    5e24:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    5e28:	10 92 1c 29 	sts	0x291C, r1	; 0x80291c <ENTER_BUT>
    5e2c:	10 92 a2 28 	sts	0x28A2, r1	; 0x8028a2 <SET_MIN>
    5e30:	10 92 a3 28 	sts	0x28A3, r1	; 0x8028a3 <SET_MIN+0x1>
digitalWrite():
    5e34:	61 e0       	ldi	r22, 0x01	; 1
    5e36:	8d e1       	ldi	r24, 0x1D	; 29
    5e38:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
    5e3c:	60 e0       	ldi	r22, 0x00	; 0
    5e3e:	8b e1       	ldi	r24, 0x1B	; 27
    5e40:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    5e44:	0e 94 9b 04 	call	0x936	; 0x936 <Mclass::RTD_TEMP_CONV() [clone .constprop.36]>
DISP_UPDATE():
    5e48:	8b ed       	ldi	r24, 0xDB	; 219
    5e4a:	9b e2       	ldi	r25, 0x2B	; 43
    5e4c:	0e 94 ac 0a 	call	0x1558	; 0x1558 <Ticker::update()>
SET_SHORT_PRESS_FUNCTION():
    5e50:	80 91 a6 28 	lds	r24, 0x28A6	; 0x8028a6 <STIR_VALUE_SET>
    5e54:	88 23       	and	r24, r24
    5e56:	29 f0       	breq	.+10     	; 0x5e62 <main+0xc54>
    5e58:	80 91 0a 29 	lds	r24, 0x290A	; 0x80290a <select_product_type>
digitalWrite():
    5e5c:	61 e0       	ldi	r22, 0x01	; 1
SET_SHORT_PRESS_FUNCTION():
    5e5e:	81 11       	cpse	r24, r1
    5e60:	01 c0       	rjmp	.+2      	; 0x5e64 <main+0xc56>
digitalWrite():
    5e62:	60 e0       	ldi	r22, 0x00	; 0
    5e64:	89 e1       	ldi	r24, 0x19	; 25
    5e66:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    5e6a:	b0 90 87 28 	lds	r11, 0x2887	; 0x802887 <CHECK_RATE_OF_HEATING>
    5e6e:	b1 10       	cpse	r11, r1
    5e70:	0a c0       	rjmp	.+20     	; 0x5e86 <main+0xc78>
    5e72:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <millis>
    5e76:	60 93 6b 28 	sts	0x286B, r22	; 0x80286b <STOP_COUNT_VALUE>
    5e7a:	70 93 6c 28 	sts	0x286C, r23	; 0x80286c <STOP_COUNT_VALUE+0x1>
    5e7e:	80 93 6d 28 	sts	0x286D, r24	; 0x80286d <STOP_COUNT_VALUE+0x2>
    5e82:	90 93 6e 28 	sts	0x286E, r25	; 0x80286e <STOP_COUNT_VALUE+0x3>
    5e86:	c0 90 6b 28 	lds	r12, 0x286B	; 0x80286b <STOP_COUNT_VALUE>
    5e8a:	d0 90 6c 28 	lds	r13, 0x286C	; 0x80286c <STOP_COUNT_VALUE+0x1>
    5e8e:	e0 90 6d 28 	lds	r14, 0x286D	; 0x80286d <STOP_COUNT_VALUE+0x2>
    5e92:	f0 90 6e 28 	lds	r15, 0x286E	; 0x80286e <STOP_COUNT_VALUE+0x3>
    5e96:	80 91 74 28 	lds	r24, 0x2874	; 0x802874 <START_COUNT_VALUE>
    5e9a:	90 91 75 28 	lds	r25, 0x2875	; 0x802875 <START_COUNT_VALUE+0x1>
    5e9e:	a0 91 76 28 	lds	r26, 0x2876	; 0x802876 <START_COUNT_VALUE+0x2>
    5ea2:	b0 91 77 28 	lds	r27, 0x2877	; 0x802877 <START_COUNT_VALUE+0x3>
    5ea6:	c8 1a       	sub	r12, r24
    5ea8:	d9 0a       	sbc	r13, r25
    5eaa:	ea 0a       	sbc	r14, r26
    5eac:	fb 0a       	sbc	r15, r27
    5eae:	20 e2       	ldi	r18, 0x20	; 32
    5eb0:	c2 16       	cp	r12, r18
    5eb2:	2f eb       	ldi	r18, 0xBF	; 191
    5eb4:	d2 06       	cpc	r13, r18
    5eb6:	22 e0       	ldi	r18, 0x02	; 2
    5eb8:	e2 06       	cpc	r14, r18
    5eba:	f1 04       	cpc	r15, r1
    5ebc:	08 f4       	brcc	.+2      	; 0x5ec0 <main+0xcb2>
    5ebe:	51 c0       	rjmp	.+162    	; 0x5f62 <main+0xd54>
    5ec0:	b1 10       	cpse	r11, r1
    5ec2:	4f c0       	rjmp	.+158    	; 0x5f62 <main+0xd54>
    5ec4:	80 90 ee 28 	lds	r8, 0x28EE	; 0x8028ee <TEMP_DEG_RAW>
    5ec8:	90 90 ef 28 	lds	r9, 0x28EF	; 0x8028ef <TEMP_DEG_RAW+0x1>
    5ecc:	a0 90 f0 28 	lds	r10, 0x28F0	; 0x8028f0 <TEMP_DEG_RAW+0x2>
    5ed0:	b0 90 f1 28 	lds	r11, 0x28F1	; 0x8028f1 <TEMP_DEG_RAW+0x3>
    5ed4:	20 91 78 28 	lds	r18, 0x2878	; 0x802878 <TEMP_VALUE_INITIAL>
    5ed8:	30 91 79 28 	lds	r19, 0x2879	; 0x802879 <TEMP_VALUE_INITIAL+0x1>
    5edc:	40 91 7a 28 	lds	r20, 0x287A	; 0x80287a <TEMP_VALUE_INITIAL+0x2>
    5ee0:	50 91 7b 28 	lds	r21, 0x287B	; 0x80287b <TEMP_VALUE_INITIAL+0x3>
    5ee4:	c5 01       	movw	r24, r10
    5ee6:	b4 01       	movw	r22, r8
    5ee8:	0e 94 00 38 	call	0x7000	; 0x7000 <__subsf3>
    5eec:	2b 01       	movw	r4, r22
    5eee:	3c 01       	movw	r6, r24
    5ef0:	c7 01       	movw	r24, r14
    5ef2:	b6 01       	movw	r22, r12
    5ef4:	20 e6       	ldi	r18, 0x60	; 96
    5ef6:	3a ee       	ldi	r19, 0xEA	; 234
    5ef8:	40 e0       	ldi	r20, 0x00	; 0
    5efa:	50 e0       	ldi	r21, 0x00	; 0
    5efc:	0e 94 2e 3a 	call	0x745c	; 0x745c <__udivmodsi4>
    5f00:	ca 01       	movw	r24, r20
    5f02:	b9 01       	movw	r22, r18
    5f04:	0e 94 02 39 	call	0x7204	; 0x7204 <__floatunsisf>
    5f08:	9b 01       	movw	r18, r22
    5f0a:	ac 01       	movw	r20, r24
    5f0c:	c3 01       	movw	r24, r6
    5f0e:	b2 01       	movw	r22, r4
    5f10:	0e 94 69 38 	call	0x70d2	; 0x70d2 <__divsf3>
    5f14:	60 93 8a 28 	sts	0x288A, r22	; 0x80288a <RATE_OF_HEATING>
    5f18:	70 93 8b 28 	sts	0x288B, r23	; 0x80288b <RATE_OF_HEATING+0x1>
    5f1c:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <RATE_OF_HEATING+0x2>
    5f20:	90 93 8d 28 	sts	0x288D, r25	; 0x80288d <RATE_OF_HEATING+0x3>
    5f24:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <millis>
    5f28:	60 93 67 28 	sts	0x2867, r22	; 0x802867 <PREVIOUS_COOLING_RATE_TIME>
    5f2c:	70 93 68 28 	sts	0x2868, r23	; 0x802868 <PREVIOUS_COOLING_RATE_TIME+0x1>
    5f30:	80 93 69 28 	sts	0x2869, r24	; 0x802869 <PREVIOUS_COOLING_RATE_TIME+0x2>
    5f34:	90 93 6a 28 	sts	0x286A, r25	; 0x80286a <PREVIOUS_COOLING_RATE_TIME+0x3>
    5f38:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <millis>
    5f3c:	60 93 63 28 	sts	0x2863, r22	; 0x802863 <CAL_OF_10_MIN>
    5f40:	70 93 64 28 	sts	0x2864, r23	; 0x802864 <CAL_OF_10_MIN+0x1>
    5f44:	80 93 65 28 	sts	0x2865, r24	; 0x802865 <CAL_OF_10_MIN+0x2>
    5f48:	90 93 66 28 	sts	0x2866, r25	; 0x802866 <CAL_OF_10_MIN+0x3>
    5f4c:	80 92 5f 28 	sts	0x285F, r8	; 0x80285f <PREVIOUS_TEMP_COOLING_RATE>
    5f50:	90 92 60 28 	sts	0x2860, r9	; 0x802860 <PREVIOUS_TEMP_COOLING_RATE+0x1>
    5f54:	a0 92 61 28 	sts	0x2861, r10	; 0x802861 <PREVIOUS_TEMP_COOLING_RATE+0x2>
    5f58:	b0 92 62 28 	sts	0x2862, r11	; 0x802862 <PREVIOUS_TEMP_COOLING_RATE+0x3>
    5f5c:	81 e0       	ldi	r24, 0x01	; 1
    5f5e:	80 93 87 28 	sts	0x2887, r24	; 0x802887 <CHECK_RATE_OF_HEATING>
    5f62:	c0 90 8a 28 	lds	r12, 0x288A	; 0x80288a <RATE_OF_HEATING>
    5f66:	d0 90 8b 28 	lds	r13, 0x288B	; 0x80288b <RATE_OF_HEATING+0x1>
    5f6a:	e0 90 8c 28 	lds	r14, 0x288C	; 0x80288c <RATE_OF_HEATING+0x2>
    5f6e:	f0 90 8d 28 	lds	r15, 0x288D	; 0x80288d <RATE_OF_HEATING+0x3>
    5f72:	20 e0       	ldi	r18, 0x00	; 0
    5f74:	30 e0       	ldi	r19, 0x00	; 0
    5f76:	40 e8       	ldi	r20, 0x80	; 128
    5f78:	5f e3       	ldi	r21, 0x3F	; 63
    5f7a:	c7 01       	movw	r24, r14
    5f7c:	b6 01       	movw	r22, r12
    5f7e:	0e 94 b4 39 	call	0x7368	; 0x7368 <__gesf2>
    5f82:	87 fd       	sbrc	r24, 7
    5f84:	29 c6       	rjmp	.+3154   	; 0x6bd8 <main+0x19ca>
    5f86:	80 91 87 28 	lds	r24, 0x2887	; 0x802887 <CHECK_RATE_OF_HEATING>
    5f8a:	88 23       	and	r24, r24
    5f8c:	09 f4       	brne	.+2      	; 0x5f90 <main+0xd82>
    5f8e:	a0 c0       	rjmp	.+320    	; 0x60d0 <main+0xec2>
digitalWrite():
    5f90:	60 e0       	ldi	r22, 0x00	; 0
    5f92:	88 e1       	ldi	r24, 0x18	; 24
    5f94:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
stop():
    5f98:	10 92 e8 2a 	sts	0x2AE8, r1	; 0x802ae8 <PID_EXE>
    5f9c:	10 92 f3 2a 	sts	0x2AF3, r1	; 0x802af3 <PID_EXE+0xb>
    5fa0:	10 92 f4 2a 	sts	0x2AF4, r1	; 0x802af4 <PID_EXE+0xc>
    5fa4:	10 92 f5 2a 	sts	0x2AF5, r1	; 0x802af5 <PID_EXE+0xd>
    5fa8:	10 92 f6 2a 	sts	0x2AF6, r1	; 0x802af6 <PID_EXE+0xe>
    5fac:	10 92 f7 2a 	sts	0x2AF7, r1	; 0x802af7 <PID_EXE+0xf>
    5fb0:	10 92 f8 2a 	sts	0x2AF8, r1	; 0x802af8 <PID_EXE+0x10>
SET_SHORT_PRESS_FUNCTION():
    5fb4:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <millis>
    5fb8:	6b 01       	movw	r12, r22
    5fba:	7c 01       	movw	r14, r24
    5fbc:	c0 92 5b 28 	sts	0x285B, r12	; 0x80285b <CURRENT_COOLING_RATE_TIME>
    5fc0:	d0 92 5c 28 	sts	0x285C, r13	; 0x80285c <CURRENT_COOLING_RATE_TIME+0x1>
    5fc4:	e0 92 5d 28 	sts	0x285D, r14	; 0x80285d <CURRENT_COOLING_RATE_TIME+0x2>
    5fc8:	f0 92 5e 28 	sts	0x285E, r15	; 0x80285e <CURRENT_COOLING_RATE_TIME+0x3>
    5fcc:	10 92 89 28 	sts	0x2889, r1	; 0x802889 <EXECUTE_PID_LOOP>
    5fd0:	80 90 ee 28 	lds	r8, 0x28EE	; 0x8028ee <TEMP_DEG_RAW>
    5fd4:	90 90 ef 28 	lds	r9, 0x28EF	; 0x8028ef <TEMP_DEG_RAW+0x1>
    5fd8:	a0 90 f0 28 	lds	r10, 0x28F0	; 0x8028f0 <TEMP_DEG_RAW+0x2>
    5fdc:	b0 90 f1 28 	lds	r11, 0x28F1	; 0x8028f1 <TEMP_DEG_RAW+0x3>
    5fe0:	80 92 57 28 	sts	0x2857, r8	; 0x802857 <CURRENT_TEMP_COOLING_RATE>
    5fe4:	90 92 58 28 	sts	0x2858, r9	; 0x802858 <CURRENT_TEMP_COOLING_RATE+0x1>
    5fe8:	a0 92 59 28 	sts	0x2859, r10	; 0x802859 <CURRENT_TEMP_COOLING_RATE+0x2>
    5fec:	b0 92 5a 28 	sts	0x285A, r11	; 0x80285a <CURRENT_TEMP_COOLING_RATE+0x3>
    5ff0:	80 91 67 28 	lds	r24, 0x2867	; 0x802867 <PREVIOUS_COOLING_RATE_TIME>
    5ff4:	90 91 68 28 	lds	r25, 0x2868	; 0x802868 <PREVIOUS_COOLING_RATE_TIME+0x1>
    5ff8:	a0 91 69 28 	lds	r26, 0x2869	; 0x802869 <PREVIOUS_COOLING_RATE_TIME+0x2>
    5ffc:	b0 91 6a 28 	lds	r27, 0x286A	; 0x80286a <PREVIOUS_COOLING_RATE_TIME+0x3>
    6000:	26 01       	movw	r4, r12
    6002:	37 01       	movw	r6, r14
    6004:	48 1a       	sub	r4, r24
    6006:	59 0a       	sbc	r5, r25
    6008:	6a 0a       	sbc	r6, r26
    600a:	7b 0a       	sbc	r7, r27
    600c:	d3 01       	movw	r26, r6
    600e:	c2 01       	movw	r24, r4
    6010:	80 36       	cpi	r24, 0x60	; 96
    6012:	9a 4e       	sbci	r25, 0xEA	; 234
    6014:	a1 05       	cpc	r26, r1
    6016:	b1 05       	cpc	r27, r1
    6018:	09 f0       	breq	.+2      	; 0x601c <main+0xe0e>
    601a:	5a c0       	rjmp	.+180    	; 0x60d0 <main+0xec2>
    601c:	20 91 5f 28 	lds	r18, 0x285F	; 0x80285f <PREVIOUS_TEMP_COOLING_RATE>
    6020:	30 91 60 28 	lds	r19, 0x2860	; 0x802860 <PREVIOUS_TEMP_COOLING_RATE+0x1>
    6024:	40 91 61 28 	lds	r20, 0x2861	; 0x802861 <PREVIOUS_TEMP_COOLING_RATE+0x2>
    6028:	50 91 62 28 	lds	r21, 0x2862	; 0x802862 <PREVIOUS_TEMP_COOLING_RATE+0x3>
    602c:	c5 01       	movw	r24, r10
    602e:	b4 01       	movw	r22, r8
    6030:	e7 d7       	rcall	.+4046   	; 0x7000 <__subsf3>
    6032:	20 91 02 28 	lds	r18, 0x2802	; 0x802802 <COOLOING_RATE_COMP_VAL>
    6036:	30 91 03 28 	lds	r19, 0x2803	; 0x802803 <COOLOING_RATE_COMP_VAL+0x1>
    603a:	40 91 04 28 	lds	r20, 0x2804	; 0x802804 <COOLOING_RATE_COMP_VAL+0x2>
    603e:	50 91 05 28 	lds	r21, 0x2805	; 0x802805 <COOLOING_RATE_COMP_VAL+0x3>
    6042:	50 58       	subi	r21, 0x80	; 128
    6044:	0e 94 65 38 	call	0x70ca	; 0x70ca <__cmpsf2>
    6048:	18 16       	cp	r1, r24
    604a:	0c f4       	brge	.+2      	; 0x604e <main+0xe40>
    604c:	a1 c5       	rjmp	.+2882   	; 0x6b90 <main+0x1982>
    604e:	80 91 55 28 	lds	r24, 0x2855	; 0x802855 <COOLING_CYCLE_COUNT>
    6052:	90 91 56 28 	lds	r25, 0x2856	; 0x802856 <COOLING_CYCLE_COUNT+0x1>
    6056:	18 16       	cp	r1, r24
    6058:	19 06       	cpc	r1, r25
    605a:	0c f4       	brge	.+2      	; 0x605e <main+0xe50>
    605c:	79 c5       	rjmp	.+2802   	; 0x6b50 <main+0x1942>
    605e:	01 96       	adiw	r24, 0x01	; 1
    6060:	80 93 55 28 	sts	0x2855, r24	; 0x802855 <COOLING_CYCLE_COUNT>
    6064:	90 93 56 28 	sts	0x2856, r25	; 0x802856 <COOLING_CYCLE_COUNT+0x1>
    6068:	8a e0       	ldi	r24, 0x0A	; 10
    606a:	97 ed       	ldi	r25, 0xD7	; 215
    606c:	a3 e2       	ldi	r26, 0x23	; 35
    606e:	bc e3       	ldi	r27, 0x3C	; 60
    6070:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <COOLOING_RATE_COMP_VAL>
    6074:	90 93 03 28 	sts	0x2803, r25	; 0x802803 <COOLOING_RATE_COMP_VAL+0x1>
    6078:	a0 93 04 28 	sts	0x2804, r26	; 0x802804 <COOLOING_RATE_COMP_VAL+0x2>
    607c:	b0 93 05 28 	sts	0x2805, r27	; 0x802805 <COOLOING_RATE_COMP_VAL+0x3>
    6080:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <millis>
    6084:	60 93 51 28 	sts	0x2851, r22	; 0x802851 <TO_CHECK_REPETATION_WITHIN_TIME>
    6088:	70 93 52 28 	sts	0x2852, r23	; 0x802852 <TO_CHECK_REPETATION_WITHIN_TIME+0x1>
    608c:	80 93 53 28 	sts	0x2853, r24	; 0x802853 <TO_CHECK_REPETATION_WITHIN_TIME+0x2>
    6090:	90 93 54 28 	sts	0x2854, r25	; 0x802854 <TO_CHECK_REPETATION_WITHIN_TIME+0x3>
    6094:	80 91 55 28 	lds	r24, 0x2855	; 0x802855 <COOLING_CYCLE_COUNT>
    6098:	90 91 56 28 	lds	r25, 0x2856	; 0x802856 <COOLING_CYCLE_COUNT+0x1>
    609c:	02 97       	sbiw	r24, 0x02	; 2
    609e:	41 f4       	brne	.+16     	; 0x60b0 <main+0xea2>
    60a0:	10 92 8a 28 	sts	0x288A, r1	; 0x80288a <RATE_OF_HEATING>
    60a4:	10 92 8b 28 	sts	0x288B, r1	; 0x80288b <RATE_OF_HEATING+0x1>
    60a8:	10 92 8c 28 	sts	0x288C, r1	; 0x80288c <RATE_OF_HEATING+0x2>
    60ac:	10 92 8d 28 	sts	0x288D, r1	; 0x80288d <RATE_OF_HEATING+0x3>
    60b0:	c0 92 67 28 	sts	0x2867, r12	; 0x802867 <PREVIOUS_COOLING_RATE_TIME>
    60b4:	d0 92 68 28 	sts	0x2868, r13	; 0x802868 <PREVIOUS_COOLING_RATE_TIME+0x1>
    60b8:	e0 92 69 28 	sts	0x2869, r14	; 0x802869 <PREVIOUS_COOLING_RATE_TIME+0x2>
    60bc:	f0 92 6a 28 	sts	0x286A, r15	; 0x80286a <PREVIOUS_COOLING_RATE_TIME+0x3>
    60c0:	80 92 5f 28 	sts	0x285F, r8	; 0x80285f <PREVIOUS_TEMP_COOLING_RATE>
    60c4:	90 92 60 28 	sts	0x2860, r9	; 0x802860 <PREVIOUS_TEMP_COOLING_RATE+0x1>
    60c8:	a0 92 61 28 	sts	0x2861, r10	; 0x802861 <PREVIOUS_TEMP_COOLING_RATE+0x2>
    60cc:	b0 92 62 28 	sts	0x2862, r11	; 0x802862 <PREVIOUS_TEMP_COOLING_RATE+0x3>
    60d0:	80 90 f2 28 	lds	r8, 0x28F2	; 0x8028f2 <TEMP_DEG>
    60d4:	90 90 f3 28 	lds	r9, 0x28F3	; 0x8028f3 <TEMP_DEG+0x1>
    60d8:	a0 90 f4 28 	lds	r10, 0x28F4	; 0x8028f4 <TEMP_DEG+0x2>
    60dc:	b0 90 f5 28 	lds	r11, 0x28F5	; 0x8028f5 <TEMP_DEG+0x3>
    60e0:	c0 90 70 28 	lds	r12, 0x2870	; 0x802870 <PID_SETPOINT_To_Show>
    60e4:	d0 90 71 28 	lds	r13, 0x2871	; 0x802871 <PID_SETPOINT_To_Show+0x1>
    60e8:	e0 90 72 28 	lds	r14, 0x2872	; 0x802872 <PID_SETPOINT_To_Show+0x2>
    60ec:	f0 90 73 28 	lds	r15, 0x2873	; 0x802873 <PID_SETPOINT_To_Show+0x3>
    60f0:	80 91 a5 28 	lds	r24, 0x28A5	; 0x8028a5 <TIME_SOCK_OR_TOTAL>
    60f4:	81 11       	cpse	r24, r1
    60f6:	8c c5       	rjmp	.+2840   	; 0x6c10 <main+0x1a02>
    60f8:	81 e0       	ldi	r24, 0x01	; 1
    60fa:	80 93 a1 28 	sts	0x28A1, r24	; 0x8028a1 <COUNTDOWN_START>
    60fe:	a7 01       	movw	r20, r14
    6100:	96 01       	movw	r18, r12
    6102:	c5 01       	movw	r24, r10
    6104:	b4 01       	movw	r22, r8
    6106:	0e 94 b4 39 	call	0x7368	; 0x7368 <__gesf2>
    610a:	87 fd       	sbrc	r24, 7
    610c:	04 c0       	rjmp	.+8      	; 0x6116 <main+0xf08>
    610e:	80 91 4f 29 	lds	r24, 0x294F	; 0x80294f <DEGREE_VALUE_SET>
    6112:	88 23       	and	r24, r24
    6114:	99 f0       	breq	.+38     	; 0x613c <main+0xf2e>
    6116:	20 91 d0 28 	lds	r18, 0x28D0	; 0x8028d0 <TEMP_FAH>
    611a:	30 91 d1 28 	lds	r19, 0x28D1	; 0x8028d1 <TEMP_FAH+0x1>
    611e:	40 91 d2 28 	lds	r20, 0x28D2	; 0x8028d2 <TEMP_FAH+0x2>
    6122:	50 91 d3 28 	lds	r21, 0x28D3	; 0x8028d3 <TEMP_FAH+0x3>
    6126:	c7 01       	movw	r24, r14
    6128:	b6 01       	movw	r22, r12
    612a:	cf d7       	rcall	.+3998   	; 0x70ca <__cmpsf2>
    612c:	18 16       	cp	r1, r24
    612e:	0c f4       	brge	.+2      	; 0x6132 <main+0xf24>
    6130:	52 c0       	rjmp	.+164    	; 0x61d6 <main+0xfc8>
    6132:	80 91 4f 29 	lds	r24, 0x294F	; 0x80294f <DEGREE_VALUE_SET>
    6136:	88 23       	and	r24, r24
    6138:	09 f4       	brne	.+2      	; 0x613c <main+0xf2e>
    613a:	4d c0       	rjmp	.+154    	; 0x61d6 <main+0xfc8>
interval():
    613c:	80 91 93 2b 	lds	r24, 0x2B93	; 0x802b93 <BUZZ_TICK2+0x9>
    6140:	90 91 94 2b 	lds	r25, 0x2B94	; 0x802b94 <BUZZ_TICK2+0xa>
    6144:	89 2b       	or	r24, r25
    6146:	09 f4       	brne	.+2      	; 0x614a <main+0xf3c>
    6148:	99 c5       	rjmp	.+2866   	; 0x6c7c <main+0x1a6e>
    614a:	80 e9       	ldi	r24, 0x90	; 144
    614c:	91 e0       	ldi	r25, 0x01	; 1
    614e:	a0 e0       	ldi	r26, 0x00	; 0
    6150:	b0 e0       	ldi	r27, 0x00	; 0
    6152:	80 93 8b 2b 	sts	0x2B8B, r24	; 0x802b8b <BUZZ_TICK2+0x1>
    6156:	90 93 8c 2b 	sts	0x2B8C, r25	; 0x802b8c <BUZZ_TICK2+0x2>
    615a:	a0 93 8d 2b 	sts	0x2B8D, r26	; 0x802b8d <BUZZ_TICK2+0x3>
    615e:	b0 93 8e 2b 	sts	0x2B8E, r27	; 0x802b8e <BUZZ_TICK2+0x4>
    6162:	80 91 ae 2b 	lds	r24, 0x2BAE	; 0x802bae <BUZZ_TICK1+0x9>
    6166:	90 91 af 2b 	lds	r25, 0x2BAF	; 0x802baf <BUZZ_TICK1+0xa>
    616a:	89 2b       	or	r24, r25
    616c:	09 f4       	brne	.+2      	; 0x6170 <main+0xf62>
    616e:	8b c5       	rjmp	.+2838   	; 0x6c86 <main+0x1a78>
    6170:	80 e2       	ldi	r24, 0x20	; 32
    6172:	93 e0       	ldi	r25, 0x03	; 3
    6174:	a0 e0       	ldi	r26, 0x00	; 0
    6176:	b0 e0       	ldi	r27, 0x00	; 0
    6178:	80 93 a6 2b 	sts	0x2BA6, r24	; 0x802ba6 <BUZZ_TICK1+0x1>
    617c:	90 93 a7 2b 	sts	0x2BA7, r25	; 0x802ba7 <BUZZ_TICK1+0x2>
    6180:	a0 93 a8 2b 	sts	0x2BA8, r26	; 0x802ba8 <BUZZ_TICK1+0x3>
    6184:	b0 93 a9 2b 	sts	0x2BA9, r27	; 0x802ba9 <BUZZ_TICK1+0x4>
SET_SHORT_PRESS_FUNCTION():
    6188:	80 91 8f 28 	lds	r24, 0x288F	; 0x80288f <REP>
    618c:	90 91 90 28 	lds	r25, 0x2890	; 0x802890 <REP+0x1>
    6190:	89 2b       	or	r24, r25
    6192:	59 f4       	brne	.+22     	; 0x61aa <main+0xf9c>
    6194:	81 e0       	ldi	r24, 0x01	; 1
    6196:	80 93 88 28 	sts	0x2888, r24	; 0x802888 <REPETATION_FLAG>
BUZZ_TICK_START():
    619a:	85 ea       	ldi	r24, 0xA5	; 165
    619c:	9b e2       	ldi	r25, 0x2B	; 43
    619e:	0e 94 0a 0b 	call	0x1614	; 0x1614 <Ticker::start()>
SET_SHORT_PRESS_FUNCTION():
    61a2:	20 92 8f 28 	sts	0x288F, r2	; 0x80288f <REP>
    61a6:	30 92 90 28 	sts	0x2890, r3	; 0x802890 <REP+0x1>
    61aa:	80 91 94 28 	lds	r24, 0x2894	; 0x802894 <FOR_REP>
    61ae:	90 91 95 28 	lds	r25, 0x2895	; 0x802895 <FOR_REP+0x1>
    61b2:	02 97       	sbiw	r24, 0x02	; 2
    61b4:	81 f4       	brne	.+32     	; 0x61d6 <main+0xfc8>
stop():
    61b6:	10 92 a5 2b 	sts	0x2BA5, r1	; 0x802ba5 <BUZZ_TICK1>
    61ba:	10 92 b0 2b 	sts	0x2BB0, r1	; 0x802bb0 <BUZZ_TICK1+0xb>
    61be:	10 92 b1 2b 	sts	0x2BB1, r1	; 0x802bb1 <BUZZ_TICK1+0xc>
    61c2:	10 92 b2 2b 	sts	0x2BB2, r1	; 0x802bb2 <BUZZ_TICK1+0xd>
    61c6:	10 92 b3 2b 	sts	0x2BB3, r1	; 0x802bb3 <BUZZ_TICK1+0xe>
    61ca:	10 92 b4 2b 	sts	0x2BB4, r1	; 0x802bb4 <BUZZ_TICK1+0xf>
    61ce:	10 92 b5 2b 	sts	0x2BB5, r1	; 0x802bb5 <BUZZ_TICK1+0x10>
SET_SHORT_PRESS_FUNCTION():
    61d2:	10 92 88 28 	sts	0x2888, r1	; 0x802888 <REPETATION_FLAG>
    61d6:	80 91 a2 28 	lds	r24, 0x28A2	; 0x8028a2 <SET_MIN>
    61da:	90 91 a3 28 	lds	r25, 0x28A3	; 0x8028a3 <SET_MIN+0x1>
    61de:	6c e3       	ldi	r22, 0x3C	; 60
    61e0:	70 e0       	ldi	r23, 0x00	; 0
    61e2:	0e 94 1b 3a 	call	0x7436	; 0x7436 <__divmodhi4>
    61e6:	6b 01       	movw	r12, r22
    61e8:	7c 01       	movw	r14, r24
    61ea:	60 93 9e 28 	sts	0x289E, r22	; 0x80289e <SET_HOUR>
    61ee:	70 93 9f 28 	sts	0x289F, r23	; 0x80289f <SET_HOUR+0x1>
    61f2:	80 93 4f 28 	sts	0x284F, r24	; 0x80284f <REMAIN_MIN>
    61f6:	90 93 50 28 	sts	0x2850, r25	; 0x802850 <REMAIN_MIN+0x1>
    61fa:	20 e0       	ldi	r18, 0x00	; 0
    61fc:	30 e0       	ldi	r19, 0x00	; 0
    61fe:	40 e8       	ldi	r20, 0x80	; 128
    6200:	5f e3       	ldi	r21, 0x3F	; 63
    6202:	60 91 4b 28 	lds	r22, 0x284B	; 0x80284b <DISP_INC>
    6206:	70 91 4c 28 	lds	r23, 0x284C	; 0x80284c <DISP_INC+0x1>
    620a:	80 91 4d 28 	lds	r24, 0x284D	; 0x80284d <DISP_INC+0x2>
    620e:	90 91 4e 28 	lds	r25, 0x284E	; 0x80284e <DISP_INC+0x3>
    6212:	f7 d6       	rcall	.+3566   	; 0x7002 <__addsf3>
    6214:	60 93 4b 28 	sts	0x284B, r22	; 0x80284b <DISP_INC>
    6218:	70 93 4c 28 	sts	0x284C, r23	; 0x80284c <DISP_INC+0x1>
    621c:	80 93 4d 28 	sts	0x284D, r24	; 0x80284d <DISP_INC+0x2>
    6220:	90 93 4e 28 	sts	0x284E, r25	; 0x80284e <DISP_INC+0x3>
    6224:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    6228:	20 e0       	ldi	r18, 0x00	; 0
    622a:	30 e0       	ldi	r19, 0x00	; 0
    622c:	40 e8       	ldi	r20, 0x80	; 128
    622e:	5f e3       	ldi	r21, 0x3F	; 63
    6230:	60 91 8a 28 	lds	r22, 0x288A	; 0x80288a <RATE_OF_HEATING>
    6234:	70 91 8b 28 	lds	r23, 0x288B	; 0x80288b <RATE_OF_HEATING+0x1>
    6238:	80 91 8c 28 	lds	r24, 0x288C	; 0x80288c <RATE_OF_HEATING+0x2>
    623c:	90 91 8d 28 	lds	r25, 0x288D	; 0x80288d <RATE_OF_HEATING+0x3>
    6240:	0e 94 b4 39 	call	0x7368	; 0x7368 <__gesf2>
    6244:	87 fd       	sbrc	r24, 7
    6246:	2e c5       	rjmp	.+2652   	; 0x6ca4 <main+0x1a96>
    6248:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <DOT2_1>
    624c:	81 e0       	ldi	r24, 0x01	; 1
    624e:	80 93 93 28 	sts	0x2893, r24	; 0x802893 <IN_ERROR>
    6252:	10 92 88 28 	sts	0x2888, r1	; 0x802888 <REPETATION_FLAG>
    6256:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
digitalWrite():
    625a:	60 e0       	ldi	r22, 0x00	; 0
    625c:	8d e0       	ldi	r24, 0x0D	; 13
    625e:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
DISPLAY_DIGIT2():
    6262:	00 93 fe 28 	sts	0x28FE, r16	; 0x8028fe <digits2>
    6266:	10 93 ff 28 	sts	0x28FF, r17	; 0x8028ff <digits2+0x1>
    626a:	89 e1       	ldi	r24, 0x19	; 25
    626c:	90 e0       	ldi	r25, 0x00	; 0
    626e:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    6272:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    6276:	8a e1       	ldi	r24, 0x1A	; 26
    6278:	90 e0       	ldi	r25, 0x00	; 0
    627a:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <digits2+0x4>
    627e:	90 93 03 29 	sts	0x2903, r25	; 0x802903 <digits2+0x5>
    6282:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    6286:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
DISPLAY_DIGIT1():
    628a:	8e e0       	ldi	r24, 0x0E	; 14
    628c:	90 e0       	ldi	r25, 0x00	; 0
    628e:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <digits1>
    6292:	90 93 f7 28 	sts	0x28F7, r25	; 0x8028f7 <digits1+0x1>
    6296:	8d e0       	ldi	r24, 0x0D	; 13
    6298:	90 e0       	ldi	r25, 0x00	; 0
    629a:	80 93 f8 28 	sts	0x28F8, r24	; 0x8028f8 <digits1+0x2>
    629e:	90 93 f9 28 	sts	0x28F9, r25	; 0x8028f9 <digits1+0x3>
    62a2:	80 e1       	ldi	r24, 0x10	; 16
    62a4:	90 e0       	ldi	r25, 0x00	; 0
    62a6:	80 93 fa 28 	sts	0x28FA, r24	; 0x8028fa <digits1+0x4>
    62aa:	90 93 fb 28 	sts	0x28FB, r25	; 0x8028fb <digits1+0x5>
    62ae:	8e e1       	ldi	r24, 0x1E	; 30
    62b0:	90 e0       	ldi	r25, 0x00	; 0
    62b2:	80 93 fc 28 	sts	0x28FC, r24	; 0x8028fc <digits1+0x6>
    62b6:	90 93 fd 28 	sts	0x28FD, r25	; 0x8028fd <digits1+0x7>
interval():
    62ba:	80 91 93 2b 	lds	r24, 0x2B93	; 0x802b93 <BUZZ_TICK2+0x9>
    62be:	90 91 94 2b 	lds	r25, 0x2B94	; 0x802b94 <BUZZ_TICK2+0xa>
    62c2:	89 2b       	or	r24, r25
    62c4:	09 f4       	brne	.+2      	; 0x62c8 <main+0x10ba>
    62c6:	e4 c4       	rjmp	.+2504   	; 0x6c90 <main+0x1a82>
    62c8:	88 ee       	ldi	r24, 0xE8	; 232
    62ca:	93 e0       	ldi	r25, 0x03	; 3
    62cc:	a0 e0       	ldi	r26, 0x00	; 0
    62ce:	b0 e0       	ldi	r27, 0x00	; 0
    62d0:	80 93 8b 2b 	sts	0x2B8B, r24	; 0x802b8b <BUZZ_TICK2+0x1>
    62d4:	90 93 8c 2b 	sts	0x2B8C, r25	; 0x802b8c <BUZZ_TICK2+0x2>
    62d8:	a0 93 8d 2b 	sts	0x2B8D, r26	; 0x802b8d <BUZZ_TICK2+0x3>
    62dc:	b0 93 8e 2b 	sts	0x2B8E, r27	; 0x802b8e <BUZZ_TICK2+0x4>
    62e0:	80 91 ae 2b 	lds	r24, 0x2BAE	; 0x802bae <BUZZ_TICK1+0x9>
    62e4:	90 91 af 2b 	lds	r25, 0x2BAF	; 0x802baf <BUZZ_TICK1+0xa>
    62e8:	89 2b       	or	r24, r25
    62ea:	09 f4       	brne	.+2      	; 0x62ee <main+0x10e0>
    62ec:	d6 c4       	rjmp	.+2476   	; 0x6c9a <main+0x1a8c>
    62ee:	80 ed       	ldi	r24, 0xD0	; 208
    62f0:	97 e0       	ldi	r25, 0x07	; 7
    62f2:	a0 e0       	ldi	r26, 0x00	; 0
    62f4:	b0 e0       	ldi	r27, 0x00	; 0
    62f6:	80 93 a6 2b 	sts	0x2BA6, r24	; 0x802ba6 <BUZZ_TICK1+0x1>
    62fa:	90 93 a7 2b 	sts	0x2BA7, r25	; 0x802ba7 <BUZZ_TICK1+0x2>
    62fe:	a0 93 a8 2b 	sts	0x2BA8, r26	; 0x802ba8 <BUZZ_TICK1+0x3>
    6302:	b0 93 a9 2b 	sts	0x2BA9, r27	; 0x802ba9 <BUZZ_TICK1+0x4>
SET_SHORT_PRESS_FUNCTION():
    6306:	80 91 8f 28 	lds	r24, 0x288F	; 0x80288f <REP>
    630a:	90 91 90 28 	lds	r25, 0x2890	; 0x802890 <REP+0x1>
    630e:	89 2b       	or	r24, r25
    6310:	09 f0       	breq	.+2      	; 0x6314 <main+0x1106>
    6312:	37 cd       	rjmp	.-1426   	; 0x5d82 <main+0xb74>
BUZZ_TICK_START():
    6314:	85 ea       	ldi	r24, 0xA5	; 165
    6316:	9b e2       	ldi	r25, 0x2B	; 43
    6318:	0e 94 0a 0b 	call	0x1614	; 0x1614 <Ticker::start()>
SET_SHORT_PRESS_FUNCTION():
    631c:	20 92 8f 28 	sts	0x288F, r2	; 0x80288f <REP>
    6320:	30 92 90 28 	sts	0x2890, r3	; 0x802890 <REP+0x1>
    6324:	2e cd       	rjmp	.-1444   	; 0x5d82 <main+0xb74>
    6326:	10 92 9a 28 	sts	0x289A, r1	; 0x80289a <DOT2_0>
    632a:	10 92 99 28 	sts	0x2899, r1	; 0x802899 <DOT2_2>
    632e:	10 92 98 28 	sts	0x2898, r1	; 0x802898 <DOT1_2>
    6332:	10 92 bc 28 	sts	0x28BC, r1	; 0x8028bc <DOT1_0>
    6336:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    633a:	10 92 96 28 	sts	0x2896, r1	; 0x802896 <FOR_REP2>
    633e:	10 92 97 28 	sts	0x2897, r1	; 0x802897 <FOR_REP2+0x1>
    6342:	10 92 94 28 	sts	0x2894, r1	; 0x802894 <FOR_REP>
    6346:	10 92 95 28 	sts	0x2895, r1	; 0x802895 <FOR_REP+0x1>
    634a:	10 92 93 28 	sts	0x2893, r1	; 0x802893 <IN_ERROR>
    634e:	10 92 91 28 	sts	0x2891, r1	; 0x802891 <REP1>
    6352:	10 92 92 28 	sts	0x2892, r1	; 0x802892 <REP1+0x1>
    6356:	10 92 8f 28 	sts	0x288F, r1	; 0x80288f <REP>
    635a:	10 92 90 28 	sts	0x2890, r1	; 0x802890 <REP+0x1>
    635e:	10 92 8e 28 	sts	0x288E, r1	; 0x80288e <Blinking_Freq>
    6362:	10 92 b8 28 	sts	0x28B8, r1	; 0x8028b8 <CAL2_START>
    6366:	10 92 0b 29 	sts	0x290B, r1	; 0x80290b <PUMP_FLAG>
    636a:	10 92 8a 28 	sts	0x288A, r1	; 0x80288a <RATE_OF_HEATING>
    636e:	10 92 8b 28 	sts	0x288B, r1	; 0x80288b <RATE_OF_HEATING+0x1>
    6372:	10 92 8c 28 	sts	0x288C, r1	; 0x80288c <RATE_OF_HEATING+0x2>
    6376:	10 92 8d 28 	sts	0x288D, r1	; 0x80288d <RATE_OF_HEATING+0x3>
    637a:	10 92 89 28 	sts	0x2889, r1	; 0x802889 <EXECUTE_PID_LOOP>
    637e:	10 92 ee 29 	sts	0x29EE, r1	; 0x8029ee <PID_SETPOINT>
    6382:	10 92 ef 29 	sts	0x29EF, r1	; 0x8029ef <PID_SETPOINT+0x1>
    6386:	10 92 f0 29 	sts	0x29F0, r1	; 0x8029f0 <PID_SETPOINT+0x2>
    638a:	10 92 f1 29 	sts	0x29F1, r1	; 0x8029f1 <PID_SETPOINT+0x3>
    638e:	10 92 88 28 	sts	0x2888, r1	; 0x802888 <REPETATION_FLAG>
    6392:	10 92 bf 28 	sts	0x28BF, r1	; 0x8028bf <Mode_Button_Single_Press_In_Settings>
    6396:	81 e0       	ldi	r24, 0x01	; 1
    6398:	80 93 87 28 	sts	0x2887, r24	; 0x802887 <CHECK_RATE_OF_HEATING>
stop():
    639c:	10 92 a5 2b 	sts	0x2BA5, r1	; 0x802ba5 <BUZZ_TICK1>
    63a0:	10 92 b0 2b 	sts	0x2BB0, r1	; 0x802bb0 <BUZZ_TICK1+0xb>
    63a4:	10 92 b1 2b 	sts	0x2BB1, r1	; 0x802bb1 <BUZZ_TICK1+0xc>
    63a8:	10 92 b2 2b 	sts	0x2BB2, r1	; 0x802bb2 <BUZZ_TICK1+0xd>
    63ac:	10 92 b3 2b 	sts	0x2BB3, r1	; 0x802bb3 <BUZZ_TICK1+0xe>
    63b0:	10 92 b4 2b 	sts	0x2BB4, r1	; 0x802bb4 <BUZZ_TICK1+0xf>
    63b4:	10 92 b5 2b 	sts	0x2BB5, r1	; 0x802bb5 <BUZZ_TICK1+0x10>
SET_SHORT_PRESS_FUNCTION():
    63b8:	10 92 86 28 	sts	0x2886, r1	; 0x802886 <soak_once_flag>
digitalWrite():
    63bc:	60 e0       	ldi	r22, 0x00	; 0
    63be:	89 e1       	ldi	r24, 0x19	; 25
    63c0:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
stop():
    63c4:	10 92 6f 2b 	sts	0x2B6F, r1	; 0x802b6f <Blink_LED_ON>
    63c8:	10 92 7a 2b 	sts	0x2B7A, r1	; 0x802b7a <Blink_LED_ON+0xb>
    63cc:	10 92 7b 2b 	sts	0x2B7B, r1	; 0x802b7b <Blink_LED_ON+0xc>
    63d0:	10 92 7c 2b 	sts	0x2B7C, r1	; 0x802b7c <Blink_LED_ON+0xd>
    63d4:	10 92 7d 2b 	sts	0x2B7D, r1	; 0x802b7d <Blink_LED_ON+0xe>
    63d8:	10 92 7e 2b 	sts	0x2B7E, r1	; 0x802b7e <Blink_LED_ON+0xf>
    63dc:	10 92 7f 2b 	sts	0x2B7F, r1	; 0x802b7f <Blink_LED_ON+0x10>
    63e0:	10 92 54 2b 	sts	0x2B54, r1	; 0x802b54 <Blink_LED_OFF>
    63e4:	10 92 5f 2b 	sts	0x2B5F, r1	; 0x802b5f <Blink_LED_OFF+0xb>
    63e8:	10 92 60 2b 	sts	0x2B60, r1	; 0x802b60 <Blink_LED_OFF+0xc>
    63ec:	10 92 61 2b 	sts	0x2B61, r1	; 0x802b61 <Blink_LED_OFF+0xd>
    63f0:	10 92 62 2b 	sts	0x2B62, r1	; 0x802b62 <Blink_LED_OFF+0xe>
    63f4:	10 92 63 2b 	sts	0x2B63, r1	; 0x802b63 <Blink_LED_OFF+0xf>
    63f8:	10 92 64 2b 	sts	0x2B64, r1	; 0x802b64 <Blink_LED_OFF+0x10>
digitalWrite():
    63fc:	60 e0       	ldi	r22, 0x00	; 0
    63fe:	88 e1       	ldi	r24, 0x18	; 24
    6400:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
stop():
    6404:	10 92 e8 2a 	sts	0x2AE8, r1	; 0x802ae8 <PID_EXE>
    6408:	10 92 f3 2a 	sts	0x2AF3, r1	; 0x802af3 <PID_EXE+0xb>
    640c:	10 92 f4 2a 	sts	0x2AF4, r1	; 0x802af4 <PID_EXE+0xc>
    6410:	10 92 f5 2a 	sts	0x2AF5, r1	; 0x802af5 <PID_EXE+0xd>
    6414:	10 92 f6 2a 	sts	0x2AF6, r1	; 0x802af6 <PID_EXE+0xe>
    6418:	10 92 f7 2a 	sts	0x2AF7, r1	; 0x802af7 <PID_EXE+0xf>
    641c:	10 92 f8 2a 	sts	0x2AF8, r1	; 0x802af8 <PID_EXE+0x10>
SET_SHORT_PRESS_FUNCTION():
    6420:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
    6424:	80 91 85 28 	lds	r24, 0x2885	; 0x802885 <checkTempRaised>
    6428:	81 11       	cpse	r24, r1
    642a:	db c0       	rjmp	.+438    	; 0x65e2 <main+0x13d4>
    642c:	80 91 9b 28 	lds	r24, 0x289B	; 0x80289b <Process_Interrupt_flag>
    6430:	88 23       	and	r24, r24
    6432:	09 f4       	brne	.+2      	; 0x6436 <main+0x1228>
    6434:	81 c0       	rjmp	.+258    	; 0x6538 <main+0x132a>
    6436:	80 91 a0 28 	lds	r24, 0x28A0	; 0x8028a0 <Proceess_Resume_Enable_Flag>
    643a:	88 23       	and	r24, r24
    643c:	09 f4       	brne	.+2      	; 0x6440 <main+0x1232>
    643e:	7c c0       	rjmp	.+248    	; 0x6538 <main+0x132a>
    6440:	80 91 83 28 	lds	r24, 0x2883	; 0x802883 <z>
    6444:	90 91 84 28 	lds	r25, 0x2884	; 0x802884 <z+0x1>
    6448:	03 97       	sbiw	r24, 0x03	; 3
    644a:	0c f0       	brlt	.+2      	; 0x644e <main+0x1240>
    644c:	71 c0       	rjmp	.+226    	; 0x6530 <main+0x1322>
    644e:	00 91 ba 28 	lds	r16, 0x28BA	; 0x8028ba <i>
    6452:	10 91 bb 28 	lds	r17, 0x28BB	; 0x8028bb <i+0x1>
    6456:	0b 34       	cpi	r16, 0x4B	; 75
    6458:	11 05       	cpc	r17, r1
    645a:	5c f5       	brge	.+86     	; 0x64b2 <main+0x12a4>
digitalWrite():
    645c:	61 e0       	ldi	r22, 0x01	; 1
    645e:	85 e1       	ldi	r24, 0x15	; 21
    6460:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
DISPLAY_DIGIT1():
    6464:	88 e1       	ldi	r24, 0x18	; 24
    6466:	90 e0       	ldi	r25, 0x00	; 0
    6468:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <digits1>
    646c:	90 93 f7 28 	sts	0x28F7, r25	; 0x8028f7 <digits1+0x1>
    6470:	80 93 f8 28 	sts	0x28F8, r24	; 0x8028f8 <digits1+0x2>
    6474:	90 93 f9 28 	sts	0x28F9, r25	; 0x8028f9 <digits1+0x3>
    6478:	80 93 fa 28 	sts	0x28FA, r24	; 0x8028fa <digits1+0x4>
    647c:	90 93 fb 28 	sts	0x28FB, r25	; 0x8028fb <digits1+0x5>
    6480:	80 93 fc 28 	sts	0x28FC, r24	; 0x8028fc <digits1+0x6>
    6484:	90 93 fd 28 	sts	0x28FD, r25	; 0x8028fd <digits1+0x7>
DISPLAY_DIGIT2():
    6488:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    648c:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    6490:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    6494:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    6498:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <digits2+0x4>
    649c:	90 93 03 29 	sts	0x2903, r25	; 0x802903 <digits2+0x5>
    64a0:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    64a4:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
digitalWrite():
    64a8:	60 e0       	ldi	r22, 0x00	; 0
    64aa:	8c e0       	ldi	r24, 0x0C	; 12
    64ac:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
    64b0:	4d ca       	rjmp	.-2918   	; 0x594c <main+0x73e>
    64b2:	60 e0       	ldi	r22, 0x00	; 0
    64b4:	85 e1       	ldi	r24, 0x15	; 21
    64b6:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
DISPLAY_DIGIT2():
    64ba:	8b e0       	ldi	r24, 0x0B	; 11
    64bc:	90 e0       	ldi	r25, 0x00	; 0
    64be:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    64c2:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    64c6:	21 e1       	ldi	r18, 0x11	; 17
    64c8:	30 e0       	ldi	r19, 0x00	; 0
    64ca:	20 93 00 29 	sts	0x2900, r18	; 0x802900 <digits2+0x2>
    64ce:	30 93 01 29 	sts	0x2901, r19	; 0x802901 <digits2+0x3>
    64d2:	87 e1       	ldi	r24, 0x17	; 23
    64d4:	90 e0       	ldi	r25, 0x00	; 0
    64d6:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <digits2+0x4>
    64da:	90 93 03 29 	sts	0x2903, r25	; 0x802903 <digits2+0x5>
    64de:	8c e0       	ldi	r24, 0x0C	; 12
    64e0:	90 e0       	ldi	r25, 0x00	; 0
    64e2:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    64e6:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
DISPLAY_DIGIT1():
    64ea:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <digits1>
    64ee:	90 93 f7 28 	sts	0x28F7, r25	; 0x8028f7 <digits1+0x1>
    64f2:	80 e1       	ldi	r24, 0x10	; 16
    64f4:	90 e0       	ldi	r25, 0x00	; 0
    64f6:	80 93 f8 28 	sts	0x28F8, r24	; 0x8028f8 <digits1+0x2>
    64fa:	90 93 f9 28 	sts	0x28F9, r25	; 0x8028f9 <digits1+0x3>
    64fe:	20 93 fa 28 	sts	0x28FA, r18	; 0x8028fa <digits1+0x4>
    6502:	30 93 fb 28 	sts	0x28FB, r19	; 0x8028fb <digits1+0x5>
    6506:	80 93 fc 28 	sts	0x28FC, r24	; 0x8028fc <digits1+0x6>
    650a:	90 93 fd 28 	sts	0x28FD, r25	; 0x8028fd <digits1+0x7>
SET_SHORT_PRESS_FUNCTION():
    650e:	07 39       	cpi	r16, 0x97	; 151
    6510:	11 05       	cpc	r17, r1
    6512:	54 f2       	brlt	.-108    	; 0x64a8 <main+0x129a>
    6514:	80 91 83 28 	lds	r24, 0x2883	; 0x802883 <z>
    6518:	90 91 84 28 	lds	r25, 0x2884	; 0x802884 <z+0x1>
    651c:	01 96       	adiw	r24, 0x01	; 1
    651e:	80 93 83 28 	sts	0x2883, r24	; 0x802883 <z>
    6522:	90 93 84 28 	sts	0x2884, r25	; 0x802884 <z+0x1>
    6526:	10 92 ba 28 	sts	0x28BA, r1	; 0x8028ba <i>
    652a:	10 92 bb 28 	sts	0x28BB, r1	; 0x8028bb <i+0x1>
    652e:	bc cf       	rjmp	.-136    	; 0x64a8 <main+0x129a>
    6530:	85 e0       	ldi	r24, 0x05	; 5
    6532:	80 93 1c 29 	sts	0x291C, r24	; 0x80291c <ENTER_BUT>
    6536:	b8 cf       	rjmp	.-144    	; 0x64a8 <main+0x129a>
    6538:	80 91 4f 29 	lds	r24, 0x294F	; 0x80294f <DEGREE_VALUE_SET>
    653c:	81 11       	cpse	r24, r1
    653e:	38 c0       	rjmp	.+112    	; 0x65b0 <main+0x13a2>
    6540:	c0 90 f2 28 	lds	r12, 0x28F2	; 0x8028f2 <TEMP_DEG>
    6544:	d0 90 f3 28 	lds	r13, 0x28F3	; 0x8028f3 <TEMP_DEG+0x1>
    6548:	e0 90 f4 28 	lds	r14, 0x28F4	; 0x8028f4 <TEMP_DEG+0x2>
    654c:	f0 90 f5 28 	lds	r15, 0x28F5	; 0x8028f5 <TEMP_DEG+0x3>
    6550:	2d ec       	ldi	r18, 0xCD	; 205
    6552:	3c ec       	ldi	r19, 0xCC	; 204
    6554:	47 ec       	ldi	r20, 0xC7	; 199
    6556:	52 e4       	ldi	r21, 0x42	; 66
    6558:	c7 01       	movw	r24, r14
    655a:	b6 01       	movw	r22, r12
    655c:	05 d7       	rcall	.+3594   	; 0x7368 <__gesf2>
    655e:	18 16       	cp	r1, r24
    6560:	cc f4       	brge	.+50     	; 0x6594 <main+0x1386>
    6562:	20 e0       	ldi	r18, 0x00	; 0
    6564:	30 e0       	ldi	r19, 0x00	; 0
    6566:	40 e2       	ldi	r20, 0x20	; 32
    6568:	51 e4       	ldi	r21, 0x41	; 65
    656a:	c7 01       	movw	r24, r14
    656c:	b6 01       	movw	r22, r12
    656e:	00 d7       	rcall	.+3584   	; 0x7370 <__mulsf3>
    6570:	18 d6       	rcall	.+3120   	; 0x71a2 <__fixsfsi>
    6572:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Eclass::BREAK_NUMBER2(long) [clone .constprop.47]>
    6576:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <DOT2_1>
    657a:	8a e0       	ldi	r24, 0x0A	; 10
    657c:	90 e0       	ldi	r25, 0x00	; 0
    657e:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    6582:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
    6586:	60 e0       	ldi	r22, 0x00	; 0
    6588:	70 e0       	ldi	r23, 0x00	; 0
    658a:	cb 01       	movw	r24, r22
    658c:	0e 94 a0 03 	call	0x740	; 0x740 <Eclass::BREAK_NUMBER1(long) [clone .constprop.46]>
digitalWrite():
    6590:	61 e0       	ldi	r22, 0x01	; 1
    6592:	8b cf       	rjmp	.-234    	; 0x64aa <main+0x129c>
SET_SHORT_PRESS_FUNCTION():
    6594:	20 e0       	ldi	r18, 0x00	; 0
    6596:	30 e0       	ldi	r19, 0x00	; 0
    6598:	48 ec       	ldi	r20, 0xC8	; 200
    659a:	52 e4       	ldi	r21, 0x42	; 66
    659c:	c7 01       	movw	r24, r14
    659e:	b6 01       	movw	r22, r12
    65a0:	e7 d6       	rcall	.+3534   	; 0x7370 <__mulsf3>
    65a2:	ff d5       	rcall	.+3070   	; 0x71a2 <__fixsfsi>
    65a4:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Eclass::BREAK_NUMBER2(long) [clone .constprop.47]>
    65a8:	81 e0       	ldi	r24, 0x01	; 1
    65aa:	80 93 bd 28 	sts	0x28BD, r24	; 0x8028bd <DOT2_1>
    65ae:	e5 cf       	rjmp	.-54     	; 0x657a <main+0x136c>
    65b0:	20 e0       	ldi	r18, 0x00	; 0
    65b2:	30 e0       	ldi	r19, 0x00	; 0
    65b4:	40 e2       	ldi	r20, 0x20	; 32
    65b6:	51 e4       	ldi	r21, 0x41	; 65
    65b8:	60 91 d0 28 	lds	r22, 0x28D0	; 0x8028d0 <TEMP_FAH>
    65bc:	70 91 d1 28 	lds	r23, 0x28D1	; 0x8028d1 <TEMP_FAH+0x1>
    65c0:	80 91 d2 28 	lds	r24, 0x28D2	; 0x8028d2 <TEMP_FAH+0x2>
    65c4:	90 91 d3 28 	lds	r25, 0x28D3	; 0x8028d3 <TEMP_FAH+0x3>
    65c8:	d3 d6       	rcall	.+3494   	; 0x7370 <__mulsf3>
    65ca:	eb d5       	rcall	.+3030   	; 0x71a2 <__fixsfsi>
    65cc:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Eclass::BREAK_NUMBER2(long) [clone .constprop.47]>
    65d0:	85 e1       	ldi	r24, 0x15	; 21
    65d2:	90 e0       	ldi	r25, 0x00	; 0
    65d4:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    65d8:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
    65dc:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <DOT2_1>
    65e0:	d2 cf       	rjmp	.-92     	; 0x6586 <main+0x1378>
digitalWrite():
    65e2:	60 e0       	ldi	r22, 0x00	; 0
    65e4:	81 e2       	ldi	r24, 0x21	; 33
    65e6:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
    65ea:	61 e0       	ldi	r22, 0x01	; 1
    65ec:	8d e1       	ldi	r24, 0x1D	; 29
    65ee:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
    65f2:	61 e0       	ldi	r22, 0x01	; 1
    65f4:	8c e1       	ldi	r24, 0x1C	; 28
    65f6:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
    65fa:	61 e0       	ldi	r22, 0x01	; 1
    65fc:	8b e1       	ldi	r24, 0x1B	; 27
    65fe:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
    6602:	60 e0       	ldi	r22, 0x00	; 0
    6604:	8a e1       	ldi	r24, 0x1A	; 26
    6606:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
    660a:	60 e0       	ldi	r22, 0x00	; 0
    660c:	8d e0       	ldi	r24, 0x0D	; 13
    660e:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
    6612:	60 e0       	ldi	r22, 0x00	; 0
    6614:	8c e0       	ldi	r24, 0x0C	; 12
    6616:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    661a:	00 91 ba 28 	lds	r16, 0x28BA	; 0x8028ba <i>
    661e:	10 91 bb 28 	lds	r17, 0x28BB	; 0x8028bb <i+0x1>
    6622:	09 31       	cpi	r16, 0x19	; 25
    6624:	11 05       	cpc	r17, r1
    6626:	1c f5       	brge	.+70     	; 0x666e <main+0x1460>
digitalWrite():
    6628:	60 e0       	ldi	r22, 0x00	; 0
    662a:	85 e1       	ldi	r24, 0x15	; 21
    662c:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
DISPLAY_DIGIT2():
    6630:	88 e1       	ldi	r24, 0x18	; 24
    6632:	90 e0       	ldi	r25, 0x00	; 0
    6634:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    6638:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    663c:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    6640:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    6644:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <digits2+0x4>
    6648:	90 93 03 29 	sts	0x2903, r25	; 0x802903 <digits2+0x5>
    664c:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    6650:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
DISPLAY_DIGIT1():
    6654:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <digits1>
    6658:	90 93 f7 28 	sts	0x28F7, r25	; 0x8028f7 <digits1+0x1>
    665c:	80 93 f8 28 	sts	0x28F8, r24	; 0x8028f8 <digits1+0x2>
    6660:	90 93 f9 28 	sts	0x28F9, r25	; 0x8028f9 <digits1+0x3>
    6664:	80 93 fa 28 	sts	0x28FA, r24	; 0x8028fa <digits1+0x4>
    6668:	90 93 fb 28 	sts	0x28FB, r25	; 0x8028fb <digits1+0x5>
    666c:	e5 c9       	rjmp	.-3126   	; 0x5a38 <main+0x82a>
digitalWrite():
    666e:	61 e0       	ldi	r22, 0x01	; 1
    6670:	85 e1       	ldi	r24, 0x15	; 21
    6672:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    6676:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <DOT2_1>
DISPLAY_DIGIT2():
    667a:	8c e0       	ldi	r24, 0x0C	; 12
    667c:	90 e0       	ldi	r25, 0x00	; 0
    667e:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    6682:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    6686:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    668a:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    668e:	81 e1       	ldi	r24, 0x11	; 17
    6690:	90 e0       	ldi	r25, 0x00	; 0
    6692:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <digits2+0x4>
    6696:	90 93 03 29 	sts	0x2903, r25	; 0x802903 <digits2+0x5>
    669a:	88 e1       	ldi	r24, 0x18	; 24
    669c:	90 e0       	ldi	r25, 0x00	; 0
    669e:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    66a2:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
DISPLAY_DIGIT1():
    66a6:	85 e1       	ldi	r24, 0x15	; 21
    66a8:	90 e0       	ldi	r25, 0x00	; 0
    66aa:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <digits1>
    66ae:	90 93 f7 28 	sts	0x28F7, r25	; 0x8028f7 <digits1+0x1>
    66b2:	8d e0       	ldi	r24, 0x0D	; 13
    66b4:	90 e0       	ldi	r25, 0x00	; 0
    66b6:	80 93 f8 28 	sts	0x28F8, r24	; 0x8028f8 <digits1+0x2>
    66ba:	90 93 f9 28 	sts	0x28F9, r25	; 0x8028f9 <digits1+0x3>
    66be:	89 e1       	ldi	r24, 0x19	; 25
    66c0:	90 e0       	ldi	r25, 0x00	; 0
    66c2:	80 93 fa 28 	sts	0x28FA, r24	; 0x8028fa <digits1+0x4>
    66c6:	90 93 fb 28 	sts	0x28FB, r25	; 0x8028fb <digits1+0x5>
    66ca:	8a e1       	ldi	r24, 0x1A	; 26
    66cc:	90 e0       	ldi	r25, 0x00	; 0
    66ce:	80 93 fc 28 	sts	0x28FC, r24	; 0x8028fc <digits1+0x6>
    66d2:	90 93 fd 28 	sts	0x28FD, r25	; 0x8028fd <digits1+0x7>
SET_SHORT_PRESS_FUNCTION():
    66d6:	03 33       	cpi	r16, 0x33	; 51
    66d8:	11 05       	cpc	r17, r1
    66da:	0c f4       	brge	.+2      	; 0x66de <main+0x14d0>
    66dc:	37 c9       	rjmp	.-3474   	; 0x594c <main+0x73e>
    66de:	10 92 ba 28 	sts	0x28BA, r1	; 0x8028ba <i>
    66e2:	10 92 bb 28 	sts	0x28BB, r1	; 0x8028bb <i+0x1>
    66e6:	32 c9       	rjmp	.-3484   	; 0x594c <main+0x73e>
    66e8:	89 e1       	ldi	r24, 0x19	; 25
    66ea:	90 e0       	ldi	r25, 0x00	; 0
    66ec:	80 93 ba 28 	sts	0x28BA, r24	; 0x8028ba <i>
    66f0:	90 93 bb 28 	sts	0x28BB, r25	; 0x8028bb <i+0x1>
    66f4:	47 ca       	rjmp	.-2930   	; 0x5b84 <main+0x976>
    66f6:	10 93 bd 28 	sts	0x28BD, r17	; 0x8028bd <DOT2_1>
    66fa:	80 91 12 29 	lds	r24, 0x2912	; 0x802912 <SET_VALUE+0x2>
    66fe:	90 91 13 29 	lds	r25, 0x2913	; 0x802913 <SET_VALUE+0x3>
    6702:	24 e6       	ldi	r18, 0x64	; 100
    6704:	28 9f       	mul	r18, r24
    6706:	b0 01       	movw	r22, r0
    6708:	29 9f       	mul	r18, r25
    670a:	70 0d       	add	r23, r0
    670c:	11 24       	eor	r1, r1
    670e:	20 91 14 29 	lds	r18, 0x2914	; 0x802914 <SET_VALUE+0x4>
    6712:	30 91 15 29 	lds	r19, 0x2915	; 0x802915 <SET_VALUE+0x5>
    6716:	4a e0       	ldi	r20, 0x0A	; 10
    6718:	42 9f       	mul	r20, r18
    671a:	c0 01       	movw	r24, r0
    671c:	43 9f       	mul	r20, r19
    671e:	90 0d       	add	r25, r0
    6720:	11 24       	eor	r1, r1
    6722:	68 0f       	add	r22, r24
    6724:	79 1f       	adc	r23, r25
    6726:	07 2e       	mov	r0, r23
    6728:	00 0c       	add	r0, r0
    672a:	88 0b       	sbc	r24, r24
    672c:	99 0b       	sbc	r25, r25
    672e:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Eclass::BREAK_NUMBER2(long) [clone .constprop.47]>
    6732:	28 ca       	rjmp	.-2992   	; 0x5b84 <main+0x976>
    6734:	80 91 16 29 	lds	r24, 0x2916	; 0x802916 <SET_VALUE+0x6>
    6738:	90 91 17 29 	lds	r25, 0x2917	; 0x802917 <SET_VALUE+0x7>
    673c:	44 e6       	ldi	r20, 0x64	; 100
    673e:	f4 2e       	mov	r15, r20
    6740:	f8 9e       	mul	r15, r24
    6742:	b0 01       	movw	r22, r0
    6744:	f9 9e       	mul	r15, r25
    6746:	70 0d       	add	r23, r0
    6748:	11 24       	eor	r1, r1
    674a:	80 91 18 29 	lds	r24, 0x2918	; 0x802918 <SET_VALUE+0x8>
    674e:	90 91 19 29 	lds	r25, 0x2919	; 0x802919 <SET_VALUE+0x9>
    6752:	68 0f       	add	r22, r24
    6754:	79 1f       	adc	r23, r25
    6756:	07 2e       	mov	r0, r23
    6758:	00 0c       	add	r0, r0
    675a:	88 0b       	sbc	r24, r24
    675c:	99 0b       	sbc	r25, r25
    675e:	0e 94 a0 03 	call	0x740	; 0x740 <Eclass::BREAK_NUMBER1(long) [clone .constprop.46]>
    6762:	00 91 ba 28 	lds	r16, 0x28BA	; 0x8028ba <i>
    6766:	10 91 bb 28 	lds	r17, 0x28BB	; 0x8028bb <i+0x1>
    676a:	80 91 4f 29 	lds	r24, 0x294F	; 0x80294f <DEGREE_VALUE_SET>
    676e:	81 11       	cpse	r24, r1
    6770:	39 c0       	rjmp	.+114    	; 0x67e4 <main+0x15d6>
    6772:	80 91 12 29 	lds	r24, 0x2912	; 0x802912 <SET_VALUE+0x2>
    6776:	90 91 13 29 	lds	r25, 0x2913	; 0x802913 <SET_VALUE+0x3>
    677a:	f8 9e       	mul	r15, r24
    677c:	b0 01       	movw	r22, r0
    677e:	f9 9e       	mul	r15, r25
    6780:	70 0d       	add	r23, r0
    6782:	11 24       	eor	r1, r1
    6784:	20 91 14 29 	lds	r18, 0x2914	; 0x802914 <SET_VALUE+0x4>
    6788:	30 91 15 29 	lds	r19, 0x2915	; 0x802915 <SET_VALUE+0x5>
    678c:	4a e0       	ldi	r20, 0x0A	; 10
    678e:	42 9f       	mul	r20, r18
    6790:	c0 01       	movw	r24, r0
    6792:	43 9f       	mul	r20, r19
    6794:	90 0d       	add	r25, r0
    6796:	11 24       	eor	r1, r1
    6798:	68 0f       	add	r22, r24
    679a:	79 1f       	adc	r23, r25
    679c:	07 2e       	mov	r0, r23
    679e:	00 0c       	add	r0, r0
    67a0:	88 0b       	sbc	r24, r24
    67a2:	99 0b       	sbc	r25, r25
    67a4:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Eclass::BREAK_NUMBER2(long) [clone .constprop.47]>
    67a8:	8a e0       	ldi	r24, 0x0A	; 10
    67aa:	90 e0       	ldi	r25, 0x00	; 0
    67ac:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    67b0:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
    67b4:	81 e0       	ldi	r24, 0x01	; 1
    67b6:	80 93 bd 28 	sts	0x28BD, r24	; 0x8028bd <DOT2_1>
    67ba:	09 31       	cpi	r16, 0x19	; 25
    67bc:	11 05       	cpc	r17, r1
    67be:	54 f4       	brge	.+20     	; 0x67d4 <main+0x15c6>
    67c0:	80 91 b9 28 	lds	r24, 0x28B9	; 0x8028b9 <BLINK_STATS>
    67c4:	81 11       	cpse	r24, r1
    67c6:	95 c0       	rjmp	.+298    	; 0x68f2 <main+0x16e4>
    67c8:	88 e1       	ldi	r24, 0x18	; 24
    67ca:	90 e0       	ldi	r25, 0x00	; 0
    67cc:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <digits2+0x4>
    67d0:	90 93 03 29 	sts	0x2903, r25	; 0x802903 <digits2+0x5>
    67d4:	80 91 ba 28 	lds	r24, 0x28BA	; 0x8028ba <i>
    67d8:	90 91 bb 28 	lds	r25, 0x28BB	; 0x8028bb <i+0x1>
    67dc:	c3 97       	sbiw	r24, 0x33	; 51
    67de:	0c f0       	brlt	.+2      	; 0x67e2 <main+0x15d4>
    67e0:	7e cf       	rjmp	.-260    	; 0x66de <main+0x14d0>
    67e2:	b4 c8       	rjmp	.-3736   	; 0x594c <main+0x73e>
digitalWrite():
    67e4:	60 e0       	ldi	r22, 0x00	; 0
    67e6:	8d e1       	ldi	r24, 0x1D	; 29
    67e8:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    67ec:	80 91 3c 29 	lds	r24, 0x293C	; 0x80293c <SET_LONG_VALUE+0x1f>
    67f0:	90 91 3d 29 	lds	r25, 0x293D	; 0x80293d <SET_LONG_VALUE+0x20>
    67f4:	2a e0       	ldi	r18, 0x0A	; 10
    67f6:	28 9f       	mul	r18, r24
    67f8:	b0 01       	movw	r22, r0
    67fa:	29 9f       	mul	r18, r25
    67fc:	70 0d       	add	r23, r0
    67fe:	11 24       	eor	r1, r1
    6800:	07 2e       	mov	r0, r23
    6802:	00 0c       	add	r0, r0
    6804:	88 0b       	sbc	r24, r24
    6806:	99 0b       	sbc	r25, r25
    6808:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Eclass::BREAK_NUMBER2(long) [clone .constprop.47]>
    680c:	85 e1       	ldi	r24, 0x15	; 21
    680e:	90 e0       	ldi	r25, 0x00	; 0
    6810:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    6814:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
    6818:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <DOT2_1>
    681c:	09 31       	cpi	r16, 0x19	; 25
    681e:	11 05       	cpc	r17, r1
    6820:	cc f6       	brge	.-78     	; 0x67d4 <main+0x15c6>
    6822:	80 91 b9 28 	lds	r24, 0x28B9	; 0x8028b9 <BLINK_STATS>
    6826:	81 11       	cpse	r24, r1
    6828:	64 c0       	rjmp	.+200    	; 0x68f2 <main+0x16e4>
    682a:	88 e1       	ldi	r24, 0x18	; 24
    682c:	90 e0       	ldi	r25, 0x00	; 0
    682e:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    6832:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    6836:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    683a:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    683e:	c6 cf       	rjmp	.-116    	; 0x67cc <main+0x15be>
    6840:	80 91 4f 29 	lds	r24, 0x294F	; 0x80294f <DEGREE_VALUE_SET>
    6844:	81 11       	cpse	r24, r1
    6846:	3c c0       	rjmp	.+120    	; 0x68c0 <main+0x16b2>
    6848:	80 91 12 29 	lds	r24, 0x2912	; 0x802912 <SET_VALUE+0x2>
    684c:	90 91 13 29 	lds	r25, 0x2913	; 0x802913 <SET_VALUE+0x3>
    6850:	24 e6       	ldi	r18, 0x64	; 100
    6852:	28 9f       	mul	r18, r24
    6854:	b0 01       	movw	r22, r0
    6856:	29 9f       	mul	r18, r25
    6858:	70 0d       	add	r23, r0
    685a:	11 24       	eor	r1, r1
    685c:	20 91 14 29 	lds	r18, 0x2914	; 0x802914 <SET_VALUE+0x4>
    6860:	30 91 15 29 	lds	r19, 0x2915	; 0x802915 <SET_VALUE+0x5>
    6864:	4a e0       	ldi	r20, 0x0A	; 10
    6866:	42 9f       	mul	r20, r18
    6868:	c0 01       	movw	r24, r0
    686a:	43 9f       	mul	r20, r19
    686c:	90 0d       	add	r25, r0
    686e:	11 24       	eor	r1, r1
    6870:	68 0f       	add	r22, r24
    6872:	79 1f       	adc	r23, r25
    6874:	07 2e       	mov	r0, r23
    6876:	00 0c       	add	r0, r0
    6878:	88 0b       	sbc	r24, r24
    687a:	99 0b       	sbc	r25, r25
    687c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Eclass::BREAK_NUMBER2(long) [clone .constprop.47]>
    6880:	8a e0       	ldi	r24, 0x0A	; 10
    6882:	90 e0       	ldi	r25, 0x00	; 0
    6884:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    6888:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
    688c:	81 e0       	ldi	r24, 0x01	; 1
    688e:	80 93 bd 28 	sts	0x28BD, r24	; 0x8028bd <DOT2_1>
    6892:	80 91 ba 28 	lds	r24, 0x28BA	; 0x8028ba <i>
    6896:	90 91 bb 28 	lds	r25, 0x28BB	; 0x8028bb <i+0x1>
    689a:	49 97       	sbiw	r24, 0x19	; 25
    689c:	8c f5       	brge	.+98     	; 0x6900 <main+0x16f2>
    689e:	80 91 b9 28 	lds	r24, 0x28B9	; 0x8028b9 <BLINK_STATS>
    68a2:	81 11       	cpse	r24, r1
    68a4:	26 c0       	rjmp	.+76     	; 0x68f2 <main+0x16e4>
    68a6:	88 e1       	ldi	r24, 0x18	; 24
    68a8:	90 e0       	ldi	r25, 0x00	; 0
    68aa:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <digits1>
    68ae:	90 93 f7 28 	sts	0x28F7, r25	; 0x8028f7 <digits1+0x1>
    68b2:	80 93 f8 28 	sts	0x28F8, r24	; 0x8028f8 <digits1+0x2>
    68b6:	90 93 f9 28 	sts	0x28F9, r25	; 0x8028f9 <digits1+0x3>
    68ba:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    68be:	8a cf       	rjmp	.-236    	; 0x67d4 <main+0x15c6>
    68c0:	80 91 3c 29 	lds	r24, 0x293C	; 0x80293c <SET_LONG_VALUE+0x1f>
    68c4:	90 91 3d 29 	lds	r25, 0x293D	; 0x80293d <SET_LONG_VALUE+0x20>
    68c8:	2a e0       	ldi	r18, 0x0A	; 10
    68ca:	28 9f       	mul	r18, r24
    68cc:	b0 01       	movw	r22, r0
    68ce:	29 9f       	mul	r18, r25
    68d0:	70 0d       	add	r23, r0
    68d2:	11 24       	eor	r1, r1
    68d4:	07 2e       	mov	r0, r23
    68d6:	00 0c       	add	r0, r0
    68d8:	88 0b       	sbc	r24, r24
    68da:	99 0b       	sbc	r25, r25
    68dc:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Eclass::BREAK_NUMBER2(long) [clone .constprop.47]>
    68e0:	85 e1       	ldi	r24, 0x15	; 21
    68e2:	90 e0       	ldi	r25, 0x00	; 0
    68e4:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    68e8:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
    68ec:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <DOT2_1>
    68f0:	d0 cf       	rjmp	.-96     	; 0x6892 <main+0x1684>
    68f2:	89 e1       	ldi	r24, 0x19	; 25
    68f4:	90 e0       	ldi	r25, 0x00	; 0
    68f6:	80 93 ba 28 	sts	0x28BA, r24	; 0x8028ba <i>
    68fa:	90 93 bb 28 	sts	0x28BB, r25	; 0x8028bb <i+0x1>
    68fe:	6a cf       	rjmp	.-300    	; 0x67d4 <main+0x15c6>
    6900:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    6904:	80 91 1c 29 	lds	r24, 0x291C	; 0x80291c <ENTER_BUT>
    6908:	08 2e       	mov	r0, r24
    690a:	00 0c       	add	r0, r0
    690c:	99 0b       	sbc	r25, r25
    690e:	fc 01       	movw	r30, r24
    6910:	ee 0f       	add	r30, r30
    6912:	ff 1f       	adc	r31, r31
    6914:	e0 5f       	subi	r30, 0xF0	; 240
    6916:	f6 4d       	sbci	r31, 0xD6	; 214
    6918:	20 81       	ld	r18, Z
    691a:	31 81       	ldd	r19, Z+1	; 0x01
    691c:	44 e6       	ldi	r20, 0x64	; 100
    691e:	42 9f       	mul	r20, r18
    6920:	b0 01       	movw	r22, r0
    6922:	43 9f       	mul	r20, r19
    6924:	70 0d       	add	r23, r0
    6926:	11 24       	eor	r1, r1
    6928:	88 0f       	add	r24, r24
    692a:	99 1f       	adc	r25, r25
    692c:	fc 01       	movw	r30, r24
    692e:	ee 5e       	subi	r30, 0xEE	; 238
    6930:	f6 4d       	sbci	r31, 0xD6	; 214
    6932:	80 81       	ld	r24, Z
    6934:	91 81       	ldd	r25, Z+1	; 0x01
    6936:	68 0f       	add	r22, r24
    6938:	79 1f       	adc	r23, r25
    693a:	07 2e       	mov	r0, r23
    693c:	00 0c       	add	r0, r0
    693e:	88 0b       	sbc	r24, r24
    6940:	99 0b       	sbc	r25, r25
    6942:	0e 94 a0 03 	call	0x740	; 0x740 <Eclass::BREAK_NUMBER1(long) [clone .constprop.46]>
    6946:	46 cf       	rjmp	.-372    	; 0x67d4 <main+0x15c6>
    6948:	10 92 be 28 	sts	0x28BE, r1	; 0x8028be <DOT1_1>
    694c:	80 91 4f 29 	lds	r24, 0x294F	; 0x80294f <DEGREE_VALUE_SET>
    6950:	81 11       	cpse	r24, r1
    6952:	7d c0       	rjmp	.+250    	; 0x6a4e <main+0x1840>
    6954:	80 91 12 29 	lds	r24, 0x2912	; 0x802912 <SET_VALUE+0x2>
    6958:	90 91 13 29 	lds	r25, 0x2913	; 0x802913 <SET_VALUE+0x3>
    695c:	24 e6       	ldi	r18, 0x64	; 100
    695e:	28 9f       	mul	r18, r24
    6960:	b0 01       	movw	r22, r0
    6962:	29 9f       	mul	r18, r25
    6964:	70 0d       	add	r23, r0
    6966:	11 24       	eor	r1, r1
    6968:	20 91 14 29 	lds	r18, 0x2914	; 0x802914 <SET_VALUE+0x4>
    696c:	30 91 15 29 	lds	r19, 0x2915	; 0x802915 <SET_VALUE+0x5>
    6970:	4a e0       	ldi	r20, 0x0A	; 10
    6972:	42 9f       	mul	r20, r18
    6974:	c0 01       	movw	r24, r0
    6976:	43 9f       	mul	r20, r19
    6978:	90 0d       	add	r25, r0
    697a:	11 24       	eor	r1, r1
    697c:	68 0f       	add	r22, r24
    697e:	79 1f       	adc	r23, r25
    6980:	07 2e       	mov	r0, r23
    6982:	00 0c       	add	r0, r0
    6984:	88 0b       	sbc	r24, r24
    6986:	99 0b       	sbc	r25, r25
    6988:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Eclass::BREAK_NUMBER2(long) [clone .constprop.47]>
    698c:	8a e0       	ldi	r24, 0x0A	; 10
    698e:	90 e0       	ldi	r25, 0x00	; 0
    6990:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    6994:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
    6998:	81 e0       	ldi	r24, 0x01	; 1
    699a:	80 93 bd 28 	sts	0x28BD, r24	; 0x8028bd <DOT2_1>
    699e:	80 91 16 29 	lds	r24, 0x2916	; 0x802916 <SET_VALUE+0x6>
    69a2:	90 91 17 29 	lds	r25, 0x2917	; 0x802917 <SET_VALUE+0x7>
    69a6:	24 e6       	ldi	r18, 0x64	; 100
    69a8:	28 9f       	mul	r18, r24
    69aa:	b0 01       	movw	r22, r0
    69ac:	29 9f       	mul	r18, r25
    69ae:	70 0d       	add	r23, r0
    69b0:	11 24       	eor	r1, r1
    69b2:	80 91 18 29 	lds	r24, 0x2918	; 0x802918 <SET_VALUE+0x8>
    69b6:	90 91 19 29 	lds	r25, 0x2919	; 0x802919 <SET_VALUE+0x9>
    69ba:	68 0f       	add	r22, r24
    69bc:	79 1f       	adc	r23, r25
    69be:	07 2e       	mov	r0, r23
    69c0:	00 0c       	add	r0, r0
    69c2:	88 0b       	sbc	r24, r24
    69c4:	99 0b       	sbc	r25, r25
    69c6:	0e 94 a0 03 	call	0x740	; 0x740 <Eclass::BREAK_NUMBER1(long) [clone .constprop.46]>
    69ca:	80 91 ba 28 	lds	r24, 0x28BA	; 0x8028ba <i>
    69ce:	90 91 bb 28 	lds	r25, 0x28BB	; 0x8028bb <i+0x1>
    69d2:	49 97       	sbiw	r24, 0x19	; 25
    69d4:	74 f4       	brge	.+28     	; 0x69f2 <main+0x17e4>
    69d6:	80 91 b9 28 	lds	r24, 0x28B9	; 0x8028b9 <BLINK_STATS>
    69da:	81 11       	cpse	r24, r1
    69dc:	51 c0       	rjmp	.+162    	; 0x6a80 <main+0x1872>
    69de:	88 e1       	ldi	r24, 0x18	; 24
    69e0:	90 e0       	ldi	r25, 0x00	; 0
    69e2:	80 93 fa 28 	sts	0x28FA, r24	; 0x8028fa <digits1+0x4>
    69e6:	90 93 fb 28 	sts	0x28FB, r25	; 0x8028fb <digits1+0x5>
    69ea:	80 93 fc 28 	sts	0x28FC, r24	; 0x8028fc <digits1+0x6>
    69ee:	90 93 fd 28 	sts	0x28FD, r25	; 0x8028fd <digits1+0x7>
    69f2:	80 91 ba 28 	lds	r24, 0x28BA	; 0x8028ba <i>
    69f6:	90 91 bb 28 	lds	r25, 0x28BB	; 0x8028bb <i+0x1>
    69fa:	c3 97       	sbiw	r24, 0x33	; 51
    69fc:	24 f0       	brlt	.+8      	; 0x6a06 <main+0x17f8>
    69fe:	10 92 ba 28 	sts	0x28BA, r1	; 0x8028ba <i>
    6a02:	10 92 bb 28 	sts	0x28BB, r1	; 0x8028bb <i+0x1>
    6a06:	10 92 91 28 	sts	0x2891, r1	; 0x802891 <REP1>
    6a0a:	10 92 92 28 	sts	0x2892, r1	; 0x802892 <REP1+0x1>
    6a0e:	80 91 a6 28 	lds	r24, 0x28A6	; 0x8028a6 <STIR_VALUE_SET>
    6a12:	90 e0       	ldi	r25, 0x00	; 0
    6a14:	80 93 1a 29 	sts	0x291A, r24	; 0x80291a <SET_VALUE+0xa>
    6a18:	90 93 1b 29 	sts	0x291B, r25	; 0x80291b <SET_VALUE+0xb>
    6a1c:	81 e0       	ldi	r24, 0x01	; 1
    6a1e:	80 93 0b 29 	sts	0x290B, r24	; 0x80290b <PUMP_FLAG>
    6a22:	20 91 16 29 	lds	r18, 0x2916	; 0x802916 <SET_VALUE+0x6>
    6a26:	30 91 17 29 	lds	r19, 0x2917	; 0x802917 <SET_VALUE+0x7>
    6a2a:	4c e3       	ldi	r20, 0x3C	; 60
    6a2c:	42 9f       	mul	r20, r18
    6a2e:	c0 01       	movw	r24, r0
    6a30:	43 9f       	mul	r20, r19
    6a32:	90 0d       	add	r25, r0
    6a34:	11 24       	eor	r1, r1
    6a36:	20 91 18 29 	lds	r18, 0x2918	; 0x802918 <SET_VALUE+0x8>
    6a3a:	30 91 19 29 	lds	r19, 0x2919	; 0x802919 <SET_VALUE+0x9>
    6a3e:	82 0f       	add	r24, r18
    6a40:	93 1f       	adc	r25, r19
    6a42:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <SET_MIN>
    6a46:	90 93 a3 28 	sts	0x28A3, r25	; 0x8028a3 <SET_MIN+0x1>
    6a4a:	0c 94 a6 2c 	jmp	0x594c	; 0x594c <main+0x73e>
    6a4e:	80 91 3c 29 	lds	r24, 0x293C	; 0x80293c <SET_LONG_VALUE+0x1f>
    6a52:	90 91 3d 29 	lds	r25, 0x293D	; 0x80293d <SET_LONG_VALUE+0x20>
    6a56:	2a e0       	ldi	r18, 0x0A	; 10
    6a58:	28 9f       	mul	r18, r24
    6a5a:	b0 01       	movw	r22, r0
    6a5c:	29 9f       	mul	r18, r25
    6a5e:	70 0d       	add	r23, r0
    6a60:	11 24       	eor	r1, r1
    6a62:	07 2e       	mov	r0, r23
    6a64:	00 0c       	add	r0, r0
    6a66:	88 0b       	sbc	r24, r24
    6a68:	99 0b       	sbc	r25, r25
    6a6a:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Eclass::BREAK_NUMBER2(long) [clone .constprop.47]>
    6a6e:	85 e1       	ldi	r24, 0x15	; 21
    6a70:	90 e0       	ldi	r25, 0x00	; 0
    6a72:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    6a76:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
    6a7a:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <DOT2_1>
    6a7e:	8f cf       	rjmp	.-226    	; 0x699e <main+0x1790>
    6a80:	89 e1       	ldi	r24, 0x19	; 25
    6a82:	90 e0       	ldi	r25, 0x00	; 0
    6a84:	80 93 ba 28 	sts	0x28BA, r24	; 0x8028ba <i>
    6a88:	90 93 bb 28 	sts	0x28BB, r25	; 0x8028bb <i+0x1>
    6a8c:	b2 cf       	rjmp	.-156    	; 0x69f2 <main+0x17e4>
    6a8e:	b8 01       	movw	r22, r16
    6a90:	11 0f       	add	r17, r17
    6a92:	88 0b       	sbc	r24, r24
    6a94:	99 0b       	sbc	r25, r25
    6a96:	b8 d3       	rcall	.+1904   	; 0x7208 <__floatsisf>
    6a98:	4b 01       	movw	r8, r22
    6a9a:	5c 01       	movw	r10, r24
    6a9c:	20 e0       	ldi	r18, 0x00	; 0
    6a9e:	30 e0       	ldi	r19, 0x00	; 0
    6aa0:	40 e7       	ldi	r20, 0x70	; 112
    6aa2:	51 e4       	ldi	r21, 0x41	; 65
    6aa4:	60 91 d0 28 	lds	r22, 0x28D0	; 0x8028d0 <TEMP_FAH>
    6aa8:	70 91 d1 28 	lds	r23, 0x28D1	; 0x8028d1 <TEMP_FAH+0x1>
    6aac:	80 91 d2 28 	lds	r24, 0x28D2	; 0x8028d2 <TEMP_FAH+0x2>
    6ab0:	90 91 d3 28 	lds	r25, 0x28D3	; 0x8028d3 <TEMP_FAH+0x3>
    6ab4:	a6 d2       	rcall	.+1356   	; 0x7002 <__addsf3>
    6ab6:	9b 01       	movw	r18, r22
    6ab8:	ac 01       	movw	r20, r24
    6aba:	c5 01       	movw	r24, r10
    6abc:	b4 01       	movw	r22, r8
    6abe:	1e c9       	rjmp	.-3524   	; 0x5cfc <main+0xaee>
    6ac0:	10 92 87 28 	sts	0x2887, r1	; 0x802887 <CHECK_RATE_OF_HEATING>
digitalWrite():
    6ac4:	61 e0       	ldi	r22, 0x01	; 1
    6ac6:	88 e1       	ldi	r24, 0x18	; 24
    6ac8:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    6acc:	80 91 ee 28 	lds	r24, 0x28EE	; 0x8028ee <TEMP_DEG_RAW>
    6ad0:	90 91 ef 28 	lds	r25, 0x28EF	; 0x8028ef <TEMP_DEG_RAW+0x1>
    6ad4:	a0 91 f0 28 	lds	r26, 0x28F0	; 0x8028f0 <TEMP_DEG_RAW+0x2>
    6ad8:	b0 91 f1 28 	lds	r27, 0x28F1	; 0x8028f1 <TEMP_DEG_RAW+0x3>
    6adc:	80 93 78 28 	sts	0x2878, r24	; 0x802878 <TEMP_VALUE_INITIAL>
    6ae0:	90 93 79 28 	sts	0x2879, r25	; 0x802879 <TEMP_VALUE_INITIAL+0x1>
    6ae4:	a0 93 7a 28 	sts	0x287A, r26	; 0x80287a <TEMP_VALUE_INITIAL+0x2>
    6ae8:	b0 93 7b 28 	sts	0x287B, r27	; 0x80287b <TEMP_VALUE_INITIAL+0x3>
    6aec:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <millis>
    6af0:	60 93 74 28 	sts	0x2874, r22	; 0x802874 <START_COUNT_VALUE>
    6af4:	70 93 75 28 	sts	0x2875, r23	; 0x802875 <START_COUNT_VALUE+0x1>
    6af8:	80 93 76 28 	sts	0x2876, r24	; 0x802876 <START_COUNT_VALUE+0x2>
    6afc:	90 93 77 28 	sts	0x2877, r25	; 0x802877 <START_COUNT_VALUE+0x3>
    6b00:	16 c9       	rjmp	.-3540   	; 0x5d2e <main+0xb20>
    6b02:	60 91 7d 28 	lds	r22, 0x287D	; 0x80287d <SET_TEMP_FAH>
    6b06:	70 91 7e 28 	lds	r23, 0x287E	; 0x80287e <SET_TEMP_FAH+0x1>
    6b0a:	07 2e       	mov	r0, r23
    6b0c:	00 0c       	add	r0, r0
    6b0e:	88 0b       	sbc	r24, r24
    6b10:	99 0b       	sbc	r25, r25
    6b12:	7a d3       	rcall	.+1780   	; 0x7208 <__floatsisf>
    6b14:	60 93 70 28 	sts	0x2870, r22	; 0x802870 <PID_SETPOINT_To_Show>
    6b18:	70 93 71 28 	sts	0x2871, r23	; 0x802871 <PID_SETPOINT_To_Show+0x1>
    6b1c:	80 93 72 28 	sts	0x2872, r24	; 0x802872 <PID_SETPOINT_To_Show+0x2>
    6b20:	90 93 73 28 	sts	0x2873, r25	; 0x802873 <PID_SETPOINT_To_Show+0x3>
    6b24:	20 e0       	ldi	r18, 0x00	; 0
    6b26:	30 e0       	ldi	r19, 0x00	; 0
    6b28:	40 e0       	ldi	r20, 0x00	; 0
    6b2a:	52 e4       	ldi	r21, 0x42	; 66
    6b2c:	69 d2       	rcall	.+1234   	; 0x7000 <__subsf3>
    6b2e:	26 e6       	ldi	r18, 0x66	; 102
    6b30:	36 e6       	ldi	r19, 0x66	; 102
    6b32:	46 ee       	ldi	r20, 0xE6	; 230
    6b34:	5f e3       	ldi	r21, 0x3F	; 63
    6b36:	cd d2       	rcall	.+1434   	; 0x70d2 <__divsf3>
    6b38:	60 93 ee 29 	sts	0x29EE, r22	; 0x8029ee <PID_SETPOINT>
    6b3c:	70 93 ef 29 	sts	0x29EF, r23	; 0x8029ef <PID_SETPOINT+0x1>
    6b40:	80 93 f0 29 	sts	0x29F0, r24	; 0x8029f0 <PID_SETPOINT+0x2>
    6b44:	90 93 f1 29 	sts	0x29F1, r25	; 0x8029f1 <PID_SETPOINT+0x3>
    6b48:	0c c9       	rjmp	.-3560   	; 0x5d62 <main+0xb54>
    6b4a:	10 92 85 28 	sts	0x2885, r1	; 0x802885 <checkTempRaised>
    6b4e:	72 c9       	rjmp	.-3356   	; 0x5e34 <main+0xc26>
    6b50:	40 91 51 28 	lds	r20, 0x2851	; 0x802851 <TO_CHECK_REPETATION_WITHIN_TIME>
    6b54:	50 91 52 28 	lds	r21, 0x2852	; 0x802852 <TO_CHECK_REPETATION_WITHIN_TIME+0x1>
    6b58:	60 91 53 28 	lds	r22, 0x2853	; 0x802853 <TO_CHECK_REPETATION_WITHIN_TIME+0x2>
    6b5c:	70 91 54 28 	lds	r23, 0x2854	; 0x802854 <TO_CHECK_REPETATION_WITHIN_TIME+0x3>
    6b60:	26 01       	movw	r4, r12
    6b62:	37 01       	movw	r6, r14
    6b64:	44 1a       	sub	r4, r20
    6b66:	55 0a       	sbc	r5, r21
    6b68:	66 0a       	sbc	r6, r22
    6b6a:	77 0a       	sbc	r7, r23
    6b6c:	b3 01       	movw	r22, r6
    6b6e:	a2 01       	movw	r20, r4
    6b70:	40 39       	cpi	r20, 0x90	; 144
    6b72:	5f 45       	sbci	r21, 0x5F	; 95
    6b74:	61 40       	sbci	r22, 0x01	; 1
    6b76:	71 05       	cpc	r23, r1
    6b78:	30 f4       	brcc	.+12     	; 0x6b86 <main+0x1978>
    6b7a:	01 96       	adiw	r24, 0x01	; 1
    6b7c:	80 93 55 28 	sts	0x2855, r24	; 0x802855 <COOLING_CYCLE_COUNT>
    6b80:	90 93 56 28 	sts	0x2856, r25	; 0x802856 <COOLING_CYCLE_COUNT+0x1>
    6b84:	87 ca       	rjmp	.-2802   	; 0x6094 <main+0xe86>
    6b86:	10 92 55 28 	sts	0x2855, r1	; 0x802855 <COOLING_CYCLE_COUNT>
    6b8a:	10 92 56 28 	sts	0x2856, r1	; 0x802856 <COOLING_CYCLE_COUNT+0x1>
    6b8e:	82 ca       	rjmp	.-2812   	; 0x6094 <main+0xe86>
    6b90:	80 91 63 28 	lds	r24, 0x2863	; 0x802863 <CAL_OF_10_MIN>
    6b94:	90 91 64 28 	lds	r25, 0x2864	; 0x802864 <CAL_OF_10_MIN+0x1>
    6b98:	a0 91 65 28 	lds	r26, 0x2865	; 0x802865 <CAL_OF_10_MIN+0x2>
    6b9c:	b0 91 66 28 	lds	r27, 0x2866	; 0x802866 <CAL_OF_10_MIN+0x3>
    6ba0:	26 01       	movw	r4, r12
    6ba2:	37 01       	movw	r6, r14
    6ba4:	48 1a       	sub	r4, r24
    6ba6:	59 0a       	sbc	r5, r25
    6ba8:	6a 0a       	sbc	r6, r26
    6baa:	7b 0a       	sbc	r7, r27
    6bac:	d3 01       	movw	r26, r6
    6bae:	c2 01       	movw	r24, r4
    6bb0:	81 3a       	cpi	r24, 0xA1	; 161
    6bb2:	98 46       	sbci	r25, 0x68	; 104
    6bb4:	a6 40       	sbci	r26, 0x06	; 6
    6bb6:	b1 05       	cpc	r27, r1
    6bb8:	08 f4       	brcc	.+2      	; 0x6bbc <main+0x19ae>
    6bba:	6c ca       	rjmp	.-2856   	; 0x6094 <main+0xe86>
    6bbc:	81 e0       	ldi	r24, 0x01	; 1
    6bbe:	80 93 7c 28 	sts	0x287C, r24	; 0x80287c <FILL_BATH_ERROR_NOT_CLEAR>
digitalWrite():
    6bc2:	60 e0       	ldi	r22, 0x00	; 0
    6bc4:	85 e1       	ldi	r24, 0x15	; 21
    6bc6:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    6bca:	10 92 1c 29 	sts	0x291C, r1	; 0x80291c <ENTER_BUT>
    6bce:	10 92 a2 28 	sts	0x28A2, r1	; 0x8028a2 <SET_MIN>
    6bd2:	10 92 a3 28 	sts	0x28A3, r1	; 0x8028a3 <SET_MIN+0x1>
    6bd6:	5e ca       	rjmp	.-2884   	; 0x6094 <main+0xe86>
    6bd8:	20 e0       	ldi	r18, 0x00	; 0
    6bda:	30 e0       	ldi	r19, 0x00	; 0
    6bdc:	40 e8       	ldi	r20, 0x80	; 128
    6bde:	5f e3       	ldi	r21, 0x3F	; 63
    6be0:	c7 01       	movw	r24, r14
    6be2:	b6 01       	movw	r22, r12
    6be4:	72 d2       	rcall	.+1252   	; 0x70ca <__cmpsf2>
    6be6:	87 ff       	sbrs	r24, 7
    6be8:	73 ca       	rjmp	.-2842   	; 0x60d0 <main+0xec2>
    6bea:	80 91 87 28 	lds	r24, 0x2887	; 0x802887 <CHECK_RATE_OF_HEATING>
    6bee:	88 23       	and	r24, r24
    6bf0:	09 f4       	brne	.+2      	; 0x6bf4 <main+0x19e6>
    6bf2:	6e ca       	rjmp	.-2852   	; 0x60d0 <main+0xec2>
    6bf4:	80 91 89 28 	lds	r24, 0x2889	; 0x802889 <EXECUTE_PID_LOOP>
    6bf8:	81 11       	cpse	r24, r1
    6bfa:	07 c0       	rjmp	.+14     	; 0x6c0a <main+0x19fc>
PID_Start():
    6bfc:	88 ee       	ldi	r24, 0xE8	; 232
    6bfe:	9a e2       	ldi	r25, 0x2A	; 42
    6c00:	0e 94 0a 0b 	call	0x1614	; 0x1614 <Ticker::start()>
SET_SHORT_PRESS_FUNCTION():
    6c04:	81 e0       	ldi	r24, 0x01	; 1
    6c06:	80 93 89 28 	sts	0x2889, r24	; 0x802889 <EXECUTE_PID_LOOP>
    6c0a:	0e 94 86 09 	call	0x130c	; 0x130c <Lclass::PID_callingg() [clone .constprop.38]>
    6c0e:	60 ca       	rjmp	.-2880   	; 0x60d0 <main+0xec2>
    6c10:	80 91 4f 29 	lds	r24, 0x294F	; 0x80294f <DEGREE_VALUE_SET>
    6c14:	81 11       	cpse	r24, r1
    6c16:	1b c0       	rjmp	.+54     	; 0x6c4e <main+0x1a40>
    6c18:	a7 01       	movw	r20, r14
    6c1a:	96 01       	movw	r18, r12
    6c1c:	c5 01       	movw	r24, r10
    6c1e:	b4 01       	movw	r22, r8
    6c20:	a3 d3       	rcall	.+1862   	; 0x7368 <__gesf2>
    6c22:	87 fd       	sbrc	r24, 7
    6c24:	06 c0       	rjmp	.+12     	; 0x6c32 <main+0x1a24>
    6c26:	81 e0       	ldi	r24, 0x01	; 1
    6c28:	80 93 a1 28 	sts	0x28A1, r24	; 0x8028a1 <COUNTDOWN_START>
    6c2c:	80 93 86 28 	sts	0x2886, r24	; 0x802886 <soak_once_flag>
    6c30:	66 ca       	rjmp	.-2868   	; 0x60fe <main+0xef0>
    6c32:	a7 01       	movw	r20, r14
    6c34:	96 01       	movw	r18, r12
    6c36:	c5 01       	movw	r24, r10
    6c38:	b4 01       	movw	r22, r8
    6c3a:	47 d2       	rcall	.+1166   	; 0x70ca <__cmpsf2>
    6c3c:	87 ff       	sbrs	r24, 7
    6c3e:	d8 c1       	rjmp	.+944    	; 0x6ff0 <main+0x1de2>
    6c40:	80 91 86 28 	lds	r24, 0x2886	; 0x802886 <soak_once_flag>
    6c44:	81 11       	cpse	r24, r1
    6c46:	5b ca       	rjmp	.-2890   	; 0x60fe <main+0xef0>
    6c48:	10 92 a1 28 	sts	0x28A1, r1	; 0x8028a1 <COUNTDOWN_START>
    6c4c:	58 ca       	rjmp	.-2896   	; 0x60fe <main+0xef0>
    6c4e:	40 90 d0 28 	lds	r4, 0x28D0	; 0x8028d0 <TEMP_FAH>
    6c52:	50 90 d1 28 	lds	r5, 0x28D1	; 0x8028d1 <TEMP_FAH+0x1>
    6c56:	60 90 d2 28 	lds	r6, 0x28D2	; 0x8028d2 <TEMP_FAH+0x2>
    6c5a:	70 90 d3 28 	lds	r7, 0x28D3	; 0x8028d3 <TEMP_FAH+0x3>
    6c5e:	a3 01       	movw	r20, r6
    6c60:	92 01       	movw	r18, r4
    6c62:	c7 01       	movw	r24, r14
    6c64:	b6 01       	movw	r22, r12
    6c66:	31 d2       	rcall	.+1122   	; 0x70ca <__cmpsf2>
    6c68:	18 16       	cp	r1, r24
    6c6a:	ec f6       	brge	.-70     	; 0x6c26 <main+0x1a18>
    6c6c:	a3 01       	movw	r20, r6
    6c6e:	92 01       	movw	r18, r4
    6c70:	c7 01       	movw	r24, r14
    6c72:	b6 01       	movw	r22, r12
    6c74:	79 d3       	rcall	.+1778   	; 0x7368 <__gesf2>
    6c76:	18 16       	cp	r1, r24
    6c78:	1c f3       	brlt	.-58     	; 0x6c40 <main+0x1a32>
    6c7a:	41 ca       	rjmp	.-2942   	; 0x60fe <main+0xef0>
main():
    6c7c:	80 e8       	ldi	r24, 0x80	; 128
    6c7e:	9a e1       	ldi	r25, 0x1A	; 26
    6c80:	a6 e0       	ldi	r26, 0x06	; 6
    6c82:	b0 e0       	ldi	r27, 0x00	; 0
    6c84:	66 ca       	rjmp	.-2868   	; 0x6152 <main+0xf44>
    6c86:	80 e0       	ldi	r24, 0x00	; 0
    6c88:	95 e3       	ldi	r25, 0x35	; 53
    6c8a:	ac e0       	ldi	r26, 0x0C	; 12
    6c8c:	b0 e0       	ldi	r27, 0x00	; 0
    6c8e:	74 ca       	rjmp	.-2840   	; 0x6178 <main+0xf6a>
    6c90:	80 e4       	ldi	r24, 0x40	; 64
    6c92:	92 e4       	ldi	r25, 0x42	; 66
    6c94:	af e0       	ldi	r26, 0x0F	; 15
    6c96:	b0 e0       	ldi	r27, 0x00	; 0
    6c98:	1b cb       	rjmp	.-2506   	; 0x62d0 <main+0x10c2>
    6c9a:	80 e8       	ldi	r24, 0x80	; 128
    6c9c:	94 e8       	ldi	r25, 0x84	; 132
    6c9e:	ae e1       	ldi	r26, 0x1E	; 30
    6ca0:	b0 e0       	ldi	r27, 0x00	; 0
    6ca2:	29 cb       	rjmp	.-2478   	; 0x62f6 <main+0x10e8>
SET_SHORT_PRESS_FUNCTION():
    6ca4:	80 91 0b 29 	lds	r24, 0x290B	; 0x80290b <PUMP_FLAG>
    6ca8:	88 23       	and	r24, r24
    6caa:	09 f4       	brne	.+2      	; 0x6cae <main+0x1aa0>
    6cac:	4d c0       	rjmp	.+154    	; 0x6d48 <main+0x1b3a>
    6cae:	80 91 0a 29 	lds	r24, 0x290A	; 0x80290a <select_product_type>
    6cb2:	88 23       	and	r24, r24
    6cb4:	09 f4       	brne	.+2      	; 0x6cb8 <main+0x1aaa>
    6cb6:	48 c0       	rjmp	.+144    	; 0x6d48 <main+0x1b3a>
    6cb8:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <DOT2_1>
    6cbc:	10 92 bc 28 	sts	0x28BC, r1	; 0x8028bc <DOT1_0>
    6cc0:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
digitalWrite():
    6cc4:	60 e0       	ldi	r22, 0x00	; 0
    6cc6:	8c e0       	ldi	r24, 0x0C	; 12
    6cc8:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
DISPLAY_DIGIT2():
    6ccc:	8c e0       	ldi	r24, 0x0C	; 12
    6cce:	90 e0       	ldi	r25, 0x00	; 0
    6cd0:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <digits2>
    6cd4:	90 93 ff 28 	sts	0x28FF, r25	; 0x8028ff <digits2+0x1>
    6cd8:	80 e1       	ldi	r24, 0x10	; 16
    6cda:	90 e0       	ldi	r25, 0x00	; 0
    6cdc:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <digits2+0x2>
    6ce0:	90 93 01 29 	sts	0x2901, r25	; 0x802901 <digits2+0x3>
    6ce4:	89 e1       	ldi	r24, 0x19	; 25
    6ce6:	90 e0       	ldi	r25, 0x00	; 0
    6ce8:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <digits2+0x4>
    6cec:	90 93 03 29 	sts	0x2903, r25	; 0x802903 <digits2+0x5>
    6cf0:	81 e1       	ldi	r24, 0x11	; 17
    6cf2:	90 e0       	ldi	r25, 0x00	; 0
    6cf4:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    6cf8:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
SET_SHORT_PRESS_FUNCTION():
    6cfc:	80 91 1a 29 	lds	r24, 0x291A	; 0x80291a <SET_VALUE+0xa>
    6d00:	90 91 1b 29 	lds	r25, 0x291B	; 0x80291b <SET_VALUE+0xb>
DISPLAY_DIGIT1():
    6d04:	10 92 f6 28 	sts	0x28F6, r1	; 0x8028f6 <digits1>
    6d08:	10 92 f7 28 	sts	0x28F7, r1	; 0x8028f7 <digits1+0x1>
SET_SHORT_PRESS_FUNCTION():
    6d0c:	89 2b       	or	r24, r25
    6d0e:	79 f4       	brne	.+30     	; 0x6d2e <main+0x1b20>
DISPLAY_DIGIT1():
    6d10:	00 93 f8 28 	sts	0x28F8, r16	; 0x8028f8 <digits1+0x2>
    6d14:	10 93 f9 28 	sts	0x28F9, r17	; 0x8028f9 <digits1+0x3>
    6d18:	00 93 fa 28 	sts	0x28FA, r16	; 0x8028fa <digits1+0x4>
    6d1c:	10 93 fb 28 	sts	0x28FB, r17	; 0x8028fb <digits1+0x5>
    6d20:	88 e1       	ldi	r24, 0x18	; 24
    6d22:	90 e0       	ldi	r25, 0x00	; 0
    6d24:	80 93 fc 28 	sts	0x28FC, r24	; 0x8028fc <digits1+0x6>
    6d28:	90 93 fd 28 	sts	0x28FD, r25	; 0x8028fd <digits1+0x7>
    6d2c:	2a c8       	rjmp	.-4012   	; 0x5d82 <main+0xb74>
    6d2e:	84 e1       	ldi	r24, 0x14	; 20
    6d30:	90 e0       	ldi	r25, 0x00	; 0
    6d32:	80 93 f8 28 	sts	0x28F8, r24	; 0x8028f8 <digits1+0x2>
    6d36:	90 93 f9 28 	sts	0x28F9, r25	; 0x8028f9 <digits1+0x3>
    6d3a:	88 e1       	ldi	r24, 0x18	; 24
    6d3c:	90 e0       	ldi	r25, 0x00	; 0
    6d3e:	80 93 fa 28 	sts	0x28FA, r24	; 0x8028fa <digits1+0x4>
    6d42:	90 93 fb 28 	sts	0x28FB, r25	; 0x8028fb <digits1+0x5>
    6d46:	ee cf       	rjmp	.-36     	; 0x6d24 <main+0x1b16>
SET_SHORT_PRESS_FUNCTION():
    6d48:	80 91 49 28 	lds	r24, 0x2849	; 0x802849 <TIMER_LED_BLINK>
    6d4c:	90 91 4a 28 	lds	r25, 0x284A	; 0x80284a <TIMER_LED_BLINK+0x1>
    6d50:	9c 01       	movw	r18, r24
    6d52:	2f 5f       	subi	r18, 0xFF	; 255
    6d54:	3f 4f       	sbci	r19, 0xFF	; 255
    6d56:	20 93 49 28 	sts	0x2849, r18	; 0x802849 <TIMER_LED_BLINK>
    6d5a:	30 93 4a 28 	sts	0x284A, r19	; 0x80284a <TIMER_LED_BLINK+0x1>
digitalWrite():
    6d5e:	61 e0       	ldi	r22, 0x01	; 1
SET_SHORT_PRESS_FUNCTION():
    6d60:	28 39       	cpi	r18, 0x98	; 152
    6d62:	38 40       	sbci	r19, 0x08	; 8
    6d64:	38 f0       	brcs	.+14     	; 0x6d74 <main+0x1b66>
    6d66:	87 59       	subi	r24, 0x97	; 151
    6d68:	98 40       	sbci	r25, 0x08	; 8
    6d6a:	88 39       	cpi	r24, 0x98	; 152
    6d6c:	98 40       	sbci	r25, 0x08	; 8
    6d6e:	08 f0       	brcs	.+2      	; 0x6d72 <main+0x1b64>
    6d70:	53 c0       	rjmp	.+166    	; 0x6e18 <main+0x1c0a>
digitalWrite():
    6d72:	60 e0       	ldi	r22, 0x00	; 0
    6d74:	8c e0       	ldi	r24, 0x0C	; 12
    6d76:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    6d7a:	80 91 93 28 	lds	r24, 0x2893	; 0x802893 <IN_ERROR>
    6d7e:	88 23       	and	r24, r24
    6d80:	71 f0       	breq	.+28     	; 0x6d9e <main+0x1b90>
stop():
    6d82:	10 92 a5 2b 	sts	0x2BA5, r1	; 0x802ba5 <BUZZ_TICK1>
    6d86:	10 92 b0 2b 	sts	0x2BB0, r1	; 0x802bb0 <BUZZ_TICK1+0xb>
    6d8a:	10 92 b1 2b 	sts	0x2BB1, r1	; 0x802bb1 <BUZZ_TICK1+0xc>
    6d8e:	10 92 b2 2b 	sts	0x2BB2, r1	; 0x802bb2 <BUZZ_TICK1+0xd>
    6d92:	10 92 b3 2b 	sts	0x2BB3, r1	; 0x802bb3 <BUZZ_TICK1+0xe>
    6d96:	10 92 b4 2b 	sts	0x2BB4, r1	; 0x802bb4 <BUZZ_TICK1+0xf>
    6d9a:	10 92 b5 2b 	sts	0x2BB5, r1	; 0x802bb5 <BUZZ_TICK1+0x10>
SET_SHORT_PRESS_FUNCTION():
    6d9e:	84 e6       	ldi	r24, 0x64	; 100
    6da0:	8c 9d       	mul	r24, r12
    6da2:	b0 01       	movw	r22, r0
    6da4:	8d 9d       	mul	r24, r13
    6da6:	70 0d       	add	r23, r0
    6da8:	11 24       	eor	r1, r1
    6daa:	6e 0d       	add	r22, r14
    6dac:	7f 1d       	adc	r23, r15
    6dae:	07 2e       	mov	r0, r23
    6db0:	00 0c       	add	r0, r0
    6db2:	88 0b       	sbc	r24, r24
    6db4:	99 0b       	sbc	r25, r25
    6db6:	0e 94 a0 03 	call	0x740	; 0x740 <Eclass::BREAK_NUMBER1(long) [clone .constprop.46]>
    6dba:	83 e0       	ldi	r24, 0x03	; 3
    6dbc:	9b e2       	ldi	r25, 0x2B	; 43
    6dbe:	0e 94 ac 0a 	call	0x1558	; 0x1558 <Ticker::update()>
    6dc2:	80 91 6f 28 	lds	r24, 0x286F	; 0x80286f <Alternate_Display_Flag>
    6dc6:	88 23       	and	r24, r24
    6dc8:	d1 f1       	breq	.+116    	; 0x6e3e <main+0x1c30>
digitalWrite():
    6dca:	61 e0       	ldi	r22, 0x01	; 1
    6dcc:	8c e1       	ldi	r24, 0x1C	; 28
    6dce:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
    6dd2:	60 e0       	ldi	r22, 0x00	; 0
    6dd4:	8d e1       	ldi	r24, 0x1D	; 29
    6dd6:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
    6dda:	60 91 70 28 	lds	r22, 0x2870	; 0x802870 <PID_SETPOINT_To_Show>
    6dde:	70 91 71 28 	lds	r23, 0x2871	; 0x802871 <PID_SETPOINT_To_Show+0x1>
    6de2:	80 91 72 28 	lds	r24, 0x2872	; 0x802872 <PID_SETPOINT_To_Show+0x2>
    6de6:	90 91 73 28 	lds	r25, 0x2873	; 0x802873 <PID_SETPOINT_To_Show+0x3>
SET_SHORT_PRESS_FUNCTION():
    6dea:	20 91 4f 29 	lds	r18, 0x294F	; 0x80294f <DEGREE_VALUE_SET>
    6dee:	21 11       	cpse	r18, r1
    6df0:	18 c0       	rjmp	.+48     	; 0x6e22 <main+0x1c14>
    6df2:	20 e0       	ldi	r18, 0x00	; 0
    6df4:	30 e0       	ldi	r19, 0x00	; 0
    6df6:	48 ec       	ldi	r20, 0xC8	; 200
    6df8:	52 e4       	ldi	r21, 0x42	; 66
    6dfa:	ba d2       	rcall	.+1396   	; 0x7370 <__mulsf3>
    6dfc:	d2 d1       	rcall	.+932    	; 0x71a2 <__fixsfsi>
    6dfe:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Eclass::BREAK_NUMBER2(long) [clone .constprop.47]>
    6e02:	8a e0       	ldi	r24, 0x0A	; 10
    6e04:	90 e0       	ldi	r25, 0x00	; 0
    6e06:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    6e0a:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
    6e0e:	81 e0       	ldi	r24, 0x01	; 1
    6e10:	80 93 bd 28 	sts	0x28BD, r24	; 0x8028bd <DOT2_1>
    6e14:	0c 94 c1 2e 	jmp	0x5d82	; 0x5d82 <main+0xb74>
    6e18:	10 92 49 28 	sts	0x2849, r1	; 0x802849 <TIMER_LED_BLINK>
    6e1c:	10 92 4a 28 	sts	0x284A, r1	; 0x80284a <TIMER_LED_BLINK+0x1>
    6e20:	ac cf       	rjmp	.-168    	; 0x6d7a <main+0x1b6c>
    6e22:	20 e0       	ldi	r18, 0x00	; 0
    6e24:	30 e0       	ldi	r19, 0x00	; 0
    6e26:	40 e2       	ldi	r20, 0x20	; 32
    6e28:	51 e4       	ldi	r21, 0x41	; 65
    6e2a:	a2 d2       	rcall	.+1348   	; 0x7370 <__mulsf3>
    6e2c:	ba d1       	rcall	.+884    	; 0x71a2 <__fixsfsi>
    6e2e:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Eclass::BREAK_NUMBER2(long) [clone .constprop.47]>
    6e32:	00 93 04 29 	sts	0x2904, r16	; 0x802904 <digits2+0x6>
    6e36:	10 93 05 29 	sts	0x2905, r17	; 0x802905 <digits2+0x7>
    6e3a:	0c 94 c1 2e 	jmp	0x5d82	; 0x5d82 <main+0xb74>
digitalWrite():
    6e3e:	60 e0       	ldi	r22, 0x00	; 0
    6e40:	8c e1       	ldi	r24, 0x1C	; 28
    6e42:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
    6e46:	61 e0       	ldi	r22, 0x01	; 1
    6e48:	8d e1       	ldi	r24, 0x1D	; 29
    6e4a:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    6e4e:	80 91 4f 29 	lds	r24, 0x294F	; 0x80294f <DEGREE_VALUE_SET>
    6e52:	81 11       	cpse	r24, r1
    6e54:	33 c0       	rjmp	.+102    	; 0x6ebc <main+0x1cae>
    6e56:	c0 90 f2 28 	lds	r12, 0x28F2	; 0x8028f2 <TEMP_DEG>
    6e5a:	d0 90 f3 28 	lds	r13, 0x28F3	; 0x8028f3 <TEMP_DEG+0x1>
    6e5e:	e0 90 f4 28 	lds	r14, 0x28F4	; 0x8028f4 <TEMP_DEG+0x2>
    6e62:	f0 90 f5 28 	lds	r15, 0x28F5	; 0x8028f5 <TEMP_DEG+0x3>
    6e66:	2d ec       	ldi	r18, 0xCD	; 205
    6e68:	3c ec       	ldi	r19, 0xCC	; 204
    6e6a:	47 ec       	ldi	r20, 0xC7	; 199
    6e6c:	52 e4       	ldi	r21, 0x42	; 66
    6e6e:	c7 01       	movw	r24, r14
    6e70:	b6 01       	movw	r22, r12
    6e72:	7a d2       	rcall	.+1268   	; 0x7368 <__gesf2>
    6e74:	18 16       	cp	r1, r24
    6e76:	a4 f4       	brge	.+40     	; 0x6ea0 <main+0x1c92>
    6e78:	20 e0       	ldi	r18, 0x00	; 0
    6e7a:	30 e0       	ldi	r19, 0x00	; 0
    6e7c:	40 e2       	ldi	r20, 0x20	; 32
    6e7e:	51 e4       	ldi	r21, 0x41	; 65
    6e80:	c7 01       	movw	r24, r14
    6e82:	b6 01       	movw	r22, r12
    6e84:	75 d2       	rcall	.+1258   	; 0x7370 <__mulsf3>
    6e86:	8d d1       	rcall	.+794    	; 0x71a2 <__fixsfsi>
    6e88:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Eclass::BREAK_NUMBER2(long) [clone .constprop.47]>
    6e8c:	10 92 bd 28 	sts	0x28BD, r1	; 0x8028bd <DOT2_1>
    6e90:	8a e0       	ldi	r24, 0x0A	; 10
    6e92:	90 e0       	ldi	r25, 0x00	; 0
    6e94:	80 93 04 29 	sts	0x2904, r24	; 0x802904 <digits2+0x6>
    6e98:	90 93 05 29 	sts	0x2905, r25	; 0x802905 <digits2+0x7>
    6e9c:	0c 94 c1 2e 	jmp	0x5d82	; 0x5d82 <main+0xb74>
    6ea0:	20 e0       	ldi	r18, 0x00	; 0
    6ea2:	30 e0       	ldi	r19, 0x00	; 0
    6ea4:	48 ec       	ldi	r20, 0xC8	; 200
    6ea6:	52 e4       	ldi	r21, 0x42	; 66
    6ea8:	c7 01       	movw	r24, r14
    6eaa:	b6 01       	movw	r22, r12
    6eac:	61 d2       	rcall	.+1218   	; 0x7370 <__mulsf3>
    6eae:	79 d1       	rcall	.+754    	; 0x71a2 <__fixsfsi>
    6eb0:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Eclass::BREAK_NUMBER2(long) [clone .constprop.47]>
    6eb4:	81 e0       	ldi	r24, 0x01	; 1
    6eb6:	80 93 bd 28 	sts	0x28BD, r24	; 0x8028bd <DOT2_1>
    6eba:	ea cf       	rjmp	.-44     	; 0x6e90 <main+0x1c82>
    6ebc:	20 e0       	ldi	r18, 0x00	; 0
    6ebe:	30 e0       	ldi	r19, 0x00	; 0
    6ec0:	40 e2       	ldi	r20, 0x20	; 32
    6ec2:	51 e4       	ldi	r21, 0x41	; 65
    6ec4:	60 91 d0 28 	lds	r22, 0x28D0	; 0x8028d0 <TEMP_FAH>
    6ec8:	70 91 d1 28 	lds	r23, 0x28D1	; 0x8028d1 <TEMP_FAH+0x1>
    6ecc:	80 91 d2 28 	lds	r24, 0x28D2	; 0x8028d2 <TEMP_FAH+0x2>
    6ed0:	90 91 d3 28 	lds	r25, 0x28D3	; 0x8028d3 <TEMP_FAH+0x3>
    6ed4:	aa cf       	rjmp	.-172    	; 0x6e2a <main+0x1c1c>
digitalWrite():
    6ed6:	60 e0       	ldi	r22, 0x00	; 0
    6ed8:	81 e2       	ldi	r24, 0x21	; 33
    6eda:	0e 94 16 08 	call	0x102c	; 0x102c <digitalWrite.part.2>
SET_SHORT_PRESS_FUNCTION():
    6ede:	60 e0       	ldi	r22, 0x00	; 0
    6ee0:	80 ea       	ldi	r24, 0xA0	; 160
    6ee2:	90 e0       	ldi	r25, 0x00	; 0
    6ee4:	0e 94 03 11 	call	0x2206	; 0x2206 <EEPROMClass::write(int, unsigned char) [clone .isra.0]>
    6ee8:	0e 94 25 09 	call	0x124a	; 0x124a <Pclass::ALL_LED_OFF() [clone .constprop.48]>
LED_On_Call():
    6eec:	84 e5       	ldi	r24, 0x54	; 84
    6eee:	9b e2       	ldi	r25, 0x2B	; 43
    6ef0:	0e 94 0a 0b 	call	0x1614	; 0x1614 <Ticker::start()>
SET_SHORT_PRESS_FUNCTION():
    6ef4:	10 92 9b 28 	sts	0x289B, r1	; 0x80289b <Process_Interrupt_flag>
Process_Time_Set_On_Eeprom():
    6ef8:	60 e0       	ldi	r22, 0x00	; 0
    6efa:	87 e8       	ldi	r24, 0x87	; 135
    6efc:	90 e0       	ldi	r25, 0x00	; 0
    6efe:	0e 94 03 11 	call	0x2206	; 0x2206 <EEPROMClass::write(int, unsigned char) [clone .isra.0]>
SET_SHORT_PRESS_FUNCTION():
    6f02:	60 91 45 28 	lds	r22, 0x2845	; 0x802845 <actualRunMin>
    6f06:	70 91 46 28 	lds	r23, 0x2846	; 0x802846 <actualRunMin+0x1>
    6f0a:	80 91 47 28 	lds	r24, 0x2847	; 0x802847 <actualRunMin+0x2>
    6f0e:	90 91 48 28 	lds	r25, 0x2848	; 0x802848 <actualRunMin+0x3>
    6f12:	2c e3       	ldi	r18, 0x3C	; 60
    6f14:	30 e0       	ldi	r19, 0x00	; 0
    6f16:	40 e0       	ldi	r20, 0x00	; 0
    6f18:	50 e0       	ldi	r21, 0x00	; 0
    6f1a:	a0 d2       	rcall	.+1344   	; 0x745c <__udivmodsi4>
    6f1c:	69 01       	movw	r12, r18
    6f1e:	20 93 43 28 	sts	0x2843, r18	; 0x802843 <actualRunHours>
    6f22:	30 93 44 28 	sts	0x2844, r19	; 0x802844 <actualRunHours+0x1>
    6f26:	6b ea       	ldi	r22, 0xAB	; 171
    6f28:	78 e2       	ldi	r23, 0x28	; 40
    6f2a:	88 e9       	ldi	r24, 0x98	; 152
    6f2c:	90 e0       	ldi	r25, 0x00	; 0
    6f2e:	0e 94 84 10 	call	0x2108	; 0x2108 <int& EEPROMClass::get<int>(int, int&) [clone .isra.4]>
    6f32:	20 91 ab 28 	lds	r18, 0x28AB	; 0x8028ab <processLog>
    6f36:	30 91 ac 28 	lds	r19, 0x28AC	; 0x8028ac <processLog+0x1>
    6f3a:	2c 0d       	add	r18, r12
    6f3c:	3d 1d       	adc	r19, r13
    6f3e:	20 93 ab 28 	sts	0x28AB, r18	; 0x8028ab <processLog>
    6f42:	30 93 ac 28 	sts	0x28AC, r19	; 0x8028ac <processLog+0x1>
    6f46:	2f 30       	cpi	r18, 0x0F	; 15
    6f48:	37 42       	sbci	r19, 0x27	; 39
    6f4a:	68 f0       	brcs	.+26     	; 0x6f66 <main+0x1d58>
    6f4c:	80 91 a9 28 	lds	r24, 0x28A9	; 0x8028a9 <processLogNumberOfTimes>
    6f50:	90 91 aa 28 	lds	r25, 0x28AA	; 0x8028aa <processLogNumberOfTimes+0x1>
    6f54:	01 96       	adiw	r24, 0x01	; 1
    6f56:	80 93 a9 28 	sts	0x28A9, r24	; 0x8028a9 <processLogNumberOfTimes>
    6f5a:	90 93 aa 28 	sts	0x28AA, r25	; 0x8028aa <processLogNumberOfTimes+0x1>
    6f5e:	10 92 ab 28 	sts	0x28AB, r1	; 0x8028ab <processLog>
    6f62:	10 92 ac 28 	sts	0x28AC, r1	; 0x8028ac <processLog+0x1>
    6f66:	6b ea       	ldi	r22, 0xAB	; 171
    6f68:	78 e2       	ldi	r23, 0x28	; 40
    6f6a:	88 e9       	ldi	r24, 0x98	; 152
    6f6c:	90 e0       	ldi	r25, 0x00	; 0
    6f6e:	0e 94 3c 11 	call	0x2278	; 0x2278 <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.9] [clone .lto_priv.88]>
    6f72:	69 ea       	ldi	r22, 0xA9	; 169
    6f74:	78 e2       	ldi	r23, 0x28	; 40
    6f76:	8a e9       	ldi	r24, 0x9A	; 154
    6f78:	90 e0       	ldi	r25, 0x00	; 0
    6f7a:	0e 94 3c 11 	call	0x2278	; 0x2278 <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.9] [clone .lto_priv.88]>
    6f7e:	10 92 43 28 	sts	0x2843, r1	; 0x802843 <actualRunHours>
    6f82:	10 92 44 28 	sts	0x2844, r1	; 0x802844 <actualRunHours+0x1>
    6f86:	10 92 45 28 	sts	0x2845, r1	; 0x802845 <actualRunMin>
    6f8a:	10 92 46 28 	sts	0x2846, r1	; 0x802846 <actualRunMin+0x1>
    6f8e:	10 92 47 28 	sts	0x2847, r1	; 0x802847 <actualRunMin+0x2>
    6f92:	10 92 48 28 	sts	0x2848, r1	; 0x802848 <actualRunMin+0x3>
stop():
    6f96:	10 92 03 2b 	sts	0x2B03, r1	; 0x802b03 <Alter_Disp>
    6f9a:	10 92 0e 2b 	sts	0x2B0E, r1	; 0x802b0e <Alter_Disp+0xb>
    6f9e:	10 92 0f 2b 	sts	0x2B0F, r1	; 0x802b0f <Alter_Disp+0xc>
    6fa2:	10 92 10 2b 	sts	0x2B10, r1	; 0x802b10 <Alter_Disp+0xd>
    6fa6:	10 92 11 2b 	sts	0x2B11, r1	; 0x802b11 <Alter_Disp+0xe>
    6faa:	10 92 12 2b 	sts	0x2B12, r1	; 0x802b12 <Alter_Disp+0xf>
    6fae:	10 92 13 2b 	sts	0x2B13, r1	; 0x802b13 <Alter_Disp+0x10>
SET_SHORT_PRESS_FUNCTION():
    6fb2:	80 91 8e 28 	lds	r24, 0x288E	; 0x80288e <Blinking_Freq>
    6fb6:	83 30       	cpi	r24, 0x03	; 3
    6fb8:	b8 f4       	brcc	.+46     	; 0x6fe8 <main+0x1dda>
    6fba:	84 ef       	ldi	r24, 0xF4	; 244
    6fbc:	91 e0       	ldi	r25, 0x01	; 1
    6fbe:	0e 94 2a 0b 	call	0x1654	; 0x1654 <Tclass::BUZZ_INTERVAL(int) [clone .constprop.56]>
stop():
    6fc2:	10 92 e8 2a 	sts	0x2AE8, r1	; 0x802ae8 <PID_EXE>
    6fc6:	10 92 f3 2a 	sts	0x2AF3, r1	; 0x802af3 <PID_EXE+0xb>
    6fca:	10 92 f4 2a 	sts	0x2AF4, r1	; 0x802af4 <PID_EXE+0xc>
    6fce:	10 92 f5 2a 	sts	0x2AF5, r1	; 0x802af5 <PID_EXE+0xd>
    6fd2:	10 92 f6 2a 	sts	0x2AF6, r1	; 0x802af6 <PID_EXE+0xe>
    6fd6:	10 92 f7 2a 	sts	0x2AF7, r1	; 0x802af7 <PID_EXE+0xf>
    6fda:	10 92 f8 2a 	sts	0x2AF8, r1	; 0x802af8 <PID_EXE+0x10>
DISP_UPDATE():
    6fde:	8b ed       	ldi	r24, 0xDB	; 219
    6fe0:	9b e2       	ldi	r25, 0x2B	; 43
    6fe2:	0e 94 ac 0a 	call	0x1558	; 0x1558 <Ticker::update()>
    6fe6:	e5 cf       	rjmp	.-54     	; 0x6fb2 <main+0x1da4>
SET_SHORT_PRESS_FUNCTION():
    6fe8:	10 92 1c 29 	sts	0x291C, r1	; 0x80291c <ENTER_BUT>
    6fec:	0c 94 a6 2c 	jmp	0x594c	; 0x594c <main+0x73e>
    6ff0:	a7 01       	movw	r20, r14
    6ff2:	96 01       	movw	r18, r12
    6ff4:	c5 01       	movw	r24, r10
    6ff6:	b4 01       	movw	r22, r8
    6ff8:	b7 d1       	rcall	.+878    	; 0x7368 <__gesf2>
    6ffa:	87 ff       	sbrs	r24, 7
    6ffc:	9f c8       	rjmp	.-3778   	; 0x613c <main+0xf2e>
    6ffe:	8b c8       	rjmp	.-3818   	; 0x6116 <main+0xf08>

00007000 <__subsf3>:
__subsf3():
    7000:	50 58       	subi	r21, 0x80	; 128

00007002 <__addsf3>:
    7002:	bb 27       	eor	r27, r27
    7004:	aa 27       	eor	r26, r26
    7006:	0e d0       	rcall	.+28     	; 0x7024 <__addsf3x>
    7008:	75 c1       	rjmp	.+746    	; 0x72f4 <__fp_round>
__addsf3():
    700a:	66 d1       	rcall	.+716    	; 0x72d8 <__fp_pscA>
    700c:	30 f0       	brcs	.+12     	; 0x701a <__addsf3+0x18>
    700e:	6b d1       	rcall	.+726    	; 0x72e6 <__fp_pscB>
    7010:	20 f0       	brcs	.+8      	; 0x701a <__addsf3+0x18>
    7012:	31 f4       	brne	.+12     	; 0x7020 <__addsf3+0x1e>
    7014:	9f 3f       	cpi	r25, 0xFF	; 255
    7016:	11 f4       	brne	.+4      	; 0x701c <__addsf3+0x1a>
    7018:	1e f4       	brtc	.+6      	; 0x7020 <__addsf3+0x1e>
    701a:	5b c1       	rjmp	.+694    	; 0x72d2 <__fp_nan>
    701c:	0e f4       	brtc	.+2      	; 0x7020 <__addsf3+0x1e>
    701e:	e0 95       	com	r30
    7020:	e7 fb       	bst	r30, 7
    7022:	51 c1       	rjmp	.+674    	; 0x72c6 <__fp_inf>

00007024 <__addsf3x>:
__addsf3x():
    7024:	e9 2f       	mov	r30, r25
    7026:	77 d1       	rcall	.+750    	; 0x7316 <__fp_split3>
    7028:	80 f3       	brcs	.-32     	; 0x700a <__addsf3+0x8>
    702a:	ba 17       	cp	r27, r26
    702c:	62 07       	cpc	r22, r18
    702e:	73 07       	cpc	r23, r19
    7030:	84 07       	cpc	r24, r20
    7032:	95 07       	cpc	r25, r21
    7034:	18 f0       	brcs	.+6      	; 0x703c <__addsf3x+0x18>
    7036:	71 f4       	brne	.+28     	; 0x7054 <__addsf3x+0x30>
    7038:	9e f5       	brtc	.+102    	; 0x70a0 <__addsf3x+0x7c>
    703a:	8f c1       	rjmp	.+798    	; 0x735a <__fp_zero>
    703c:	0e f4       	brtc	.+2      	; 0x7040 <__addsf3x+0x1c>
    703e:	e0 95       	com	r30
    7040:	0b 2e       	mov	r0, r27
    7042:	ba 2f       	mov	r27, r26
    7044:	a0 2d       	mov	r26, r0
    7046:	0b 01       	movw	r0, r22
    7048:	b9 01       	movw	r22, r18
    704a:	90 01       	movw	r18, r0
    704c:	0c 01       	movw	r0, r24
    704e:	ca 01       	movw	r24, r20
    7050:	a0 01       	movw	r20, r0
    7052:	11 24       	eor	r1, r1
    7054:	ff 27       	eor	r31, r31
    7056:	59 1b       	sub	r21, r25
    7058:	99 f0       	breq	.+38     	; 0x7080 <__addsf3x+0x5c>
    705a:	59 3f       	cpi	r21, 0xF9	; 249
    705c:	50 f4       	brcc	.+20     	; 0x7072 <__addsf3x+0x4e>
    705e:	50 3e       	cpi	r21, 0xE0	; 224
    7060:	68 f1       	brcs	.+90     	; 0x70bc <__addsf3x+0x98>
    7062:	1a 16       	cp	r1, r26
    7064:	f0 40       	sbci	r31, 0x00	; 0
    7066:	a2 2f       	mov	r26, r18
    7068:	23 2f       	mov	r18, r19
    706a:	34 2f       	mov	r19, r20
    706c:	44 27       	eor	r20, r20
    706e:	58 5f       	subi	r21, 0xF8	; 248
    7070:	f3 cf       	rjmp	.-26     	; 0x7058 <__addsf3x+0x34>
    7072:	46 95       	lsr	r20
    7074:	37 95       	ror	r19
    7076:	27 95       	ror	r18
    7078:	a7 95       	ror	r26
    707a:	f0 40       	sbci	r31, 0x00	; 0
    707c:	53 95       	inc	r21
    707e:	c9 f7       	brne	.-14     	; 0x7072 <__addsf3x+0x4e>
    7080:	7e f4       	brtc	.+30     	; 0x70a0 <__addsf3x+0x7c>
    7082:	1f 16       	cp	r1, r31
    7084:	ba 0b       	sbc	r27, r26
    7086:	62 0b       	sbc	r22, r18
    7088:	73 0b       	sbc	r23, r19
    708a:	84 0b       	sbc	r24, r20
    708c:	ba f0       	brmi	.+46     	; 0x70bc <__addsf3x+0x98>
    708e:	91 50       	subi	r25, 0x01	; 1
    7090:	a1 f0       	breq	.+40     	; 0x70ba <__addsf3x+0x96>
    7092:	ff 0f       	add	r31, r31
    7094:	bb 1f       	adc	r27, r27
    7096:	66 1f       	adc	r22, r22
    7098:	77 1f       	adc	r23, r23
    709a:	88 1f       	adc	r24, r24
    709c:	c2 f7       	brpl	.-16     	; 0x708e <__addsf3x+0x6a>
    709e:	0e c0       	rjmp	.+28     	; 0x70bc <__addsf3x+0x98>
    70a0:	ba 0f       	add	r27, r26
    70a2:	62 1f       	adc	r22, r18
    70a4:	73 1f       	adc	r23, r19
    70a6:	84 1f       	adc	r24, r20
    70a8:	48 f4       	brcc	.+18     	; 0x70bc <__addsf3x+0x98>
    70aa:	87 95       	ror	r24
    70ac:	77 95       	ror	r23
    70ae:	67 95       	ror	r22
    70b0:	b7 95       	ror	r27
    70b2:	f7 95       	ror	r31
    70b4:	9e 3f       	cpi	r25, 0xFE	; 254
    70b6:	08 f0       	brcs	.+2      	; 0x70ba <__addsf3x+0x96>
    70b8:	b3 cf       	rjmp	.-154    	; 0x7020 <__addsf3+0x1e>
    70ba:	93 95       	inc	r25
    70bc:	88 0f       	add	r24, r24
    70be:	08 f0       	brcs	.+2      	; 0x70c2 <__addsf3x+0x9e>
    70c0:	99 27       	eor	r25, r25
    70c2:	ee 0f       	add	r30, r30
    70c4:	97 95       	ror	r25
    70c6:	87 95       	ror	r24
    70c8:	08 95       	ret

000070ca <__cmpsf2>:
    70ca:	d9 d0       	rcall	.+434    	; 0x727e <__fp_cmp>
    70cc:	08 f4       	brcc	.+2      	; 0x70d0 <__cmpsf2+0x6>
    70ce:	81 e0       	ldi	r24, 0x01	; 1
    70d0:	08 95       	ret

000070d2 <__divsf3>:
    70d2:	0c d0       	rcall	.+24     	; 0x70ec <__divsf3x>
    70d4:	0f c1       	rjmp	.+542    	; 0x72f4 <__fp_round>
    70d6:	07 d1       	rcall	.+526    	; 0x72e6 <__fp_pscB>
    70d8:	40 f0       	brcs	.+16     	; 0x70ea <__divsf3+0x18>
    70da:	fe d0       	rcall	.+508    	; 0x72d8 <__fp_pscA>
    70dc:	30 f0       	brcs	.+12     	; 0x70ea <__divsf3+0x18>
    70de:	21 f4       	brne	.+8      	; 0x70e8 <__divsf3+0x16>
    70e0:	5f 3f       	cpi	r21, 0xFF	; 255
    70e2:	19 f0       	breq	.+6      	; 0x70ea <__divsf3+0x18>
    70e4:	f0 c0       	rjmp	.+480    	; 0x72c6 <__fp_inf>
    70e6:	51 11       	cpse	r21, r1
    70e8:	39 c1       	rjmp	.+626    	; 0x735c <__fp_szero>
    70ea:	f3 c0       	rjmp	.+486    	; 0x72d2 <__fp_nan>

000070ec <__divsf3x>:
    70ec:	14 d1       	rcall	.+552    	; 0x7316 <__fp_split3>
    70ee:	98 f3       	brcs	.-26     	; 0x70d6 <__divsf3+0x4>

000070f0 <__divsf3_pse>:
__divsf3_pse():
    70f0:	99 23       	and	r25, r25
    70f2:	c9 f3       	breq	.-14     	; 0x70e6 <__divsf3+0x14>
    70f4:	55 23       	and	r21, r21
    70f6:	b1 f3       	breq	.-20     	; 0x70e4 <__divsf3+0x12>
    70f8:	95 1b       	sub	r25, r21
    70fa:	55 0b       	sbc	r21, r21
    70fc:	bb 27       	eor	r27, r27
    70fe:	aa 27       	eor	r26, r26
    7100:	62 17       	cp	r22, r18
    7102:	73 07       	cpc	r23, r19
    7104:	84 07       	cpc	r24, r20
    7106:	38 f0       	brcs	.+14     	; 0x7116 <__divsf3_pse+0x26>
    7108:	9f 5f       	subi	r25, 0xFF	; 255
    710a:	5f 4f       	sbci	r21, 0xFF	; 255
    710c:	22 0f       	add	r18, r18
    710e:	33 1f       	adc	r19, r19
    7110:	44 1f       	adc	r20, r20
    7112:	aa 1f       	adc	r26, r26
    7114:	a9 f3       	breq	.-22     	; 0x7100 <__divsf3_pse+0x10>
    7116:	33 d0       	rcall	.+102    	; 0x717e <__divsf3_pse+0x8e>
    7118:	0e 2e       	mov	r0, r30
    711a:	3a f0       	brmi	.+14     	; 0x712a <__divsf3_pse+0x3a>
    711c:	e0 e8       	ldi	r30, 0x80	; 128
    711e:	30 d0       	rcall	.+96     	; 0x7180 <__divsf3_pse+0x90>
    7120:	91 50       	subi	r25, 0x01	; 1
    7122:	50 40       	sbci	r21, 0x00	; 0
    7124:	e6 95       	lsr	r30
    7126:	00 1c       	adc	r0, r0
    7128:	ca f7       	brpl	.-14     	; 0x711c <__divsf3_pse+0x2c>
    712a:	29 d0       	rcall	.+82     	; 0x717e <__divsf3_pse+0x8e>
    712c:	fe 2f       	mov	r31, r30
    712e:	27 d0       	rcall	.+78     	; 0x717e <__divsf3_pse+0x8e>
    7130:	66 0f       	add	r22, r22
    7132:	77 1f       	adc	r23, r23
    7134:	88 1f       	adc	r24, r24
    7136:	bb 1f       	adc	r27, r27
    7138:	26 17       	cp	r18, r22
    713a:	37 07       	cpc	r19, r23
    713c:	48 07       	cpc	r20, r24
    713e:	ab 07       	cpc	r26, r27
    7140:	b0 e8       	ldi	r27, 0x80	; 128
    7142:	09 f0       	breq	.+2      	; 0x7146 <__divsf3_pse+0x56>
    7144:	bb 0b       	sbc	r27, r27
    7146:	80 2d       	mov	r24, r0
    7148:	bf 01       	movw	r22, r30
    714a:	ff 27       	eor	r31, r31
    714c:	93 58       	subi	r25, 0x83	; 131
    714e:	5f 4f       	sbci	r21, 0xFF	; 255
    7150:	2a f0       	brmi	.+10     	; 0x715c <__divsf3_pse+0x6c>
    7152:	9e 3f       	cpi	r25, 0xFE	; 254
    7154:	51 05       	cpc	r21, r1
    7156:	68 f0       	brcs	.+26     	; 0x7172 <__divsf3_pse+0x82>
    7158:	b6 c0       	rjmp	.+364    	; 0x72c6 <__fp_inf>
    715a:	00 c1       	rjmp	.+512    	; 0x735c <__fp_szero>
    715c:	5f 3f       	cpi	r21, 0xFF	; 255
    715e:	ec f3       	brlt	.-6      	; 0x715a <__divsf3_pse+0x6a>
    7160:	98 3e       	cpi	r25, 0xE8	; 232
    7162:	dc f3       	brlt	.-10     	; 0x715a <__divsf3_pse+0x6a>
    7164:	86 95       	lsr	r24
    7166:	77 95       	ror	r23
    7168:	67 95       	ror	r22
    716a:	b7 95       	ror	r27
    716c:	f7 95       	ror	r31
    716e:	9f 5f       	subi	r25, 0xFF	; 255
    7170:	c9 f7       	brne	.-14     	; 0x7164 <__divsf3_pse+0x74>
    7172:	88 0f       	add	r24, r24
    7174:	91 1d       	adc	r25, r1
    7176:	96 95       	lsr	r25
    7178:	87 95       	ror	r24
    717a:	97 f9       	bld	r25, 7
    717c:	08 95       	ret
    717e:	e1 e0       	ldi	r30, 0x01	; 1
    7180:	66 0f       	add	r22, r22
    7182:	77 1f       	adc	r23, r23
    7184:	88 1f       	adc	r24, r24
    7186:	bb 1f       	adc	r27, r27
    7188:	62 17       	cp	r22, r18
    718a:	73 07       	cpc	r23, r19
    718c:	84 07       	cpc	r24, r20
    718e:	ba 07       	cpc	r27, r26
    7190:	20 f0       	brcs	.+8      	; 0x719a <__divsf3_pse+0xaa>
    7192:	62 1b       	sub	r22, r18
    7194:	73 0b       	sbc	r23, r19
    7196:	84 0b       	sbc	r24, r20
    7198:	ba 0b       	sbc	r27, r26
    719a:	ee 1f       	adc	r30, r30
    719c:	88 f7       	brcc	.-30     	; 0x7180 <__divsf3_pse+0x90>
    719e:	e0 95       	com	r30
    71a0:	08 95       	ret

000071a2 <__fixsfsi>:
__fixsfsi():
    71a2:	04 d0       	rcall	.+8      	; 0x71ac <__fixunssfsi>
    71a4:	68 94       	set
    71a6:	b1 11       	cpse	r27, r1
    71a8:	d9 c0       	rjmp	.+434    	; 0x735c <__fp_szero>
    71aa:	08 95       	ret

000071ac <__fixunssfsi>:
__fixunssfsi():
    71ac:	bc d0       	rcall	.+376    	; 0x7326 <__fp_splitA>
    71ae:	88 f0       	brcs	.+34     	; 0x71d2 <__fixunssfsi+0x26>
    71b0:	9f 57       	subi	r25, 0x7F	; 127
    71b2:	90 f0       	brcs	.+36     	; 0x71d8 <__fixunssfsi+0x2c>
    71b4:	b9 2f       	mov	r27, r25
    71b6:	99 27       	eor	r25, r25
    71b8:	b7 51       	subi	r27, 0x17	; 23
    71ba:	a0 f0       	brcs	.+40     	; 0x71e4 <__fixunssfsi+0x38>
    71bc:	d1 f0       	breq	.+52     	; 0x71f2 <__fixunssfsi+0x46>
    71be:	66 0f       	add	r22, r22
    71c0:	77 1f       	adc	r23, r23
    71c2:	88 1f       	adc	r24, r24
    71c4:	99 1f       	adc	r25, r25
    71c6:	1a f0       	brmi	.+6      	; 0x71ce <__fixunssfsi+0x22>
    71c8:	ba 95       	dec	r27
    71ca:	c9 f7       	brne	.-14     	; 0x71be <__fixunssfsi+0x12>
    71cc:	12 c0       	rjmp	.+36     	; 0x71f2 <__fixunssfsi+0x46>
    71ce:	b1 30       	cpi	r27, 0x01	; 1
    71d0:	81 f0       	breq	.+32     	; 0x71f2 <__fixunssfsi+0x46>
    71d2:	c3 d0       	rcall	.+390    	; 0x735a <__fp_zero>
    71d4:	b1 e0       	ldi	r27, 0x01	; 1
    71d6:	08 95       	ret
    71d8:	c0 c0       	rjmp	.+384    	; 0x735a <__fp_zero>
    71da:	67 2f       	mov	r22, r23
    71dc:	78 2f       	mov	r23, r24
    71de:	88 27       	eor	r24, r24
    71e0:	b8 5f       	subi	r27, 0xF8	; 248
    71e2:	39 f0       	breq	.+14     	; 0x71f2 <__fixunssfsi+0x46>
    71e4:	b9 3f       	cpi	r27, 0xF9	; 249
    71e6:	cc f3       	brlt	.-14     	; 0x71da <__fixunssfsi+0x2e>
    71e8:	86 95       	lsr	r24
    71ea:	77 95       	ror	r23
    71ec:	67 95       	ror	r22
    71ee:	b3 95       	inc	r27
    71f0:	d9 f7       	brne	.-10     	; 0x71e8 <__fixunssfsi+0x3c>
    71f2:	3e f4       	brtc	.+14     	; 0x7202 <__fixunssfsi+0x56>
    71f4:	90 95       	com	r25
    71f6:	80 95       	com	r24
    71f8:	70 95       	com	r23
    71fa:	61 95       	neg	r22
    71fc:	7f 4f       	sbci	r23, 0xFF	; 255
    71fe:	8f 4f       	sbci	r24, 0xFF	; 255
    7200:	9f 4f       	sbci	r25, 0xFF	; 255
    7202:	08 95       	ret

00007204 <__floatunsisf>:
__floatunsisf():
    7204:	e8 94       	clt
    7206:	09 c0       	rjmp	.+18     	; 0x721a <__floatsisf+0x12>

00007208 <__floatsisf>:
    7208:	97 fb       	bst	r25, 7
    720a:	3e f4       	brtc	.+14     	; 0x721a <__floatsisf+0x12>
    720c:	90 95       	com	r25
    720e:	80 95       	com	r24
    7210:	70 95       	com	r23
    7212:	61 95       	neg	r22
    7214:	7f 4f       	sbci	r23, 0xFF	; 255
    7216:	8f 4f       	sbci	r24, 0xFF	; 255
    7218:	9f 4f       	sbci	r25, 0xFF	; 255
    721a:	99 23       	and	r25, r25
    721c:	a9 f0       	breq	.+42     	; 0x7248 <__floatsisf+0x40>
    721e:	f9 2f       	mov	r31, r25
    7220:	96 e9       	ldi	r25, 0x96	; 150
    7222:	bb 27       	eor	r27, r27
    7224:	93 95       	inc	r25
    7226:	f6 95       	lsr	r31
    7228:	87 95       	ror	r24
    722a:	77 95       	ror	r23
    722c:	67 95       	ror	r22
    722e:	b7 95       	ror	r27
    7230:	f1 11       	cpse	r31, r1
    7232:	f8 cf       	rjmp	.-16     	; 0x7224 <__floatsisf+0x1c>
    7234:	fa f4       	brpl	.+62     	; 0x7274 <__floatsisf+0x6c>
    7236:	bb 0f       	add	r27, r27
    7238:	11 f4       	brne	.+4      	; 0x723e <__floatsisf+0x36>
    723a:	60 ff       	sbrs	r22, 0
    723c:	1b c0       	rjmp	.+54     	; 0x7274 <__floatsisf+0x6c>
    723e:	6f 5f       	subi	r22, 0xFF	; 255
    7240:	7f 4f       	sbci	r23, 0xFF	; 255
    7242:	8f 4f       	sbci	r24, 0xFF	; 255
    7244:	9f 4f       	sbci	r25, 0xFF	; 255
    7246:	16 c0       	rjmp	.+44     	; 0x7274 <__floatsisf+0x6c>
    7248:	88 23       	and	r24, r24
    724a:	11 f0       	breq	.+4      	; 0x7250 <__floatsisf+0x48>
    724c:	96 e9       	ldi	r25, 0x96	; 150
    724e:	11 c0       	rjmp	.+34     	; 0x7272 <__floatsisf+0x6a>
    7250:	77 23       	and	r23, r23
    7252:	21 f0       	breq	.+8      	; 0x725c <__floatsisf+0x54>
    7254:	9e e8       	ldi	r25, 0x8E	; 142
    7256:	87 2f       	mov	r24, r23
    7258:	76 2f       	mov	r23, r22
    725a:	05 c0       	rjmp	.+10     	; 0x7266 <__floatsisf+0x5e>
    725c:	66 23       	and	r22, r22
    725e:	71 f0       	breq	.+28     	; 0x727c <__floatsisf+0x74>
    7260:	96 e8       	ldi	r25, 0x86	; 134
    7262:	86 2f       	mov	r24, r22
    7264:	70 e0       	ldi	r23, 0x00	; 0
    7266:	60 e0       	ldi	r22, 0x00	; 0
    7268:	2a f0       	brmi	.+10     	; 0x7274 <__floatsisf+0x6c>
    726a:	9a 95       	dec	r25
    726c:	66 0f       	add	r22, r22
    726e:	77 1f       	adc	r23, r23
    7270:	88 1f       	adc	r24, r24
    7272:	da f7       	brpl	.-10     	; 0x726a <__floatsisf+0x62>
    7274:	88 0f       	add	r24, r24
    7276:	96 95       	lsr	r25
    7278:	87 95       	ror	r24
    727a:	97 f9       	bld	r25, 7
    727c:	08 95       	ret

0000727e <__fp_cmp>:
__fp_cmp():
    727e:	99 0f       	add	r25, r25
    7280:	00 08       	sbc	r0, r0
    7282:	55 0f       	add	r21, r21
    7284:	aa 0b       	sbc	r26, r26
    7286:	e0 e8       	ldi	r30, 0x80	; 128
    7288:	fe ef       	ldi	r31, 0xFE	; 254
    728a:	16 16       	cp	r1, r22
    728c:	17 06       	cpc	r1, r23
    728e:	e8 07       	cpc	r30, r24
    7290:	f9 07       	cpc	r31, r25
    7292:	c0 f0       	brcs	.+48     	; 0x72c4 <__fp_cmp+0x46>
    7294:	12 16       	cp	r1, r18
    7296:	13 06       	cpc	r1, r19
    7298:	e4 07       	cpc	r30, r20
    729a:	f5 07       	cpc	r31, r21
    729c:	98 f0       	brcs	.+38     	; 0x72c4 <__fp_cmp+0x46>
    729e:	62 1b       	sub	r22, r18
    72a0:	73 0b       	sbc	r23, r19
    72a2:	84 0b       	sbc	r24, r20
    72a4:	95 0b       	sbc	r25, r21
    72a6:	39 f4       	brne	.+14     	; 0x72b6 <__fp_cmp+0x38>
    72a8:	0a 26       	eor	r0, r26
    72aa:	61 f0       	breq	.+24     	; 0x72c4 <__fp_cmp+0x46>
    72ac:	23 2b       	or	r18, r19
    72ae:	24 2b       	or	r18, r20
    72b0:	25 2b       	or	r18, r21
    72b2:	21 f4       	brne	.+8      	; 0x72bc <__fp_cmp+0x3e>
    72b4:	08 95       	ret
    72b6:	0a 26       	eor	r0, r26
    72b8:	09 f4       	brne	.+2      	; 0x72bc <__fp_cmp+0x3e>
    72ba:	a1 40       	sbci	r26, 0x01	; 1
    72bc:	a6 95       	lsr	r26
    72be:	8f ef       	ldi	r24, 0xFF	; 255
    72c0:	81 1d       	adc	r24, r1
    72c2:	81 1d       	adc	r24, r1
    72c4:	08 95       	ret

000072c6 <__fp_inf>:
__fp_inf():
    72c6:	97 f9       	bld	r25, 7
    72c8:	9f 67       	ori	r25, 0x7F	; 127
    72ca:	80 e8       	ldi	r24, 0x80	; 128
    72cc:	70 e0       	ldi	r23, 0x00	; 0
    72ce:	60 e0       	ldi	r22, 0x00	; 0
    72d0:	08 95       	ret

000072d2 <__fp_nan>:
__fp_nan():
    72d2:	9f ef       	ldi	r25, 0xFF	; 255
    72d4:	80 ec       	ldi	r24, 0xC0	; 192
    72d6:	08 95       	ret

000072d8 <__fp_pscA>:
__fp_pscA():
    72d8:	00 24       	eor	r0, r0
    72da:	0a 94       	dec	r0
    72dc:	16 16       	cp	r1, r22
    72de:	17 06       	cpc	r1, r23
    72e0:	18 06       	cpc	r1, r24
    72e2:	09 06       	cpc	r0, r25
    72e4:	08 95       	ret

000072e6 <__fp_pscB>:
__fp_pscB():
    72e6:	00 24       	eor	r0, r0
    72e8:	0a 94       	dec	r0
    72ea:	12 16       	cp	r1, r18
    72ec:	13 06       	cpc	r1, r19
    72ee:	14 06       	cpc	r1, r20
    72f0:	05 06       	cpc	r0, r21
    72f2:	08 95       	ret

000072f4 <__fp_round>:
__fp_round():
    72f4:	09 2e       	mov	r0, r25
    72f6:	03 94       	inc	r0
    72f8:	00 0c       	add	r0, r0
    72fa:	11 f4       	brne	.+4      	; 0x7300 <__fp_round+0xc>
    72fc:	88 23       	and	r24, r24
    72fe:	52 f0       	brmi	.+20     	; 0x7314 <__fp_round+0x20>
    7300:	bb 0f       	add	r27, r27
    7302:	40 f4       	brcc	.+16     	; 0x7314 <__fp_round+0x20>
    7304:	bf 2b       	or	r27, r31
    7306:	11 f4       	brne	.+4      	; 0x730c <__fp_round+0x18>
    7308:	60 ff       	sbrs	r22, 0
    730a:	04 c0       	rjmp	.+8      	; 0x7314 <__fp_round+0x20>
    730c:	6f 5f       	subi	r22, 0xFF	; 255
    730e:	7f 4f       	sbci	r23, 0xFF	; 255
    7310:	8f 4f       	sbci	r24, 0xFF	; 255
    7312:	9f 4f       	sbci	r25, 0xFF	; 255
    7314:	08 95       	ret

00007316 <__fp_split3>:
__fp_split3():
    7316:	57 fd       	sbrc	r21, 7
    7318:	90 58       	subi	r25, 0x80	; 128
    731a:	44 0f       	add	r20, r20
    731c:	55 1f       	adc	r21, r21
    731e:	59 f0       	breq	.+22     	; 0x7336 <__fp_splitA+0x10>
    7320:	5f 3f       	cpi	r21, 0xFF	; 255
    7322:	71 f0       	breq	.+28     	; 0x7340 <__fp_splitA+0x1a>
    7324:	47 95       	ror	r20

00007326 <__fp_splitA>:
    7326:	88 0f       	add	r24, r24
    7328:	97 fb       	bst	r25, 7
    732a:	99 1f       	adc	r25, r25
    732c:	61 f0       	breq	.+24     	; 0x7346 <__fp_splitA+0x20>
    732e:	9f 3f       	cpi	r25, 0xFF	; 255
    7330:	79 f0       	breq	.+30     	; 0x7350 <__fp_splitA+0x2a>
    7332:	87 95       	ror	r24
    7334:	08 95       	ret
    7336:	12 16       	cp	r1, r18
    7338:	13 06       	cpc	r1, r19
    733a:	14 06       	cpc	r1, r20
    733c:	55 1f       	adc	r21, r21
    733e:	f2 cf       	rjmp	.-28     	; 0x7324 <__fp_split3+0xe>
    7340:	46 95       	lsr	r20
    7342:	f1 df       	rcall	.-30     	; 0x7326 <__fp_splitA>
    7344:	08 c0       	rjmp	.+16     	; 0x7356 <__fp_splitA+0x30>
    7346:	16 16       	cp	r1, r22
    7348:	17 06       	cpc	r1, r23
    734a:	18 06       	cpc	r1, r24
    734c:	99 1f       	adc	r25, r25
    734e:	f1 cf       	rjmp	.-30     	; 0x7332 <__fp_splitA+0xc>
    7350:	86 95       	lsr	r24
    7352:	71 05       	cpc	r23, r1
    7354:	61 05       	cpc	r22, r1
    7356:	08 94       	sec
    7358:	08 95       	ret

0000735a <__fp_zero>:
__fp_zero():
    735a:	e8 94       	clt

0000735c <__fp_szero>:
    735c:	bb 27       	eor	r27, r27
    735e:	66 27       	eor	r22, r22
    7360:	77 27       	eor	r23, r23
    7362:	cb 01       	movw	r24, r22
    7364:	97 f9       	bld	r25, 7
    7366:	08 95       	ret

00007368 <__gesf2>:
__gesf2():
    7368:	8a df       	rcall	.-236    	; 0x727e <__fp_cmp>
    736a:	08 f4       	brcc	.+2      	; 0x736e <__gesf2+0x6>
    736c:	8f ef       	ldi	r24, 0xFF	; 255
    736e:	08 95       	ret

00007370 <__mulsf3>:
__mulsf3():
    7370:	0b d0       	rcall	.+22     	; 0x7388 <__mulsf3x>
    7372:	c0 cf       	rjmp	.-128    	; 0x72f4 <__fp_round>
    7374:	b1 df       	rcall	.-158    	; 0x72d8 <__fp_pscA>
    7376:	28 f0       	brcs	.+10     	; 0x7382 <__mulsf3+0x12>
    7378:	b6 df       	rcall	.-148    	; 0x72e6 <__fp_pscB>
    737a:	18 f0       	brcs	.+6      	; 0x7382 <__mulsf3+0x12>
    737c:	95 23       	and	r25, r21
    737e:	09 f0       	breq	.+2      	; 0x7382 <__mulsf3+0x12>
    7380:	a2 cf       	rjmp	.-188    	; 0x72c6 <__fp_inf>
    7382:	a7 cf       	rjmp	.-178    	; 0x72d2 <__fp_nan>
    7384:	11 24       	eor	r1, r1
    7386:	ea cf       	rjmp	.-44     	; 0x735c <__fp_szero>

00007388 <__mulsf3x>:
__mulsf3x():
    7388:	c6 df       	rcall	.-116    	; 0x7316 <__fp_split3>
    738a:	a0 f3       	brcs	.-24     	; 0x7374 <__mulsf3+0x4>

0000738c <__mulsf3_pse>:
    738c:	95 9f       	mul	r25, r21
    738e:	d1 f3       	breq	.-12     	; 0x7384 <__mulsf3+0x14>
    7390:	95 0f       	add	r25, r21
    7392:	50 e0       	ldi	r21, 0x00	; 0
    7394:	55 1f       	adc	r21, r21
    7396:	62 9f       	mul	r22, r18
    7398:	f0 01       	movw	r30, r0
    739a:	72 9f       	mul	r23, r18
    739c:	bb 27       	eor	r27, r27
    739e:	f0 0d       	add	r31, r0
    73a0:	b1 1d       	adc	r27, r1
    73a2:	63 9f       	mul	r22, r19
    73a4:	aa 27       	eor	r26, r26
    73a6:	f0 0d       	add	r31, r0
    73a8:	b1 1d       	adc	r27, r1
    73aa:	aa 1f       	adc	r26, r26
    73ac:	64 9f       	mul	r22, r20
    73ae:	66 27       	eor	r22, r22
    73b0:	b0 0d       	add	r27, r0
    73b2:	a1 1d       	adc	r26, r1
    73b4:	66 1f       	adc	r22, r22
    73b6:	82 9f       	mul	r24, r18
    73b8:	22 27       	eor	r18, r18
    73ba:	b0 0d       	add	r27, r0
    73bc:	a1 1d       	adc	r26, r1
    73be:	62 1f       	adc	r22, r18
    73c0:	73 9f       	mul	r23, r19
    73c2:	b0 0d       	add	r27, r0
    73c4:	a1 1d       	adc	r26, r1
    73c6:	62 1f       	adc	r22, r18
    73c8:	83 9f       	mul	r24, r19
    73ca:	a0 0d       	add	r26, r0
    73cc:	61 1d       	adc	r22, r1
    73ce:	22 1f       	adc	r18, r18
    73d0:	74 9f       	mul	r23, r20
    73d2:	33 27       	eor	r19, r19
    73d4:	a0 0d       	add	r26, r0
    73d6:	61 1d       	adc	r22, r1
    73d8:	23 1f       	adc	r18, r19
    73da:	84 9f       	mul	r24, r20
    73dc:	60 0d       	add	r22, r0
    73de:	21 1d       	adc	r18, r1
    73e0:	82 2f       	mov	r24, r18
    73e2:	76 2f       	mov	r23, r22
    73e4:	6a 2f       	mov	r22, r26
    73e6:	11 24       	eor	r1, r1
    73e8:	9f 57       	subi	r25, 0x7F	; 127
    73ea:	50 40       	sbci	r21, 0x00	; 0
    73ec:	8a f0       	brmi	.+34     	; 0x7410 <__mulsf3_pse+0x84>
    73ee:	e1 f0       	breq	.+56     	; 0x7428 <__mulsf3_pse+0x9c>
    73f0:	88 23       	and	r24, r24
    73f2:	4a f0       	brmi	.+18     	; 0x7406 <__mulsf3_pse+0x7a>
    73f4:	ee 0f       	add	r30, r30
    73f6:	ff 1f       	adc	r31, r31
    73f8:	bb 1f       	adc	r27, r27
    73fa:	66 1f       	adc	r22, r22
    73fc:	77 1f       	adc	r23, r23
    73fe:	88 1f       	adc	r24, r24
    7400:	91 50       	subi	r25, 0x01	; 1
    7402:	50 40       	sbci	r21, 0x00	; 0
    7404:	a9 f7       	brne	.-22     	; 0x73f0 <__mulsf3_pse+0x64>
    7406:	9e 3f       	cpi	r25, 0xFE	; 254
    7408:	51 05       	cpc	r21, r1
    740a:	70 f0       	brcs	.+28     	; 0x7428 <__mulsf3_pse+0x9c>
    740c:	5c cf       	rjmp	.-328    	; 0x72c6 <__fp_inf>
    740e:	a6 cf       	rjmp	.-180    	; 0x735c <__fp_szero>
    7410:	5f 3f       	cpi	r21, 0xFF	; 255
    7412:	ec f3       	brlt	.-6      	; 0x740e <__mulsf3_pse+0x82>
    7414:	98 3e       	cpi	r25, 0xE8	; 232
    7416:	dc f3       	brlt	.-10     	; 0x740e <__mulsf3_pse+0x82>
    7418:	86 95       	lsr	r24
    741a:	77 95       	ror	r23
    741c:	67 95       	ror	r22
    741e:	b7 95       	ror	r27
    7420:	f7 95       	ror	r31
    7422:	e7 95       	ror	r30
    7424:	9f 5f       	subi	r25, 0xFF	; 255
    7426:	c1 f7       	brne	.-16     	; 0x7418 <__mulsf3_pse+0x8c>
    7428:	fe 2b       	or	r31, r30
    742a:	88 0f       	add	r24, r24
    742c:	91 1d       	adc	r25, r1
    742e:	96 95       	lsr	r25
    7430:	87 95       	ror	r24
    7432:	97 f9       	bld	r25, 7
    7434:	08 95       	ret

00007436 <__divmodhi4>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    7436:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    7438:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    743a:	16 f4       	brtc	.+4      	; 0x7440 <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    743c:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    743e:	06 d0       	rcall	.+12     	; 0x744c <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    7440:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    7442:	08 d0       	rcall	.+16     	; 0x7454 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    7444:	65 d0       	rcall	.+202    	; 0x7510 <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    7446:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    7448:	05 d0       	rcall	.+10     	; 0x7454 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    744a:	3e f4       	brtc	.+14     	; 0x745a <__divmodhi4_exit>

0000744c <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    744c:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    744e:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    7450:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    7452:	08 95       	ret

00007454 <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    7454:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    7456:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    7458:	7f 4f       	sbci	r23, 0xFF	; 255

0000745a <__divmodhi4_exit>:
__divmodhi4_exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    745a:	08 95       	ret

0000745c <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    745c:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    745e:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    7460:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    7462:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    7464:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    7466:	0d c0       	rjmp	.+26     	; 0x7482 <__udivmodsi4_ep>

00007468 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    7468:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    746a:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    746c:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    746e:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    7470:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    7472:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    7474:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    7476:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    7478:	20 f0       	brcs	.+8      	; 0x7482 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    747a:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    747c:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    747e:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    7480:	f5 0b       	sbc	r31, r21

00007482 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    7482:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    7484:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    7486:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    7488:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    748a:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    748c:	69 f7       	brne	.-38     	; 0x7468 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    748e:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    7490:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    7492:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    7494:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    7496:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    7498:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    749a:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    749c:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    749e:	08 95       	ret

000074a0 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    74a0:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    74a2:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    74a4:	16 f4       	brtc	.+4      	; 0x74aa <__divmodsi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    74a6:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    74a8:	0f d0       	rcall	.+30     	; 0x74c8 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    74aa:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    74ac:	05 d0       	rcall	.+10     	; 0x74b8 <__divmodsi4_neg2>
    74ae:	d6 df       	rcall	.-84     	; 0x745c <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    74b0:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    74b2:	02 d0       	rcall	.+4      	; 0x74b8 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    74b4:	46 f4       	brtc	.+16     	; 0x74c6 <__divmodsi4_exit>
    74b6:	08 c0       	rjmp	.+16     	; 0x74c8 <__negsi2>

000074b8 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    74b8:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    74ba:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    74bc:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    74be:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    74c0:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    74c2:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    74c4:	5f 4f       	sbci	r21, 0xFF	; 255

000074c6 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    74c6:	08 95       	ret

000074c8 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    74c8:	90 95       	com	r25
    74ca:	80 95       	com	r24
    74cc:	70 95       	com	r23
    74ce:	61 95       	neg	r22
    74d0:	7f 4f       	sbci	r23, 0xFF	; 255
    74d2:	8f 4f       	sbci	r24, 0xFF	; 255
    74d4:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    74d6:	08 95       	ret

000074d8 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    74d8:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    74da:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    74dc:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    74de:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    74e0:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    74e2:	09 94       	ijmp

000074e4 <__usmulhisi3>:
__usmulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:545
    74e4:	29 d0       	rcall	.+82     	; 0x7538 <__umulhisi3>

000074e6 <__usmulhisi3_tail>:
__usmulhisi3_tail():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:551
    74e6:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:552
    74e8:	08 95       	ret
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:553
    74ea:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:554
    74ec:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:555
    74ee:	08 95       	ret

000074f0 <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    74f0:	23 d0       	rcall	.+70     	; 0x7538 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    74f2:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    74f4:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    74f6:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    74f8:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    74fa:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    74fc:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    74fe:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    7500:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    7502:	08 95       	ret

00007504 <__mulshisi3>:
__mulshisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    7504:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    7506:	f4 cf       	rjmp	.-24     	; 0x74f0 <__muluhisi3>

00007508 <__mulohisi3>:
__mulohisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    7508:	f3 df       	rcall	.-26     	; 0x74f0 <__muluhisi3>
    750a:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    750c:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    750e:	08 95       	ret

00007510 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    7510:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    7512:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    7514:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    7516:	07 c0       	rjmp	.+14     	; 0x7526 <__udivmodhi4_ep>

00007518 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    7518:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    751a:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    751c:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    751e:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    7520:	10 f0       	brcs	.+4      	; 0x7526 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    7522:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    7524:	b7 0b       	sbc	r27, r23

00007526 <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    7526:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    7528:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    752a:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    752c:	a9 f7       	brne	.-22     	; 0x7518 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    752e:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    7530:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    7532:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    7534:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    7536:	08 95       	ret

00007538 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    7538:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    753a:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    753c:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    753e:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    7540:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    7542:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    7544:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    7546:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    7548:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    754a:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    754c:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    754e:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    7550:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    7552:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    7554:	08 95       	ret

00007556 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    7556:	f8 94       	cli

00007558 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    7558:	ff cf       	rjmp	.-2      	; 0x7558 <__stop_program>
